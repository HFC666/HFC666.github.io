<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>独自赏晴雨</title>
  
  
  <link href="https://www.hfcouc.work/atom.xml" rel="self"/>
  
  <link href="https://www.hfcouc.work/"/>
  <updated>2022-07-10T12:14:43.150Z</updated>
  <id>https://www.hfcouc.work/</id>
  
  <author>
    <name>Han Fangcheng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>变分贝叶斯推断</title>
    <link href="https://www.hfcouc.work/2022/07/10/VBI/"/>
    <id>https://www.hfcouc.work/2022/07/10/VBI/</id>
    <published>2022-07-10T12:03:59.000Z</published>
    <updated>2022-07-10T12:14:43.150Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Variational-Bayesian-inference"><a href="#Variational-Bayesian-inference" class="headerlink" title="Variational Bayesian inference"></a>Variational Bayesian inference</h2><p align="center">    <img src="https://img0.baidu.com/it/u=2387178916,3720682298&fm=253&fmt=auto?w=1280&h=720" style="zoom: 100%;" /></p><blockquote><p>参考文献</p><ol><li><a href="https://github.com/roboticcam/machine-learning-notes/blob/master/files/variational.pdf">徐亦达老师变分推断课件</a></li><li><a href="https://link.springer.com/article/10.1007/s10462-011-9236-8">A tutorial on variational Bayesian inference</a></li><li><a href="https://www.bilibili.com/video/BV1QW411y7D3?spm_id_from=333.337.search-card.all.click&amp;vd_source=6177c61c946280bb88c727585de76bc8">白板推导指数族分布</a></li><li><a href="https://www.bilibili.com/video/BV1DW41167vr?spm_id_from=333.337.search-card.all.click&amp;vd_source=6177c61c946280bb88c727585de76bc8">白板推导变分推断</a></li></ol></blockquote><span id="more"></span><h3 id="Log-likelihood-and-Evidence-Lower-Bound-ELOB"><a href="#Log-likelihood-and-Evidence-Lower-Bound-ELOB" class="headerlink" title="Log-likelihood and Evidence Lower Bound(ELOB)"></a>Log-likelihood and Evidence Lower Bound(ELOB)</h3><p>下列表达式总是成立：</p><script type="math/tex; mode=display">\ln(p(X)) = \ln(p(X,Z)) - \ln(P(Z\mid X))</script><p>所以下式也成立：</p><script type="math/tex; mode=display">\ln(P(X)) = \left[\ln(p(X,Z))-\ln(q(Z))\right] - \left[\ln(p(Z\mid X))-\ln(q(Z))\right]</script><p>所以现在我们有</p><script type="math/tex; mode=display">\ln(p(X)) = \ln\left(\frac{p(X,Z)}{q(Z)}\right) - \ln\left(\frac{p(Z\mid X)}{q(Z)}\right)</script><p>两边同时取期望：</p><script type="math/tex; mode=display">\begin{aligned}\ln (p(X)) &=\int q(Z) \ln \left(\frac{p(X, Z)}{q(Z)}\right) \mathrm{d} Z-\int q(Z) \ln \left(\frac{p(Z \mid X)}{q(Z)}\right) \mathrm{d} Z \\&=\underbrace{\int q(Z) \ln (p(X, Z)) \mathrm{d} Z-\int q(Z) \ln (q(Z)) \mathrm{d} Z}_{\mathcal{L}(q)}+\underbrace{\left(-\int q(Z) \ln \left(\frac{p(Z \mid X)}{q(Z)}\right) \mathrm{d} Z\right)}_{\mathbb{K} \mathbb{L}(q \| p)} \\&=\mathcal{L}(q)+\mathbb{K} \mathbb{L}(q \| p)\end{aligned}</script><p>KL散度一般用于度量两个概率分布函数之间的距离，其定义如下：</p><script type="math/tex; mode=display">\mathbb{KL}[p(X)\mid q(X)] = \sum_{x\in X}\left[p(x)\log\frac{p(x)}{q(x)}\right] = \mathbb{E}_{x\sim p(x)}\left[\log\frac{p(x)}{q(x)}\right]</script><p>我们要做的就是找到与后验分布$p(Z\mid X)$最接近的简单分布$p(Z)$。</p><h3 id="Alternative-Evidence-Lower-Bound-ELOB"><a href="#Alternative-Evidence-Lower-Bound-ELOB" class="headerlink" title="Alternative Evidence Lower Bound(ELOB)"></a>Alternative Evidence Lower Bound(ELOB)</h3><p>我们看另一种推导方法：</p><script type="math/tex; mode=display">\begin{aligned}\ln (p(X)) &=\log \int_{Z} p(X, Z) \mathrm{d} z \\&=\log \int_{Z} p(X, Z) \frac{q(Z)}{q(Z)} \mathrm{d} z \\&=\log \left(\mathbb{E}_{q}\left[\frac{p(X, Z)}{q(Z)}\right]\right) \\& \geq \mathbb{E}_{q}\left[\log \left(\frac{p(X, Z)}{q(Z)}\right)\right] \text { using Jensen's inequality } \\&=\mathbb{E}_{q}[\log (p(X, Z))]-\mathbb{E}_{q}[\log (q(Z))] \\& \triangleq \mathcal{L}(q)\end{aligned}</script><h3 id="Maximize-Evidence-Lower-Bound-ELOB"><a href="#Maximize-Evidence-Lower-Bound-ELOB" class="headerlink" title="Maximize Evidence Lower Bound(ELOB)"></a>Maximize Evidence Lower Bound(ELOB)</h3><p>我们给每个部分一个名字：</p><script type="math/tex; mode=display">\begin{array}{ll}\text {Evidence Lower Bound (ELOB):} & \mathcal{L}(q)=\int q(Z) \ln (p(X, Z)) \mathrm{d} Z-\int q(Z) \ln (q(Z)) \mathrm{d} Z \\\mathrm{KL} \text { divergence: } & \mathbb{K} \mathbb{L}(q \| p)=-\int q(Z) \ln \left(\frac{p(Z \mid X)}{q(Z)}\right) d Z\end{array}</script><ul><li>注意$p(X)$对于$q(Z)$的选择是固定的。我们想要去选择一个$q(Z)$函数最小化KL散度，因此$q(Z)$变得离$p(Z\mid X)$越来越近。很容易验证，当$q(Z)=p(Z\mid X)$时，KL散度为$0$。</li><li>我们知道$\ln p(X) = \mathcal{L}(q)+\mathbb{KL}(q| p)$。最小化$\mathbb{KL}(q| p)$等同于最大化$\mathcal{L}(q)$。</li></ul><p>我们可以选择$q(Z)$使得</p><script type="math/tex; mode=display">q(Z) = \prod_{i=1}^Mq_i(Z_i)</script><p>其中$M$为$Z$的维度，也就是说$q(Z)$的各个维度是独立的，这被称为<strong>平均场变分贝叶斯</strong>。</p><blockquote><p>注意$q(Z)$对联合概率密度函数$p(Z\mid X)$是一个很好地近似，但是边缘分布$q(Z_i)$对$p(Z_i\mid x)$的近似不一定好。</p></blockquote><p>将其带入到$\mathcal{L}(q)$中：</p><script type="math/tex; mode=display">\begin{aligned}\mathcal{L}(q) &=\int q(Z) \ln (p(X, Z)) \mathrm{d} Z-\int q(Z) \ln (q(Z)) \mathrm{d} Z \\&=\underbrace{\int \prod_{i=1}^{M} q_{i}\left(Z_{i}\right) \ln (p(X, Z)) \mathrm{d} Z}_{\text {part (1) }}-\underbrace{\int \prod_{i=1}^{M} q_{i}\left(Z_{i}\right) \sum_{i=1}^{M} \ln \left(q_{i}\left(Z_{i}\right)\right) \mathrm{d} Z}_{\text {part (2) }}\end{aligned}</script><p>我们先看Part1，假设我们只对$Z_i$感兴趣，将其拿出来，变为：</p><script type="math/tex; mode=display">(\operatorname{Part} 1)=\int_{Z_{j}} q_{j}\left(Z_{j}\right)\left(\int_{Z_{i \neq j}} \ldots \int \prod_{i \neq j}^{M} q_{i}\left(Z_{i}\right) \ln (p(X, Z)) \prod_{i \neq j}^{M} d Z_{i}\right) d Z_{j}</script><p>或者将其写为更紧凑的形式：</p><script type="math/tex; mode=display">(\operatorname{Part} 1)=\int_{Z_{j}} q_{j}\left(Z_{j}\right)\left(\int_{Z_{i \neq j}} \cdots \int \ln (p(X, Z)) \prod_{i \neq j}^{M} q_{i}\left(Z_{i}\right) d Z_{i}\right) d Z_{j}</script><p>或者，为了让其更具有意义，可以将其放进一个期望函数里：</p><script type="math/tex; mode=display">(\operatorname{Part} 1)=\int_{Z_{j}} q_{j}\left(Z_{j}\right)\left[\mathbb{E}_{i \neq j}[\ln (p(X, Z))]\right] d Z_{j}</script><p>现在再看Part2：</p><script type="math/tex; mode=display">(\text { Part 2) }=\int \prod_{i=1}^{M} q_{i}(Z_{i}) \sum_{i=1}^{M} \ln \left(q_{i}(Z_{i}\right)) d Z</script><p>将其化简：</p><script type="math/tex; mode=display">\begin{aligned}\operatorname{(Part2)} &= \int q(Z)\sum_{i=1}^M\ln(q_i(Z_i))dZ\\&=\sum_{i=1}^M\int_{Z}q(Z_1,\cdots,Z_M)\ln(q_i(Z_i))dZ\\&=\sum_{i=1}^M\int_{Z_i}q_i(Z_i)\ln(q_i(Z_i))dZ_i\end{aligned}</script><p>假设现在我们只对$q_j(Z_j)$感兴趣，则其余部分可以看作常数，因此上式可以进一步写为：</p><script type="math/tex; mode=display">(\text { Part } 2)=\int_{Z_{j}} q_{j}\left(Z_{j}\right) \ln \left(q_{j}\left(Z_{j}\right)\right) d Z_{j}+\text { const}</script><p>则$\mathcal{L}(q)$变为：</p><script type="math/tex; mode=display">\mathcal{L}(q)=\operatorname{Part}(1)-\operatorname{Part}(2)=\int_{Z_{j}} q_{j}\left(Z_{j}\right) \mathbb{E}_{i \neq j}[\ln (p(X, Z))] \mathrm{d} Z_{j}-\int_{Z_{j}} q_{j}\left(Z_{j}\right) \ln \left(q_{j}\left(Z_{j}\right)\right) \mathrm{d} Z_{j}+\operatorname{const}</script><p>我们定义：</p><script type="math/tex; mode=display">\ln(\tilde{p}_j(X,Z_j)) = \mathbb{E}_{i\neq j}[\ln(p(X,Z))]</script><p>或者定价的我们可以将ELOB写为：</p><script type="math/tex; mode=display">\mathcal{L}(q_j) = \int_{Z_j}q_j(Z_j)\ln\left[\frac{\tilde{p}_j(X,Z_j)}{q_j(Z_j)}\right]+\text{const}</script><p>这与</p><script type="math/tex; mode=display">-\mathbb{KL}\left(\exp(\mathbb{E}_{i\neq j}[\ln(p(X,Z))])\| q_i(Z_i)\right)</script><p>相等。</p><p><strong>所以我们可以最大化ELOB，或者$\mathcal{L}(q)$，通过最小化这个特殊的KL散度，也就是找到近似和最优$q^\star_i(Z_i)$，使得</strong></p><script type="math/tex; mode=display">\ln(q_i^\star(Z_i)) = \mathbb{E}_{i\neq j}[\ln(p(X,Z))]</script><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>令数据$\mathcal{D}=\{x_1,\cdots,x_n\}$，则</p><script type="math/tex; mode=display">\begin{gathered}p(\mathcal{D} \mid \mu, \tau)=\prod_{i=1}^{n}\left(\frac{\tau}{2 \pi}\right)^{\frac{1}{2}} \exp \left(\frac{-\tau}{2}\left(x_{i}-\mu\right)^{2}\right) \\=\left(\frac{\tau}{2 \pi}\right)^{\frac{n}{2}} \exp \left(\frac{-\tau}{2} \sum_{i=1}^{n}\left(x_{i}-\mu\right)^{2}\right) \\p(\mu \mid \tau)=\mathcal{N}\left(\mu_{0},\left(\lambda_{0} \tau\right)^{-1}\right) \propto \exp \left(\frac{-\lambda_{0} \tau}{2}\left(\mu-\mu_{0}\right)^{2}\right) \\p(\tau)=\operatorname{Gamma}\left(\tau \mid a_{0}, b_{0}\right) \propto \tau^{a_{0}-1} \exp ^{-b_{0} \tau}\end{gathered}</script><p>并且</p><script type="math/tex; mode=display">p(\mathcal{D},\mu,\tau) = p(\mathcal{D}\mid \mu,\tau)p(\mu\mid \tau)p(\tau)</script><p>则：</p><script type="math/tex; mode=display">p(\mu,\tau\mid d)\propto p(\mathcal{D}\mid \mu,\tau)p(\mu\mid \tau)p(\tau)=\mathcal{N}(\mu_n,(\lambda \tau)^{-1})\text{Gamma}(\tau\mid a_n,b_n)</script><p>其中</p><script type="math/tex; mode=display">\begin{aligned}\mu_{n} &=\frac{\lambda_{0} \mu_{0}+n \bar{x}}{\lambda_{0}+n} \\\lambda_{n} &=\lambda_{0}+n \\a_{n} &=a_{0}+n / 2 \\b_{n} &=b_{0}+\frac{1}{2} \sum_{i=1}^{n}\left(x_{i}-\bar{x}\right)^{2}+\frac{\lambda_{0} n\left(\bar{x}-\mu_{0}\right)^{2}}{2\left(\lambda_{0}+n\right)}\end{aligned}</script><p>可以看出是由解析解的，但是为了例子，我们再采用变分贝叶斯的方法，我们假设$q(\mu,\tau)$：</p><script type="math/tex; mode=display">q(\mu,\tau) = q_{\mu}(\mu)q_\tau(\tau)</script><p>则：</p><script type="math/tex; mode=display">\begin{aligned}\ln \left(q_{\mu}^{*}(\mu)\right) &=\mathbb{E}_{q_{\tau}}[\ln (p(\mu, \tau \mid \mathcal{D}))] \\&=\mathbb{E}_{q_{\tau} \tau}[\ln (p(\mathcal{D} \mid \mu, \tau))+\ln p(\mu \mid \tau)]+\text { const. } \quad \text { remove terms do NOT contain } \mu \\&=\mathbb{E}_{q_{\tau}}[\underbrace{-\frac{\tau}{2} \sum_{i=1}^{n}\left(x_{i}-\mu\right)^{2}+\underbrace{\frac{\lambda_{0} \tau}{2}\left(\mu-\mu_{0}\right)^{2}}_{\ln p(\mu \mid \gamma)}]}_{\ln (p(\mathcal{D} \mid \mu, \tau))}+\text { const. }\\&=-\frac{\mathbb{E}_{q_{\tau}}[\tau]}{2} \underbrace{\left[\sum_{i=1}^{n}\left(x_{i}-\mu\right)^{2}+\lambda_{0}\left(\mu-\mu_{0}\right)^{2}\right]}_{\text {terms contain } \mu \text { but does not contain } \tau}+\text { const. }\end{aligned}</script><p>将关于$\mu$的项展开：</p><script type="math/tex; mode=display">\begin{aligned}& \sum_{i=1}^{n}\left(x_{i}-\mu\right)^{2}+\lambda_{0}\left(\mu-\mu_{0}\right)^{2}=n \mu^{2}-2 n \mu \bar{x}+\lambda_{0} \mu^{2}-2 \lambda_{0} \mu_{0} \mu+\text { const. } \\=&\left(n+\lambda_{0}\right) \mu^{2}-2 \mu\left(n \bar{x}+\lambda_{0} \mu_{0}\right)=\left(n+\lambda_{0}\right)\left(\mu^{2}-\frac{2 \mu\left(n \bar{x}+\lambda_{0} \mu_{0}\right)}{\left(n+\lambda_{0}\right)}\right) \\=&\left(n+\lambda_{0}\right)\left(\mu-\frac{\left(n \bar{x}+\lambda_{0} \mu_{0}\right)}{\left(n+\lambda_{0}\right)}\right)^{2}+\text { const. }\end{aligned}</script><p>因此我们有：</p><script type="math/tex; mode=display">\begin{aligned}\ln \left(q_{\mu}^{*}(\mu)\right) &=-\frac{\mathbb{E}_{q_{\tau}}[\tau]}{2}\left[\sum_{i=1}^{n}\left(x_{i}-\mu\right)^{2}+\lambda_{0}\left(\mu-\mu_{0}\right)^{2}\right]+\text { const. } \\&=-\frac{\mathbb{E}_{q_{\tau}}[\tau]\left(n+\lambda_{0}\right)}{2}\left(\mu-\frac{\left(n \bar{x}+\lambda_{0} \mu_{0}\right)}{\left(n+\lambda_{0}\right)}\right)^{2}+\text { const. } \\&=\mathcal{N}\left(\frac{n \bar{x}+\lambda_{0} \mu_{0}}{n+\lambda_{0}}, \mathbb{E}_{q_{\tau}}[\tau]\left(n+\lambda_{0}\right)\right)\end{aligned}</script><p>关于$\tau$，我们有</p><script type="math/tex; mode=display">\begin{aligned}\ln \left(q_{\tau}^{*}(\tau)\right) &=\mathbb{E}_{q_{\mu}}[\ln (p(\mu, \tau \mid \mathcal{D}))] \\&=\mathbb{E}_{q_{\mu}}[\ln (p(\mathcal{D} \mid \mu, \tau))+\ln p(\mu \mid \tau)+\ln p(\tau)]+\text { const. } \\&=\mathbb{E}_{q_{\mu}}[\underbrace{\frac{n}{2} \ln (\tau)-\frac{\tau}{2} \sum_{i=1}^{n}\left(x_{i}-\mu\right)^{2}}_{\ln (p(\mathcal{D} \mid \mu, \tau))} \underbrace{-\frac{\lambda_{0} \tau}{2}\left(\mu-\mu_{0}\right)^{2}}_{\ln p(\mu \mid \gamma)} \underbrace{+\left(a_{0}-1\right) \ln (\tau)-b_{0} \tau}_{\ln p(\tau)}]+\text { const. }\end{aligned}</script><p>将没有$\mu$的项拿出积分：</p><script type="math/tex; mode=display">\begin{aligned}&=\frac{n}{2} \ln (\tau)+\left(a_{0}-1\right) \ln (\tau)-b_{0} \tau-\frac{\tau}{2} \mathbb{E}_{q_{\mu}(\mu)}\left[\sum_{i=1}^{n}\left(x_{i}-\mu\right)^{2}+\lambda_{0}\left(\mu-\mu_{0}\right)^{2}\right]+\text { const. } \\&=(\underbrace{\frac{n}{2}+a_{0}}_{a_{n}}-1) \ln (\tau)-\tau(\underbrace{b_{0}+\frac{1}{2} \mathbb{E}_{q_{\mu}(\mu)}\left[\sum_{i=1}^{n}\left(x_{i}-\mu\right)^{2}+\lambda_{0}\left(\mu-\mu_{0}\right)^{2}\right]}_{b_{n}}+\text { const. }\end{aligned}</script><p>重写为：</p><script type="math/tex; mode=display">\begin{aligned}b_{n} &=b_{0}+\frac{1}{2} \mathbb{E}_{q_{\mu}}\left[\sum_{i=1}^{n}\left(x_{i}-\mu\right)^{2}+\lambda_{0}\left(\mu-\mu_{0}\right)^{2}\right] \\&=b_{0}+\frac{1}{2} \mathbb{E}_{q_{\mu}}\left[-2 \mu n \bar{x}+n \mu^{2}+\lambda_{0} \mu^{2}-2 \lambda_{0} \mu_{0} \mu\right]+\sum_{i=1}^{n}\left(x_{i}\right)^{2}+\lambda_{0} \mu_{0}^{2} \\&=b_{0}+\frac{1}{2}\left[\left(n+\lambda_{0}\right) \mathbb{E}_{q_{\mu}}\left[\mu^{2}\right]-2\left(n \bar{x}+\lambda_{0} \mu_{0}\right) \mathbb{E}_{q_{\mu}}[\mu]+\sum_{i=1}^{n}\left(x_{i}\right)^{2}+\lambda_{0} \mu_{0}^{2}\right]\end{aligned}</script><p>因为$q_{\mu}(\mu)$事先定义好了我们可以计算$\mathbb{E}_{q_\mu}[\mu]$和$\mathbb{E}_{q_\mu}[\mu^2]$。</p><h3 id="随机梯度变分推断"><a href="#随机梯度变分推断" class="headerlink" title="随机梯度变分推断"></a>随机梯度变分推断</h3><p>上面提到的基于平均场的变分推断实际上是坐标上升法，其存在一些问题：</p><ul><li>假设太强，对复杂模型也许假设不好甚至不成立。</li><li>即使假设是成立的，但是因为其递推式包含很多积分，也可能无法计算。</li></ul><p>下面我们采用随机梯度上升的方法来求解变分推断问题：</p><p>我们知道目标函数：</p><script type="math/tex; mode=display">\hat{q} = \arg\min _q\mathbb{KL}(q\| p) = \arg\max_q\mathcal{L}(q)</script><p>其中$q$是$z$的函数，设其参数为$\phi$，我们将其记为$q_{\phi}(z)$，那么我们的目标函数变为：</p><script type="math/tex; mode=display">\hat{q} = \arg\max_{\phi}\mathcal{L}(\phi)</script><p>其中</p><script type="math/tex; mode=display">\mathcal{L}(\phi) = \mathbb{E}_{q_\phi}[\log P]</script><p>因为是随机梯度下降，所以我们每次选取一个样本，假设选取的样本为$x_i$，那么目标函数变为：</p><script type="math/tex; mode=display">\mathcal{L}(\phi) = \mathbb{E}_{q_\phi}[\log P(x_i,z) - \log q_{\phi}(z)]</script><p>对其进行求导，得：</p><script type="math/tex; mode=display">\begin{aligned}\nabla_{\phi} \mathcal{L}(\phi) &=\nabla_{\phi} \mathbb{E}_{q_{\phi}}\left[\log P\left(x_i, z\right)-\log q_{\phi}\right] \\&=\nabla_{\phi} \int q_{\phi}\left[\log P\left(x_i, z\right)-\log q_{\phi}\right] d z \\&=\int \nabla_{\phi}\left(q_{\phi}\left[\log P\left(x_i, z\right)-\log q_{\phi}\right]\right) d z \\&=\underbrace{\int \nabla_{\phi} q_{\phi} \cdot\left[\log P\left(x_i, z\right)-\log q_{\phi}\right] d z}_{\text{Part1}}+\underbrace{\int q_{\phi} \cdot \nabla_{\phi}\left[\log P\left(x_i, z\right)-\log q_{\phi}\right] d z}_{\text{Part2}}\end{aligned}</script><p>我们首先看Part2：</p><script type="math/tex; mode=display">\begin{aligned}\text { Part2 } &=\int q_{\phi} \cdot \nabla_{\phi}\left[\log P\left(x_i, z\right)-\log q_{\phi}\right] d z \\&=\int q_{\phi} \cdot\left(-\nabla_{\phi} \log q_{\phi}\right) d z \\&=\int q_{\phi} \cdot\left(-\frac{1}{q_{\phi}} \nabla_{\phi} q_{\phi}\right) d z \\&=-\int \nabla_{\phi} q_{\phi} d z \\&=-\nabla_{\phi} \int q_{\phi} d z \\&=-\nabla_{\phi} 1 \\&=0\end{aligned}</script><p>所以</p><script type="math/tex; mode=display">\nabla_\phi\mathcal{L}(\phi) = \int\nabla_\phi q_\phi\cdot[\log P(x_i,z)-\log q_\phi]dz</script><p>如果能写成期望的形式，我们就可以采用蒙特卡洛的方法对其进行采样，因此进行一个小的变换：$\nabla_\phi q_\phi = \nabla(\log q_\phi)q_\phi$，得到</p><script type="math/tex; mode=display">\begin{aligned}\nabla_\phi\mathcal{L}(\phi) &= \int \nabla_\phi(\log q_\phi)\cdot q_\phi\cdot[\log P(x_i,z)-\log q_\phi]dz\\&= \mathbb{E}_{q_\phi}[\nabla_\phi(\log q_\phi)\cdot (\log P(x_i,z)-\log q_\phi)]\end{aligned}</script><p>这样就可以采用蒙特卡洛的方式进行采样后求解期望：</p><p>从$q_{\phi}(z)$中采样$z$，$z_l \sim q_{\phi}(z),l=1,2,\cdots,L$，因此：</p><script type="math/tex; mode=display">\nabla_\phi\mathcal{L}(\phi)\approx \frac{1}{L}\sum_{l=1}^L\nabla_\phi\log q_{\phi}(z_l)(\log P(x_i,z_l)-\log q_\phi(z_l))</script><p>但是存在一个问题，因为$q_{\phi}(z)$为概率密度函数，所以其值位于$[0,1]$，在$[0,1]$内对数函数的变化非常大，这就导致其方差较大，导致此方法很可能无法使用。</p><p>因此我们采用了重参数化技巧，假定$z = g_\phi(\epsilon,x_i),\epsilon\sim P(\epsilon)$，其中$g_\phi$为参数变换的函数，相当于$z$把随机性转移到了$\epsilon$上，根据随机变量变换的性质：</p><script type="math/tex; mode=display">|q_\phi(z)dz| = |P(\epsilon)d\epsilon|</script><blockquote><p>即：</p><script type="math/tex; mode=display">\frac{q_\phi(z)}{P(\epsilon)} = \left|\frac{dz}{d\epsilon}\right|</script></blockquote><p>将上述变换代入梯度，得：</p><script type="math/tex; mode=display">\begin{aligned}\nabla_{\phi} \mathcal{L}(\phi) &=\nabla_{\phi} \int\left[\log P\left(x_i, z\right)-\log q_{\phi}\right] q_{\phi} d z \\&=\nabla_{\phi} \int\left[\log P\left(x_i, z\right)-\log q_{\phi}\right] \cdot P(\epsilon) d \epsilon \\&=\nabla_{\phi} \mathbb{E}_{P(\epsilon)}\left[\log P\left(x_i, z\right)-\log q_{\phi}\right]\end{aligned}</script><p>因为$P(\epsilon)$与$\phi$的梯度无关，因此可以将其放在期望内部：</p><script type="math/tex; mode=display">\begin{aligned}\nabla_{\phi} \mathcal{L}(\phi) &=E_{P(\epsilon)}\left[\nabla_{\phi}\left(\log P\left(x_i, z\right)-\log q_{\phi}\right)\right] \\&=E_{P(\epsilon)}\left[\nabla_{z}\left(\log P\left(x_i, z\right)-\log q_{\phi}(z)\right) \nabla_{\phi} z\right] \\&=E_{P(\epsilon)}\left[\nabla_{z}\left(\log P\left(x_i, z\right)-\log q_{\phi}(z)\right) \nabla_{\phi} g_{\phi}\left(\epsilon, x_i\right)\right]\end{aligned}</script><p>这样就可以再次采用蒙特卡洛的方法：</p><script type="math/tex; mode=display">\begin{aligned}&\epsilon_l \sim P(\epsilon), \quad l=1,2, \cdots, L \\&\nabla_{\phi} \mathcal{L}(\phi) \approx \frac{1}{L} \sum_{l=1}^{L}\left[\nabla_{z}\left(\log P\left(x_i, z\right)-\log q_{\phi}(z)\right) \nabla_{\phi} g_{\phi}\left(\epsilon_l, x_i\right)\right]\end{aligned}</script><h3 id="Variational-Bayes-with-message-passing"><a href="#Variational-Bayes-with-message-passing" class="headerlink" title="Variational Bayes with message passing"></a>Variational Bayes with message passing</h3><p>上述的手动推导的方式有些繁琐，但是现在的变分信息传递算法(variational message passing(VMP))可以自动对共轭指数分布族进行推导。对于非共轭指数网络，如果需要以牺牲精度为代价快速逼近，VMP 可能仍然有用。</p><p>对于指数族分布，其形式为：</p><script type="math/tex; mode=display">P(x\mid \eta) = h(x)\exp\left(\eta^T\phi(x)-A(\eta)\right)</script><p>其中$\eta$为参数，$\phi(x)$为充分统计量。</p><p>关于指数族分布的标准理论证明了指数分布的充分统计量的性质为：</p><script type="math/tex; mode=display">\langle \phi(x)\rangle = \nabla_{\eta}A(\eta)\mid_\eta</script><p>即充分统计量的期望为$A(\eta)$函数对$\eta$的导数。</p><p>我们用$\text{pa}(z_i)$表示$z_i$的父结点，$\text{ch}(z_i)$表示其子结点，$\text{cop}(z_i;\text{ch})$表示与$x_i$共同子结点为$\text{ch}$父结点的集合；$\text{cop}(z_i)$表示与$z_i$有共同子结点的父结点。我们的更新公式为：</p><script type="math/tex; mode=display">\ln q_i(z_i) = \langle\ln P(z_i,\text{mb}(z_i)),D\rangle_{q(\text{mb}(z_i))}</script><p>其中$\langle\rangle_{q(\text{mb}(z_i))}$相当于对$q(\text{mb}(z_i))$求期望，而$\text{mb}$表示马尔可夫毯。</p><blockquote><p>马尔可夫毯：在随机变量的全集$U$中，对于给定的变量$\mathrm{X}\in \mathrm{U}$和变量集$\mathrm{MB}\subset \mathrm{U}$，若有：</p><script type="math/tex; mode=display">\mathrm{X}\perp \{\mathrm{U-MB-\{X\}}\mid\mathrm{MB}\}</script><p>则称能满足上述条件的最小变量集$\mathrm{MB}$为$\mathrm{X}$的马尔可夫毯。</p></blockquote><p>则可以写为：</p><script type="math/tex; mode=display">=\langle\ln P(\text{pa}(z_i))+\ln P(\text{cop}(z_i))+\ln P(z_i\mid\text{pa}(z_i))+\ln P(\text{ch}(z_i)\mid z_i,\text{cop}(z_i))\rangle_{q(\text{mb}(z_i))}</script><p>去除和$z_i$无关的常数项：</p><script type="math/tex; mode=display">=\langle \ln P(z_i\mid \text{pa}(z_i))\rangle_{q(\text{pa}(z_i))} +\langle\ln P(\text{ch}(z_i)\mid z_i,\text{cop}(z_i))\rangle_{q(\text{ch}(z_i),\text{cop}(z_i))}</script><p>将子结点拆开得：</p><script type="math/tex; mode=display">=\langle \ln P(z_i\mid \text{pa}(z_i))\rangle_{q(\text{pa}(z_i))} +\sum_{\text{ch}\in\text{ch}(z_i)}\langle\ln P(\text{ch}\mid z_i,\text{cop}(z_i))\rangle_{q(\text{ch},\text{cop}(z_i))}</script><p>我们将会将这两部分分开考虑</p><h4 id="Messages-from-parents"><a href="#Messages-from-parents" class="headerlink" title="Messages from parents"></a>Messages from parents</h4><p>共轭指数节点$z_i$由自然参数向量$\phi_i$参数化。通过这些节点的定义：</p><script type="math/tex; mode=display">\begin{aligned}\langle\ln P(z_i\mid \text{pa}(z_i))_{q(\text{pa}(z_i))} &= \langle \phi_i\mu(z_i) + f_i(z_i)+g_i(\phi_i)\rangle_{q(\text{pa}(z_i))}\\&=\langle\phi_i\rangle_{q(\text{pa}(z_i))}\mu_i(z_i)+f_i(z_i)+\langle g(\phi_i)\rangle_{q(\text{pa}(z_i))}\end{aligned}</script><p>由于$\phi$和$g$是父节点充分统计量的多线性函数（通过构造），并且使用平均场假设，我们可以简单地采用它们的公式（定义为以父节点的单个值为条件）并将期望替换为充分统计，根据需要得到整个表达式的期望值。因此$z_i$的父结点只需要将它们的充分统计期望作为信息传递给$z_i$。</p><h4 id="Messages-to-parents"><a href="#Messages-to-parents" class="headerlink" title="Messages to parents"></a>Messages to parents</h4><p>指数族的一个关键性质是我们可以通过将其自然参数相加来得到相似分布的乘积：</p><script type="math/tex; mode=display">\begin{aligned}&\exp\left[\phi_1\mu(z_i)+f(z_i)+g(\phi_1)\right]\cdot\exp\left[\phi_2\mu(z_i)+f(z_i)+g(\phi_2)\right]\\&= \exp\left[(\phi_1+\phi_2)\mu(z_i)+f(z_i)+g(\phi_1+\phi_2)\right]\end{aligned}</script><p>第二个性质是关于共轭，$\phi$和$g$在父结点的充分统计量中也是多线性的。因此我们总是可以通过找到函数$\phi_{ij},f_j,g_{ij}$来重新组合公式是其像是一个父结点$z_j\in\text{pa}(z_i)$的函数：</p><script type="math/tex; mode=display">\left\langle\ln P\left(z_{i} \mid \text{pa}\left(z_{i}\right)\right)\right\rangle_{q\left(\text{pa}\left(z_{i}\right)\right)}=\left\langle\phi_{i j} u_{j}\left(z_{j}\right)+f_{i j}\left(z_{j}\right)+g_{i j}\left(\phi_{i j}\right)\right\rangle_{q\left(\text{pa}\left(z_{i}\right)\right)}</script><p>和以前一样，我们可以通过使用多线性属性来处理期望，以将所有期望推到充分统计量附近。因此，从父结点的角度来看，这是根据其子结点和共同父结点的充分统计期望来写的。因此，我们可以传递一个似然信息，包括：</p><script type="math/tex; mode=display">\phi_{ij}\left(\langle\mu(z_i)\rangle,\{\langle\mu(\text{cop})\rangle\}_{\text{cop}\in\text{cop}(z_j;z_i)}\right)</script><p>然后，父结点可以通过第一个属性将这些简单地添加到其先前的参数中。</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><p><img src="https://raw.githubusercontent.com/HFC666/image/master/img/VBI1.jpg" alt=""></p><p>则：</p><script type="math/tex; mode=display">\ln P(\mu\mid m,\beta) = \begin{bmatrix}m\beta&-\beta/2\end{bmatrix}\cdot \begin{bmatrix}\mu\\\mu^2\end{bmatrix} - \frac{1}{2}(-\ln \beta + \beta m^2+\ln2\pi)</script><p>其中$\phi(x) = \begin{bmatrix}\mu\\\mu^2\end{bmatrix}, \eta^T = \begin{bmatrix}m\beta&amp;-\beta/2\end{bmatrix},A(\eta) = \frac{1}{2}(-\ln \beta + \beta m^2+\ln2\pi)$。</p><p>所以很容易得到充分统计量的期望为：</p><script type="math/tex; mode=display">\left\langle \begin{bmatrix}\mu\\\mu^2\end{bmatrix}\right\rangle = \nabla A(\eta) = \begin{bmatrix}\mu\\\mu^2+\beta^{-1}\end{bmatrix}</script>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Variational-Bayesian-inference&quot;&gt;&lt;a href=&quot;#Variational-Bayesian-inference&quot; class=&quot;headerlink&quot; title=&quot;Variational Bayesian inference&quot;&gt;&lt;/a&gt;Variational Bayesian inference&lt;/h2&gt;&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://img0.baidu.com/it/u=2387178916,3720682298&amp;fm=253&amp;fmt=auto?w=1280&amp;h=720&quot; style=&quot;zoom: 100%;&quot; /&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;参考文献&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/roboticcam/machine-learning-notes/blob/master/files/variational.pdf&quot;&gt;徐亦达老师变分推断课件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://link.springer.com/article/10.1007/s10462-011-9236-8&quot;&gt;A tutorial on variational Bayesian inference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1QW411y7D3?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=6177c61c946280bb88c727585de76bc8&quot;&gt;白板推导指数族分布&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1DW41167vr?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=6177c61c946280bb88c727585de76bc8&quot;&gt;白板推导变分推断&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="文献阅读" scheme="https://www.hfcouc.work/categories/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="贝叶斯" scheme="https://www.hfcouc.work/tags/%E8%B4%9D%E5%8F%B6%E6%96%AF/"/>
    
    <category term="算法" scheme="https://www.hfcouc.work/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>指数分布族</title>
    <link href="https://www.hfcouc.work/2022/07/10/EXP/"/>
    <id>https://www.hfcouc.work/2022/07/10/EXP/</id>
    <published>2022-07-10T12:03:45.000Z</published>
    <updated>2022-07-10T12:08:25.180Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Exponential-Family-Distribution"><a href="#Exponential-Family-Distribution" class="headerlink" title="Exponential Family Distribution"></a>Exponential Family Distribution</h2><p><img src="https://raw.githubusercontent.com/HFC666/image/master/img/EX1.png" alt=""></p><blockquote><p>课程地址：<a href="https://www.bilibili.com/video/BV1QW411y7D3?spm_id_from=333.337.search-card.all.click&amp;vd_source=6177c61c946280bb88c727585de76bc8">https://www.bilibili.com/video/BV1QW411y7D3?spm_id_from=333.337.search-card.all.click&amp;vd_source=6177c61c946280bb88c727585de76bc8</a></p></blockquote><span id="more"></span><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>指数分布族是可以写为如下形式的分布：</p><script type="math/tex; mode=display">P(x\mid \eta) = h(x)\exp\left(\eta^T\phi(x)-A(\eta)\right)</script><p>其中$\eta$为参数向量，$x\in \mathbb{R}^p$，$A(\eta)$为对数配分函数(log partition function)。</p><p>下面我们解释一下<strong>配分函数</strong>，配分函数可以理解为<strong>归一化因子</strong>，例如我们在无向图模型中经常用到的：</p><script type="math/tex; mode=display">P(X\mid \theta) = \frac{1}{Z}\hat{P}(X\mid \theta)</script><p>其中$\hat{P}(X\mid \theta)$是我们构造出来的分布，但是概率分布必须满足和为$1$，所以我们在前面添加归一化因子使得：</p><script type="math/tex; mode=display">Z = \int_x \hat{P}(x\mid \theta)dx</script><p>可以看出$Z$与$X$无关，那为什么$A(\eta)$称为对数配分函数呢？这是因为：</p><script type="math/tex; mode=display">\begin{aligned}P(x\mid \eta) &= h(x)\exp\left(\eta^T\phi(x)-A(\eta)\right)\\&= \frac{1}{\exp(A(\eta))}h(x)\exp(\eta^T\phi(x))\end{aligned}</script><p>所以$Z = \exp(A(\eta))\Rightarrow A(\eta)=\ln Z$，所以其被称为对数配分函数。</p><p>其中$\phi(x)$为<strong>充分统计量</strong>。充分统计量指的是能够包含样本中所有信息的统计量。</p><p>如对于数据$x_1,\cdots,x_N$，我们假设其服从于高斯分布，那么其充分统计量就为：</p><script type="math/tex; mode=display">\phi(x) = \begin{bmatrix}\sum_{i=1}^Nx_i\\\sum_{i=1}^Nx_i^2\end{bmatrix}</script><p>因为有了这两个统计量我们就可以求出其<strong>均值</strong>和<strong>方差</strong>。</p><p>在贝叶斯推断中我们常常遇到这样的问题：</p><script type="math/tex; mode=display">P(Z\mid X) = \frac{P(X\mid Z)P(Z)}{\int_ZP(X\mid Z)P(Z)dZ}</script><p>有时候积分很难算出，即使积分算出了，$P(Z\mid X)$的形式可能很复杂，我们无法求解其期望和方差，这时候我们可以采用采样的方法(MCMC)或者通过变分推断来寻找接近$P(Z\mid X)$的概率分布$Q(X)$。</p><p>但是指数族分布可以采用共轭的性质。</p><p>指数族分布与广义线性模型，广义线性模型的重要组成部分为：</p><ol><li>线性组合，如$w^Tx$</li><li>link function：为激活函数的逆函数</li><li>指数族分布：$y\mid x\sim$指数族分布</li></ol><p>概率图模型中非常重要的一组模型为无向图RBF，与指数族分布具有非常重要的关系。</p><p>另外当分布为指数族分布时，变分推断可见极大地简化。</p><h3 id="高斯分布的指数族形式"><a href="#高斯分布的指数族形式" class="headerlink" title="高斯分布的指数族形式"></a>高斯分布的指数族形式</h3><p>高斯分布的形式为：</p><script type="math/tex; mode=display">\begin{aligned}P(x\mid\theta) &= \frac{1}{\sqrt{2\pi\sigma^2}}\exp\left(-\frac{1}{2\sigma^2}(x-\mu)^2\right)\quad \theta = (\mu,\sigma^2)\\&=\frac{1}{\sqrt{2\pi\sigma^2}}\exp\left(-\frac{1}{2\sigma^2}(x^2-2\mu x+\mu^2)\right)\\&=\exp\left(\log(2\pi\sigma^2)^{-\frac{1}{2}}\right)\exp\left(-\frac{1}{2\sigma^2}\begin{pmatrix}-2\mu&1\end{pmatrix}\begin{pmatrix}x\\x^2\end{pmatrix}-\frac{\mu^2}{2\sigma^2}\right)\\&=\exp\left(\underbrace{\begin{pmatrix}\frac{\mu}{\sigma^2}&-\frac{1}{2\sigma^2}\end{pmatrix}}_{\eta^T}\cdot\underbrace{\begin{pmatrix}x\\x^2\end{pmatrix}}_{\phi(x)}-\underbrace{\left(\frac{\mu^2}{2\sigma^2}+\frac{1}{2}\log2\pi\sigma^2\right)}_{A(\eta)}\right)\end{aligned}</script><p>其中我们令$\eta_1=\frac{\mu}{\sigma^2},\eta_2=-\frac{1}{2\sigma^2}$。则$\sigma^2=-\frac{1}{2\eta_2},\mu=-\frac{\eta_1}{2\eta_2}$。代入$A(\eta)$，得：</p><script type="math/tex; mode=display">A(\eta) = -\frac{\eta_1^2}{4\eta_2}+\frac{1}{2}\log\left(-\frac{\pi}{\eta_2}\right)</script><h3 id="对数配分函数与充分统计量的关系"><a href="#对数配分函数与充分统计量的关系" class="headerlink" title="对数配分函数与充分统计量的关系"></a>对数配分函数与充分统计量的关系</h3><p>我们之前提到过：</p><script type="math/tex; mode=display">\exp(A(\eta)) = \int_x h(x)\exp(\eta^T\phi(x))dx</script><p>两边同时对$\eta$求导，得：</p><script type="math/tex; mode=display">\begin{aligned}\exp(A(\eta))\cdot A^\prime(\eta) &= \frac{\partial}{\partial \eta}(\int h(x)\exp(\eta^T\phi(x))dx)\\&= \int_xh(x)\exp(\eta^T\phi(x))\phi(x)dx\end{aligned}</script><p>两边同除以$A^\prime(\eta)$，得</p><script type="math/tex; mode=display">\begin{aligned}A^\prime(\eta) &= \frac{\int_xh(x)\exp(\eta^T\phi(x))\phi(x)dx}{\exp(A(\eta))}\\&=\int_x \underbrace{h(x)\exp(\eta^T\phi(x)-A(\eta))}_{P(x\mid\eta)}\phi(x)dx\\&= \mathbb{E}_{P(x\mid\eta)}[\phi(x)]\end{aligned}</script><p>所以$A^\prime(\eta) = \mathbb{E}_{P(x\mid \eta)}[\phi(x)]$。</p><p>同样地，我们也可以研究一下二阶导，对式子</p><script type="math/tex; mode=display">A^\prime(\eta) =\int_x \underbrace{h(x)\exp(\eta^T\phi(x)-A(\eta))}_{P(x\mid\eta)}\phi(x)dx</script><p>两边同时求导得：</p><script type="math/tex; mode=display">\begin{aligned}A^{\prime\prime}(\eta) &= \int_x \underbrace{h(x)\exp(\eta^T\phi(x)-A(\eta))}_{P(x\mid\eta)}(\phi(x)-A^{\prime}(\eta))\phi(x)dx\\&= \int_xP(x\mid\eta)(\phi(x)-\mathbb{E}_{P(x\mid\eta)}[\phi(x)])\phi(x)dx\\&= \int_x P(x\mid \eta)\phi(x)^2dx - \mathbb{E}_{P(x\mid\eta)}[\phi(x)])\int_xP(x\mid \eta)\phi(x)dx\\&= \mathbb{E}_{P(x\mid\eta)}[\phi(x)^2] - \left(\mathbb{E}_{P(x\mid \eta)}[\phi(x)]\right)^2\\&=\operatorname{Var}[\phi(x)]\end{aligned}</script><h3 id="极大似然估计与充分统计量"><a href="#极大似然估计与充分统计量" class="headerlink" title="极大似然估计与充分统计量"></a>极大似然估计与充分统计量</h3><p>假设我们的数据为：$D=\{x_1,x_2,\cdots,x_N\}$，所以我们有：</p><script type="math/tex; mode=display">\begin{aligned}\eta_{\text{mle}} &= \arg\max\log P(D\mid \eta)\\&=\arg\max \log\prod_{i=1}^N P(x_i\mid \eta)\\&=\arg\max \sum_{i=1}^N\log P(x_i\mid \eta)\\&=\arg\max\sum_{i=1}^N\log\left[h(x_i)\exp(\eta^T\phi(x_i)-A(\eta))\right]\\&= \arg\max\sum_{i=1}^N\left[\log h(x_i)+\eta^T\phi(x_i)-A(\eta)\right]\\&= \arg\max\sum_{i=1}^N(\eta^T\phi(x_i)-A(\eta))\end{aligned}</script><p>我们对其求导，得：</p><script type="math/tex; mode=display">\begin{aligned}\frac{\partial}{\partial \eta}\left(\sum_{i=1}^N\eta^T\phi(x_i)-A(\eta)\right)&=\sum_{i=1}^N\frac{\partial}{\partial \eta}(\eta^T\phi(x_i)-A(\eta))\\&=\sum_{i=1}^N\phi(x_i)-A^{\prime}(\eta)\\&=\sum_{i=1}^N\phi(x_i)-NA^{\prime}(\eta)\end{aligned}</script><p>令导数等于$0$，得</p><script type="math/tex; mode=display">A^{\prime}(\eta_{\text{mle}}) = \frac{1}{N}\sum_{i=1}^N\phi(x_i)</script><p>这样我们就可以求出$\eta_{\text{mle}}$，可以看出$\eta_{\text{mle}}$仅与$\phi(x)$有关，即确定了$\phi(x)$即确定了$\eta_{\text{mle}}$，即确定了分布，更加验证了$\phi(x)$充分统计量的结论。</p><h3 id="最大熵角度"><a href="#最大熵角度" class="headerlink" title="最大熵角度"></a>最大熵角度</h3><p>假设一个事件发生的概率为$p$，其信息量为$-\log p$。熵的概念就是信息量关于分布本身的期望：</p><script type="math/tex; mode=display">\begin{aligned}\mathbb{E}_{p(x)}[-\log p] &= -\int_x p(x)\log p(x)dx\\&= -\sum_x p(x)\log p(x)\end{aligned}</script><p>最大熵的思想通俗来说就是等可能的，当我们对一个事件一无所知时，我们一般假设其是等可能的。下面看一个例子：</p><p>我们用$H[P]$来表示熵：</p><script type="math/tex; mode=display">H[p] = -\sum_x p(x)\log p(x)</script><p>我们假设$x$是离散的，$x$可以取值的个数为$K$，概率分别对应于$p_1,\cdots,p_K$，并且$\sum_{i=1}^K p_i=1$。所以其熵为：</p><script type="math/tex; mode=display">H[p] = -\sum_{i=1}^K p_i\log (p_i)</script><p>我们令其最大，即变为了优化问题：</p><script type="math/tex; mode=display">\begin{aligned}&\min \sum_{i=1}^K p_i\log p_i\\&\text{s.t. }\sum_{i=1}^K p_i=1\end{aligned}</script><p>我们可以直接用拉格朗日乘子法进行求解，定义：</p><script type="math/tex; mode=display">\mathcal{L}(p,\lambda) = \sum_{i=1}^K p_i\log(p_i)+\lambda(1-\sum_{i=1}^Kp_i)</script><p>对$p_i$求导，得：</p><script type="math/tex; mode=display">\frac{\partial \mathcal{L}(p,\lambda)}{\partial p_i} = \log(p_i)+p_i\cdot\frac{1}{p_i}-\lambda</script><p>所以：</p><script type="math/tex; mode=display">p_i = \exp(\lambda-1)</script><p>对于每个$p_i$都是如此，所以$p_1=p_2=\cdots=p_K=\frac{1}{K}$，所以其为等可能的。</p><p>最大熵原理：在满足既定事实的前提下，具有最大熵的分布即为我们想要的分布。在机器学习中，我们的既定事实即为数据，假设我们的数据为$D=\{x_1,\cdots,x_N\}$。</p><p>在这里我们引入经验分布的概念，其是对已知样本的描述，其定义为：</p><script type="math/tex; mode=display">\hat{p}(X=x) = \frac{\text{count}(x)}{N}</script><p>因为分布$\hat{p}$我们已经求出来了，所以对于$x$的任意函数$f(x)$向量，我们也能求其期望：</p><script type="math/tex; mode=display">\mathbb{E}_{\hat{p}}[f(x)] = \Delta(\text{已知})</script><p>这个就是我们的<strong>已知约束</strong>。</p><p>下面我们求满足上述约束的最大熵的分布，这就变成了优化问题：</p><script type="math/tex; mode=display">\begin{aligned}&\min \sum_x p(x)\log p(x)\\&\text{s.t. } \sum_x p(x)=1\\&\quad\quad \mathbb{E}_{\hat{p}} [f(x) ]= \mathbb{E}_p[f(x)] = \Delta\end{aligned}</script><p>定义拉格朗日乘子：</p><script type="math/tex; mode=display">\mathcal{L}(p,\lambda_0,\lambda) = \sum_x p(x)\log p(x) + \lambda_0(1-\sum_x p(x))+\lambda^T(\Delta-\mathbb{E}_p[f(x)])</script><p>对$p(x)$求导得：</p><script type="math/tex; mode=display">\frac{\mathcal{L}}{\partial p(x)} =(\log p(x)+1)-\lambda_0-\lambda^T f(x)</script><p>令其等于$0$，得</p><script type="math/tex; mode=display">\log p(x) = \lambda^T f(x) + \lambda_0-1</script><p>所以</p><script type="math/tex; mode=display">p(x) = \exp\left(\lambda^T f(x) - (1-\lambda_0)\right)</script><p>为指数族分布。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Exponential-Family-Distribution&quot;&gt;&lt;a href=&quot;#Exponential-Family-Distribution&quot; class=&quot;headerlink&quot; title=&quot;Exponential Family Distribution&quot;&gt;&lt;/a&gt;Exponential Family Distribution&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/HFC666/image/master/img/EX1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;课程地址：&lt;a href=&quot;https://www.bilibili.com/video/BV1QW411y7D3?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=6177c61c946280bb88c727585de76bc8&quot;&gt;https://www.bilibili.com/video/BV1QW411y7D3?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=6177c61c946280bb88c727585de76bc8&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="课程笔记" scheme="https://www.hfcouc.work/categories/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="概率论" scheme="https://www.hfcouc.work/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>狄利克雷过程</title>
    <link href="https://www.hfcouc.work/2022/07/06/BNP/"/>
    <id>https://www.hfcouc.work/2022/07/06/BNP/</id>
    <published>2022-07-06T02:17:50.000Z</published>
    <updated>2022-07-12T02:44:47.041Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p align="center">    <img src="https://img2.baidu.com/it/u=2682475456,642314187&fm=253&fmt=auto&app=138&f=JPEG?w=799&h=500" style="zoom: 100%;" /></p><blockquote><p>参看文献：</p><ol><li><a href="https://www.bilibili.com/video/BV1Tp411R7Sf?spm_id_from=333.337.search-card.all.click&amp;vd_source=6177c61c946280bb88c727585de76bc8">徐亦达老师课程</a></li><li><a href="http://hil.t.u-tokyo.ac.jp/~kameoka/SAP/papers/Teh2010a.pdf">狄利克雷过程文献</a></li><li><a href="https://www.sciencedirect.com/science/article/abs/pii/S002224961100071X">A Tutorial on Bayesian Nonparametric Models</a></li></ol></blockquote><span id="more"></span><h2 id="狄利克雷过程"><a href="#狄利克雷过程" class="headerlink" title="狄利克雷过程"></a>狄利克雷过程</h2><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>考虑下列问题，假设我们用高斯混合模型来做聚类。假设我们的数据为$x_1,x_2,\cdots,x_N$，那我们的似然函数的对数为：</p><script type="math/tex; mode=display">\sum_{i=1}^N\log\sum_{l=1}^K\alpha_i\mathcal{N}(\mu_i,\sigma_i^2)</script><p>但是我们需要事先确定聚类的个数，但是在很多情况下聚类的个数并不是那么容易确定，我们需要从数据中学习到聚类的个数。一个方法是我们将聚类的数目$K$也作为一个参数，那么我们的参数$\theta = (K,\theta_1,\sigma_1,\cdots,\theta_K,\sigma_K)$。我们的优化问题变为：</p><script type="math/tex; mode=display">\hat{\theta} = \arg\max_{\theta}\sum_{i=1}^N\log\sum_{l=1}^K\alpha_i\mathcal{N}(\mu_i,\sigma_i^2)</script><p>但是我们很容易发现当$K=N$，$\mu_i$为数据的值，$\sigma_i=0$的时候似然函数达到最大，即每一个数据都是一个类，这不是我们想要的。<br>我们的一个方法是假设每个数据$x_i$都来自于参数为$\theta_i$的一个分布，而$\theta_i\sim H(\theta)$，其中分布$H(\theta)$为连续分布，但是这样会参在新的问题：因为$H(\theta)$为连续分布，所以$P(\theta_i=\theta_j)=0,i\neq j$。所以这样每个数据来自的分布都不一样，又回到了之前提到的$K=N$的问题了。所以我们令$\theta$来自一个离散分布$G(\theta)$，而$G\sim \text{DP}(\alpha,H)$，其中DP表示狄利克雷过程，而$H$为之前的连续分布，$\alpha&gt;0$为常数，其反映$G$的离散程度，越大表示离散程度越小，当$\alpha\rightarrow0$时，$G$离散程度最大，为一个点；当$\alpha\rightarrow \infty$时，$G\approx H$。</p><blockquote><p>$H$也不一定是连续的，其被称为base measure。</p></blockquote><p>注意这里的$G$为一个random measure，我们每次从$\text{DP}(\alpha,H)$中采样得到的不是一个数值，而是一个分布。假设我们采集到的分布为：</p><p><img src="https://raw.githubusercontent.com/HFC666/image/master/img/DP1.png" alt=""></p><blockquote><p>其中$G_1,G_2$为两次采样产生的分布，上面的棍子表示概率密度，其和为$1$。我们将其分为$a_1,a_2,\cdots,a_d$等$d$个区域，其中每个区域的总概率密度符合狄利克雷分布，即</p><script type="math/tex; mode=display">(G(a_1),G(a_2),\cdots,G(a_d))\sim \text{Dir}(\alpha H(a_1),\alpha H(a_2),\cdots,\alpha H(a_d))</script><p>这就是狄利克雷过程的定义。</p></blockquote><p>关于狄利克雷分布：</p><script type="math/tex; mode=display">P(x_1,\cdots,x_i,\cdots,x_K)\sim \text{Dir}(\alpha_1,\cdots,\alpha_i,\cdots,\alpha_K)</script><p>则</p><script type="math/tex; mode=display">\begin{aligned}\mathbb{E}[x_i]  &= \frac{\alpha_i}{\sum_k \alpha_k}\\\text{Var}[x_i]&=\frac{\alpha_i(\sum_k\alpha_k-\alpha_i)}{(\sum_k\alpha_k)^2(\sum_{k}\alpha_k+1)}\end{aligned}</script><p>将其带入到狄利克雷过程中，得：</p><script type="math/tex; mode=display">\mathbb{E}[G[a_i]] = \frac{\alpha H(a_i)}{\sum_k\alpha H(a_k)} = H(a_i)</script><script type="math/tex; mode=display">\text{var}[G[a_i]] = \frac{\alpha H(a_i)(\alpha-\alpha H(a_i))}{\alpha^2(\alpha+1)} = \frac{H(a_i)(1-H(a_i))}{\alpha+1}</script><p>我们之前说过关于$\alpha$的性质。现在我们来看一下，均值(期望)与$\alpha$无关，当$\alpha\rightarrow \infty$是，方差趋近于$0$，这说明不管我们怎么划分，在每个$a_i$处，$G(a_i)=H(a_i)$，说明$G(x)=H(x)$，即$G(x)$是连续的是最不离散的版本；如果$\alpha=0$，则$\text{Var}=H(a_i)(1-H(a_i))$，这正是伯努利分布的方差，因此在每个划分上我们都可以用一根棍来表示它们(包括不划分)，这是最离散的版本。</p><h3 id="Construction"><a href="#Construction" class="headerlink" title="Construction"></a>Construction</h3><p>那我们如何构建$G$呢？即如何从$H$中采样得到$G$呢？我们采用<code>stick-breaking construction</code>的方法来产生$G$。其构建方式为：</p><ol><li>从$H$中采样得到$\theta_1$，即$\theta_1\sim H$</li><li>采样$\beta_1\sim\text{Beta}(1,\alpha)$</li><li>权重$\pi_1=\beta_1$</li><li>采样$\theta_2\sim H$</li><li>采样$\beta_2\sim \text{Beta}(1,\alpha)$</li><li>权重$\pi_2 = (1-\pi)\beta_2$<br>以此类推，这样权重$\pi_2$相当于是从取完$\pi_1$剩下的权重中取得。</li></ol><p>我们在看一下关于$\alpha$得一些内容，当$\alpha=0$时，$\mathbb{E}(\beta_i)=1,\text{Var}(\beta_i)=0$，所以一次就把权重全部采完，即只产生一个样本，对应于最离散的情况，而当$\alpha=\infty$时，$\mathbb{E}(\beta_i)=0$，相当于连续分布的情况。我们常将此采样方法写为$\pi \sim \text{GEM}(\alpha)$。</p><h3 id="Property"><a href="#Property" class="headerlink" title="Property"></a>Property</h3><p>下面我们再回顾一下。对于狄利克雷过程，有如下性质：</p><script type="math/tex; mode=display">G\sim \text{DP}(\alpha,H)\Leftrightarrow (G(a_1),\cdots,G(a_n))\sim \text{DIR}(\alpha H(a_1),\cdots,\alpha H(a_n)),\quad \text{for any partitions }a_1,\cdots,a_n</script><p>总结之前讲过的，我们有：</p><script type="math/tex; mode=display">G\sim \text{DP}(\alpha,H)</script><script type="math/tex; mode=display">\theta_1,\cdots,\theta_N\sim G</script><script type="math/tex; mode=display">X_i\sim F(\theta_i)</script><p>其图模型为：</p><p><img src="https://raw.githubusercontent.com/HFC666/image/master/img/DP2.png" alt=""></p><p>下面我们研究一下$G$的后验分布$P(G\mid \theta_1,\cdots,\theta_N)$：</p><script type="math/tex; mode=display">P(G\mid \theta_1,\cdots,\theta_N)\propto P(\theta_1,\cdots,\theta_N\mid G)P(G)</script><p>在研究之前我们先看一个关于狄利克雷分布和多项式分布的例子：<br>假设</p><script type="math/tex; mode=display">\begin{aligned}p_1,\cdots,p_N&\sim\text{DIR}(\alpha_1,\cdots,\alpha_N)\\n_1,\cdots,n_N&\sim\text{Mult}(p_1,\cdots,p_N)\end{aligned}</script><p>那么</p><script type="math/tex; mode=display">\begin{aligned}P(p_1,\cdots,p_N\mid n_1,\cdots,n_N)&\propto\left(\frac{\Gamma(\sum_{i=1}^N\alpha_i)}{\prod_{i=1}^N\Gamma(\alpha_i)}\prod P_i^{\alpha_i-1}\right)\left(\frac{(\sum_{i=1}^Nn_i)!}{n_1!\cdots n_N!}\prod_{i=1}^NP_i^{n_i}\right)\\&\propto \prod_{i=1}^NP_i^{\alpha_i+n_i-1}\\ &= \text{DIR}(\alpha_1+n_1,\cdots,\alpha_N+n_N)\end{aligned}</script><h3 id="Posterior"><a href="#Posterior" class="headerlink" title="Posterior"></a>Posterior</h3><p>有了前面的指示，下面我们来看一下后验分布：<br>对于任何划分</p><script type="math/tex; mode=display">\begin{aligned}P(G(a_1),\cdots,G(a_K)\mid \theta_1,\cdots,\theta_K)&\propto P(\theta_1,\cdots,\theta_K\mid G(a_1),\cdots,G(a_K))P(G)\\&=\text{Mult}(n_1,\cdots,n_K)\text{DIR}(\alpha H(a_1),\cdots,\alpha H(a_K))\\&= \text{Dir}(n_1+\alpha H(a_1),\cdots,n_K+\alpha H(a_K))\\&= \text{DP}\left(\alpha+n,\frac{\alpha H+\sum_{i=1}^K\delta_{\theta_i}}{\alpha+n}\right)\end{aligned}</script><p>其中$n=\sum_{i=1}^K n_i，G=\sum_{i=1}^\infty\pi_i\delta_{\theta_i}$。最后一步是怎么来的呢？<br>所以我们得到的后验分布为：</p><script type="math/tex; mode=display">P(G(a_1),\cdots,G(a_K))\sim \text{Dir}(n_1+\alpha H(a_1),\cdots,n_K+\alpha H(a_K))</script><p>根据之前讲过的狄利克雷过程的性质，狄利克雷过程的第一个参数是对应的狄利克雷分布的测度和，而第二个参数为归一化后的一个概率分布，理解为狄利克雷分布的参数除以归一化系数。所以第一个参数为：$\sum_{i=1}^K n_i+\alpha H(a_i) = \alpha+n$，而第二个参数为$\frac{\alpha H+\sum_{i=1}^K\delta_{\theta_i}}{\alpha+n}$，其中$\alpha+n$为归一化参数，而分子$\sum_{i=1}^N\delta_{\theta_i}(a_j)$实际上就是表示$n_j$。<br>我们再看一下得到的分布：</p><script type="math/tex; mode=display">\frac{\alpha H+\sum_{i=1}^N\delta_{\theta_i}}{\alpha+n} = \frac{\alpha}{\alpha+n}H+\frac{\sum_{i=1}^N\delta_{\theta_i}}{\alpha+n}</script><p>为一个连续的分布加上一个离散的分布，这被称为<code>spike and slab</code>。</p><h3 id="Predictive-distribution"><a href="#Predictive-distribution" class="headerlink" title="Predictive distribution"></a>Predictive distribution</h3><p>什么是预测分布呢？预测分布为：</p><script type="math/tex; mode=display">\begin{aligned}P(X_i\mid X_{-i}) &= \int_w P(X_i,w\mid X_{-i})dw\\&= \int_w P(X_i\mid w,X_{-i})P(w\mid X_{-i})dw\\&= \int_wP(X_i\mid w)P(w\mid X_{-i})dw\end{aligned}</script><p>其中$X_{-i}$表示去除第$i$项后的$X$。<br>对于狄利克雷过程，我们想要求得的为：</p><script type="math/tex; mode=display">P(\theta_i\mid \theta_{-i}) = \int_G P(\theta_i\mid G)P(G\mid \theta_{-i})dG</script><p>由此可以看出，我们的预测分布可以看作是后验分布$\theta_i$在后验分布$P(G\mid \theta_{-i})$下的期望，根据狄利克雷分布的性质，其期望为</p><script type="math/tex; mode=display">\frac{\alpha}{\alpha+n}H+\frac{\sum_{i=1}^N\delta_{\theta_i}}{\alpha+n}</script><p>所以其预测分布等于后验分布。</p><p>$\theta_1,\theta_2,\cdots$预测分布的序列被称为<code>Blackwell-MacQueen urn scheme</code>。这个名字来源于一个隐喻。特别地，在$\Theta$中的每一个值都是唯一的颜色，并且抽样$\theta\sim G$来给球上色。另外我们有一个盒子来装之前看过的球。起初在盒子里没有球，我们从$H$中取颜色，$\theta_1\sim H$，给球上色并将其放在盒子里。在之后的步骤中，如在$n+1$步中，我们要么以$\frac{\alpha}{\alpha+n}$抽取一个新颜色($\theta_{n+1}\sim H$)，给球染色并将其放到盒子中，或者以概率$\frac{n}{\alpha+n}$从盒子中取出一个球，将新球涂成它的颜色(从经验分布中抽样)并放到盒子里。</p><p><code>Blackwell-MacQueen urn scheme</code>可以被用来证明DP的存在。我们可以在序列$\theta_1,\theta_2,\cdots$上构建分布，通过迭代地在给定$\theta_1,\cdots,\theta_{i-1}$的条件下采样$\theta_i$。对于$n\ge1$令</p><script type="math/tex; mode=display">P(\theta_1,\cdots,\theta_n) = \prod_{i=1}^nP(\theta_i\mid \theta_1,\cdots,\theta_{i-1})</script><p>可以得到这个随机序列是无限可交换的。也就是说，对于每一个$n$，生成$\theta_1,\cdots,\theta_n$的概率等于以任何顺序采样得到它们的概率。</p><p>下面我们来证明一下，令$I_k$表示第$k$类的索引，$N_k$表示第$k$类的样本数，那么在第$k$类的样本的上述关于$\theta$的概率为：</p><script type="math/tex; mode=display">\frac{\alpha\cdot1\cdot2\cdots(N_k-1)}{(I_{k,1}-1+\alpha)(I_{k,2}-1+\alpha)\cdots(I_{k,N_k)}-1+\alpha)}</script><p>第一项是因为我们第一次到新的类$k$，所以概率为$\frac{\alpha}{I_{k,1}-1+\alpha}$，第二项是因为$k$已经出现了，所以概率为$\frac{1}{(I_{k,2}-1+\alpha)}$，以此类推。对于所有的类：</p><script type="math/tex; mode=display">p(\theta_{1:N}) = \prod_{k=1}^K\frac{\alpha(N_k-1)!}{(I_{k,1}-1+\alpha)(I_{k,2}-1+\alpha)\cdots(I_{k,N_k}-1+\alpha)}</script><p>注意所有$I_k$的并为所有的索引，我们将索引合并，得：</p><script type="math/tex; mode=display">p(\theta_{1:N}) = \frac{\alpha^K\prod_{k=1}^K(N_k-1)!}{\prod_{i=1}^N(i-1+\alpha)}</script><p>所以很明显看出来是无限可交换的。</p><p>现在<code>de Finetti&#39;s theorem</code>说明对于任何无限可交换序列$\theta_1,\theta_2,\cdots$存在一个随机分布$G$使得序列可以被分解为独立同分布地从下列采样：</p><script type="math/tex; mode=display">P(\theta_1,\cdots,\theta_n) = \int\prod_{i=1}^n G(\theta_i)dP(G)</script><p>在我们的设置中，随机分布$P(G)$的先验正是狄利克雷过程$\text{DP}(\alpha,H)$，因此DP存在。</p><h3 id="Clustering-Partitions-and-the-Chinese-Restaurant-Process"><a href="#Clustering-Partitions-and-the-Chinese-Restaurant-Process" class="headerlink" title="Clustering, Partitions and the Chinese Restaurant Process"></a>Clustering, Partitions and the Chinese Restaurant Process</h3><p>DP的离散性质也暗示了聚类的特性。现在我们假设$H$是光滑的，因此所有的重复值都由于DP的离散性质而不是$H$自身。因此采样得到的值有重复的，令$\theta_1^\star,\cdots,\theta_m^\star$为$\theta_1,\cdots,\theta_n$去除重复值后的结果并且$n_k$为$\theta_k^\star$重复的次数。预测分布可以被等价地写为：</p><script type="math/tex; mode=display">\theta_{n+1}\mid \theta_1,\cdots,\theta_n\sim \frac{1}{\alpha+n}\left(\alpha H+\sum_{k=1}^m n_k\delta_{\theta_k^\star}\right)</script><p>我们可以通过查看由聚类引起的划分来进一步研究DP的聚类属性。$\theta_1,\cdots,\theta_n$去除重复值后将对集合$[n]=\{1,\cdots,n\}$分区引进了聚类使得在每一个类$k$中，$\theta_i$取相同的值$\theta_k^\star$。</p><p>分区的分布被称为中国餐馆过程(CRP)。在这个情境下我们有一个中国餐馆，里面有无穷多个桌子，每个桌子可以坐无穷多个人。第一个人进入餐馆坐在第一个位置，第二个人可以坐在第一个人的位置或者坐在新的位置。一般地，第$n+1$个人要么以正比于$n_k$的概率坐在已经有人的位置$k$，或者以正比于$\alpha$的概率坐在新的位置。</p><p>我们也可以估计聚类数目的期望。假设共有$n$个观测，对于$i\ge1$，观测$\theta_i$以$\frac{\alpha}{\alpha+i-1}$的概率取新的值，所以聚类数$m$的期望为：</p><script type="math/tex; mode=display">\mathbb{E}[m\mid n] = \sum_{i=1}^n\frac{\alpha}{\alpha+i-1}\in \mathcal{O}(\alpha \log n)</script><p>因为$\theta$为离散值，具有相同$\theta$值得数据表示属于同一类，我们可以用$Z$来表示属于哪一类。即计算$P(Z_i\mid Z_{-i})$。有多少类只与参数$\alpha$有关，而$\theta$的位置(值)则与$H$有关。</p><p>我们下面计算：</p><script type="math/tex; mode=display">P(Z_i=m\mid Z_{-i}) = \frac{P(Z_i=m,Z_{-i})}{P(Z_{-i})}</script><p>我们如何将其与狄利克雷过程结合起来呢？将其与狄利克雷过程结合起来很难，因为狄利克雷过程有无限多的项，我们可以假设其外$K$项，然后再将$K$取无穷。我们用如下方法：</p><script type="math/tex; mode=display">\begin{aligned}P(Z_i=m\mid Z_{-i}) &= \frac{P(Z_i=m,Z_{-i})}{P(Z_{-i})}\\&=\frac{\int_{P_1,\cdots,P_K}P(Z_i=m,Z_{-i}\mid P_1,\cdots,P_K)\text{DIR}(\alpha/K,\cdots,\alpha/K)dP}{\int_{P_1,\cdots,P_K}P(Z_{-i}\mid P_1,\cdots,P_K)\text{DIR}(\alpha/K,\cdots,\alpha/K)dP}\end{aligned}</script><p>关于积分的计算就用到我们之前的多项式分布和狄利克雷分布共轭的知识了：</p><script type="math/tex; mode=display">\begin{aligned}&\int_{p_1,\cdots,p_K}P(n_1,\cdots,n_K\mid p_1,\cdots,p_K)P(p_1,\cdots,p_K\mid \alpha_1,\cdots,\alpha_K)dP\\&=\frac{n!}{n_1!\cdots n_K!}\frac{\Gamma(\sum\alpha_i)}{\prod\Gamma(\alpha_i)}\int_{p_1,\cdots,p_K}\prod_{i=1}^K p_i^{n_i+\alpha_i-1}dp\\&=\frac{n!}{n_1!\cdots n_K!}\frac{\Gamma(\sum\alpha_i)}{\prod\Gamma(\alpha_i)}\frac{\prod\Gamma(\alpha_i+n_i)}{\Gamma(\sum\alpha_i+n)}\end{aligned}</script><p>我们将其应用到分子和分母上，首先定义符号：$n_{l,-i}$表示去除第$i$个数据后属于第$l$类的个数。我们知道第二项：</p><script type="math/tex; mode=display">\frac{\Gamma(\sum\alpha_i)}{\prod\Gamma(\alpha_i)}</script><p>只与先验有关，所以分子分母都一样。</p><p>我们先看第一项，因为在我们的情景下，即便类数相等，每个类的个数相等，但是相同个体不属于同一个类，这两种划分方法得到的第一项的值是相同的，但是在我们的情境下是不同的，所以第一项不应该存在。</p><p>第三项代入为：</p><script type="math/tex; mode=display">\frac{\Gamma(\alpha/K+n_{m,-i}+1)\prod_{l\neq i} \Gamma(\alpha/K+n_{l,-i})}{\Gamma(\alpha+n)}\cdot \frac{\Gamma(\alpha+n-1)}{\prod\Gamma(\sum_l \alpha/K+n_{l,-i})}</script><p>伽马函数具有如下性质：</p><script type="math/tex; mode=display">\Gamma(x) = (x-1)\Gamma(x-1)</script><p>上式化简得到：</p><script type="math/tex; mode=display">\frac{n_{m,-i}+\frac{\alpha}{K}}{n+\alpha-1}</script><p>当$K\rightarrow \infty$为</p><script type="math/tex; mode=display">\frac{n_{m,-i}}{n+\alpha-1}</script><p>对$m$进行求和得到：</p><script type="math/tex; mode=display">\sum_m\frac{n_{m,-i}}{n+\alpha-1} = \frac{n-1}{n+\alpha-1}\neq1</script><p>这与概率密度的定义不同，所以有$\frac{\alpha}{n+\alpha-1}$的概率属于新的一个类，这就是<strong>中国餐馆过程</strong>。</p><h3 id="Dirichlet-Process-Mixture-Models"><a href="#Dirichlet-Process-Mixture-Models" class="headerlink" title="Dirichlet Process Mixture Models"></a>Dirichlet Process Mixture Models</h3><p>狄利克雷混合模型可以写为：</p><script type="math/tex; mode=display">\begin{aligned}&\pi \mid \alpha \sim \operatorname{GEM}(\alpha)\\&\theta_{k}^{*} \mid H \sim H\\&z_{i} \mid \pi \sim \operatorname{Mult}(\pi)\\&x_{i} \mid z_{i},\left\{\theta_{k}^{*}\right\} \sim F\left(\theta_{z_{i}}^{*}\right)\end{aligned}</script><p>狄利克雷混合模型为无限混合模型，指的是具有无限可数个类的混合模型。与事先确定了类的有限混合模型不同，狄利克雷混合模型会根据数据确定聚类的数目。</p><blockquote><p>狄利克雷过程为无参贝叶斯方法的一种，为什么是无参？我们理解是狄利克雷过程是分布的先验，而狄利克雷过程采样得到的分布为我们产生数据的分布，在有参数的模型中此分布有参数(感觉像废话)，而狄利克雷过程产生的分布无法用参数表示故为无参数模型。我们将分布作为概率的一部分，并且存在自己的先验分布，也可以让我们通过数据来自动调节分布的复杂度。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://img2.baidu.com/it/u=2682475456,642314187&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=799&amp;h=500&quot; style=&quot;zoom: 100%;&quot; /&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;参看文献：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1Tp411R7Sf?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=6177c61c946280bb88c727585de76bc8&quot;&gt;徐亦达老师课程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hil.t.u-tokyo.ac.jp/~kameoka/SAP/papers/Teh2010a.pdf&quot;&gt;狄利克雷过程文献&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sciencedirect.com/science/article/abs/pii/S002224961100071X&quot;&gt;A Tutorial on Bayesian Nonparametric Models&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="文献阅读" scheme="https://www.hfcouc.work/categories/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="贝叶斯" scheme="https://www.hfcouc.work/tags/%E8%B4%9D%E5%8F%B6%E6%96%AF/"/>
    
    <category term="算法" scheme="https://www.hfcouc.work/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>书籍Thinking Julia后几章阅读笔记</title>
    <link href="https://www.hfcouc.work/2022/07/03/thinkjulia2/"/>
    <id>https://www.hfcouc.work/2022/07/03/thinkjulia2/</id>
    <published>2022-07-03T00:55:18.000Z</published>
    <updated>2022-07-03T00:58:24.916Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p align="center">    <img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Farticle%2F0641bd5a05ae260e3167b7a6b6f389143abb0416.jpg&refer=http%3A%2F%2Fi0.hdslb.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1659401858&t=1004217d7de1a7d354b99be904052734" style="zoom: 100%;" /></p><blockquote><p>书籍网址：<a href="https://benlauwens.github.io/ThinkJulia.jl/latest/book.html">https://benlauwens.github.io/ThinkJulia.jl/latest/book.html</a></p></blockquote><span id="more"></span><h2 id="Dictionaries"><a href="#Dictionaries" class="headerlink" title="Dictionaries"></a>Dictionaries</h2><h3 id="A-Dictionary-Is-a-Mapping"><a href="#A-Dictionary-Is-a-Mapping" class="headerlink" title="A Dictionary Is a Mapping"></a>A Dictionary Is a Mapping</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; eng2sp = <span class="built_in">Dict</span>()</span><br><span class="line"><span class="built_in">Dict</span>&#123;<span class="built_in">Any</span>, <span class="built_in">Any</span>&#125;()</span><br></pre></td></tr></table></figure><p>我们可以使用方括号为字典添加数据：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; eng2sp[<span class="string">&quot;one&quot;</span>] = <span class="string">&quot;uno&quot;</span></span><br><span class="line"><span class="string">&quot;uno&quot;</span></span><br><span class="line">julia&gt; eng2sp</span><br><span class="line"><span class="built_in">Dict</span>&#123;<span class="built_in">Any</span>, <span class="built_in">Any</span>&#125; with <span class="number">1</span> entry:</span><br><span class="line">  <span class="string">&quot;one&quot;</span> =&gt; <span class="string">&quot;uno&quot;</span></span><br></pre></td></tr></table></figure><p>上述输出的格式也可以作为输入的格式：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; eng2sp = <span class="built_in">Dict</span>(<span class="string">&quot;one&quot;</span>=&gt;<span class="string">&quot;uno&quot;</span>, <span class="string">&quot;two&quot;</span>=&gt;<span class="string">&quot;dos&quot;</span>,<span class="string">&quot;three&quot;</span>=&gt;<span class="string">&quot;tres&quot;</span>)</span><br><span class="line"><span class="built_in">Dict</span>&#123;<span class="built_in">String</span>, <span class="built_in">String</span>&#125; with <span class="number">3</span> entries: …</span><br><span class="line">julia&gt; eng2sp</span><br><span class="line"><span class="built_in">Dict</span>&#123;<span class="built_in">String</span>, <span class="built_in">String</span>&#125; with <span class="number">3</span> entries:</span><br><span class="line">  <span class="string">&quot;two&quot;</span>   =&gt; <span class="string">&quot;dos&quot;</span></span><br><span class="line">  <span class="string">&quot;one&quot;</span>   =&gt; <span class="string">&quot;uno&quot;</span></span><br><span class="line">  <span class="string">&quot;three&quot;</span> =&gt; <span class="string">&quot;tres&quot;</span></span><br></pre></td></tr></table></figure><p>可以看出字典输出的顺序与我们输入的顺序不同，在<code>Julia</code>中，字典的输出顺序是不可预测的。</p><p>查看长度：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; length(eng2sp)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p><code>keys</code>函数返回字典的键：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; ks = keys(eng2sp);</span><br><span class="line">julia&gt; print(ks)</span><br><span class="line">[<span class="string">&quot;two&quot;</span>, <span class="string">&quot;one&quot;</span>, <span class="string">&quot;three&quot;</span>]</span><br></pre></td></tr></table></figure><p>也可以用 <code>∈</code> 符号查看某个字符串是否在keys里：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; <span class="string">&quot;one&quot;</span> ∈ ks</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>使用<code>values</code>函数获取字典的值：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; vs = values(eng2sp);</span><br><span class="line"></span><br><span class="line">julia&gt; <span class="string">&quot;uno&quot;</span> ∈ vs</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>字典有<code>get</code>函数，给定key获取其值，如果key不存在，则返回默认值：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; get(eng2sp, <span class="string">&quot;one&quot;</span>,<span class="number">1</span>)    </span><br><span class="line"><span class="string">&quot;uno&quot;</span>                          </span><br><span class="line">                               </span><br><span class="line">julia&gt; get(eng2sp, <span class="string">&quot;four&quot;</span>,<span class="number">1</span>)   </span><br><span class="line"><span class="number">1</span>                              </span><br></pre></td></tr></table></figure><h3 id="Reverse-Lookup"><a href="#Reverse-Lookup" class="headerlink" title="Reverse Lookup"></a>Reverse Lookup</h3><p>我们可以根据值找键：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; findall(isequal(<span class="string">&quot;uno&quot;</span>), eng2sp) </span><br><span class="line"><span class="number">1</span>-element <span class="built_in">Vector</span>&#123;<span class="built_in">String</span>&#125;:              </span><br><span class="line"> <span class="string">&quot;one&quot;</span>                                 </span><br></pre></td></tr></table></figure><h3 id="Global-Variables"><a href="#Global-Variables" class="headerlink" title="Global Variables"></a>Global Variables</h3><p>全局变量是位于<code>Main</code>中的变量，我们一般将其用为<code>flag</code>来表示真假，如：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">verbose = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> example1()</span><br><span class="line">    <span class="keyword">if</span> verbose</span><br><span class="line">        println(<span class="string">&quot;Running example1&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>但是如果你</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">been_called = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> example2()</span><br><span class="line">    been_called = <span class="literal">true</span>         <span class="comment"># WRONG</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>你会发现<code>been_called</code>的值没有改变，这是因为函数中的<code>been_called</code>是局部变量，与函数外的变量无关系。</p><p>要在函数内部重新分配全局变量，必须在使用它之前声明该变量为全局变量：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">been_called = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> example2()</span><br><span class="line">    <span class="keyword">global</span> been_called</span><br><span class="line">    been_called = <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>如果一个全局变量引用了一个可变值，您可以修改该值，而不需要声明变量为全局变量：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">known = <span class="built_in">Dict</span>(<span class="number">0</span>=&gt;<span class="number">0</span>, <span class="number">1</span>=&gt;<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> example4()</span><br><span class="line">    known[<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>因此，您可以添加、删除和替换全局数组或字典的元素，但如果您想重新分配变量，您必须声明它是全局的：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">known = <span class="built_in">Dict</span>(<span class="number">0</span>=&gt;<span class="number">0</span>, <span class="number">1</span>=&gt;<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> example5()</span><br><span class="line">    <span class="keyword">global</span> known</span><br><span class="line">    known = <span class="built_in">Dict</span>()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="Tuples"><a href="#Tuples" class="headerlink" title="Tuples"></a>Tuples</h2><h3 id="Tuples-Are-Immutable"><a href="#Tuples-Are-Immutable" class="headerlink" title="Tuples Are Immutable"></a>Tuples Are Immutable</h3><p>元组是不可变的，其元素可以是不同的类型：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; t = <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span></span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>)</span><br></pre></td></tr></table></figure><p>创建只有一个元素的数组，后面必须加<code>,</code>：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; t1 = (<span class="string">&#x27;a&#x27;</span>,)</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>,)</span><br><span class="line">julia&gt; typeof(t1)</span><br><span class="line"><span class="built_in">Tuple</span>&#123;<span class="built_in">Char</span>&#125;</span><br></pre></td></tr></table></figure><p>如果提供了多个参数，则结果是一个具有给定参数的元组</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; t3 = tuple(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="literal">pi</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="literal">π</span> = <span class="number">3.1415926535897</span>...)</span><br></pre></td></tr></table></figure><p>可以使用数字对元组进行索引：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; t = (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>);</span><br><span class="line"></span><br><span class="line">julia&gt; t[<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;a&#x27;</span>: ASCII/Unicode U+<span class="number">0061</span> (category Ll: Letter, lowercase)</span><br><span class="line">julia&gt; t[<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line">(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>)</span><br></pre></td></tr></table></figure><p>但是如果你尝试改变元组的值则会报错：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; t[<span class="number">1</span>] = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">ERROR: <span class="built_in">MethodError</span>: no method matching setindex!(::<span class="built_in">NTuple</span>&#123;<span class="number">5</span>,<span class="built_in">Char</span>&#125;, ::<span class="built_in">Char</span>, ::<span class="built_in">Int64</span>)</span><br></pre></td></tr></table></figure><p>元组逐元素比较大小：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; (<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>) &lt; (<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">julia&gt; (<span class="number">0</span>, <span class="number">1</span>, <span class="number">2000000</span>) &lt; (<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="Tuple-Assignment"><a href="#Tuple-Assignment" class="headerlink" title="Tuple Assignment"></a>Tuple Assignment</h3><p>交换<code>a,b</code>的值我们可以：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure><p>左侧的值的数量要少于右边值的数量：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; (a, b) = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">julia&gt; a  </span><br><span class="line"><span class="number">1</span>         </span><br><span class="line">          </span><br><span class="line">julia&gt; b  </span><br><span class="line"><span class="number">2</span>         </span><br><span class="line">julia&gt; a, b, c = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">ERROR: <span class="built_in">BoundsError</span>: attempt to access (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">  at index [<span class="number">3</span>]</span><br></pre></td></tr></table></figure><h3 id="Tuples-as-Return-Values"><a href="#Tuples-as-Return-Values" class="headerlink" title="Tuples as Return Values"></a>Tuples as Return Values</h3><p>元组也可以作为返回值，如内置函数<code>diverm</code>返回整除和余数：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; q, r = divrem(<span class="number">7</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">julia&gt; <span class="meta">@show</span> q r;</span><br><span class="line">q = <span class="number">2</span></span><br><span class="line">r = <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="Variable-length-Argument-Tuples"><a href="#Variable-length-Argument-Tuples" class="headerlink" title="Variable-length Argument Tuples"></a>Variable-length Argument Tuples</h3><p>函数可以接受可变数量的参数。末尾带有<code>...</code>的参数将参数聚集成元组：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> printall(args...)</span><br><span class="line">    println(args)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">julia&gt; printall(<span class="number">1</span>, <span class="number">2.0</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2.0</span>, <span class="string">&#x27;3&#x27;</span>)</span><br></pre></td></tr></table></figure><p>同样的元组后加<code>...</code>可以将元组分解作为多个参数传入：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; t = (<span class="number">7</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">julia&gt; divrem(t)</span><br><span class="line">ERROR: <span class="built_in">MethodError</span>: no method matching divrem(::<span class="built_in">Tuple</span>&#123;<span class="built_in">Int64</span>,<span class="built_in">Int64</span>&#125;)</span><br><span class="line">julia&gt; divrem(t...)</span><br><span class="line">(<span class="number">2</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="Arrays-and-Tuples"><a href="#Arrays-and-Tuples" class="headerlink" title="Arrays and Tuples"></a>Arrays and Tuples</h3><p>内建函数<code>zip</code>可以将两个或多个序列转换为元组的集合，每个元组包含每个序列的一个元素。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; s = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line">julia&gt; t = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">julia&gt; zip(s,t)</span><br><span class="line">zip(<span class="string">&quot;abc&quot;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>返回一个<code>zip</code>对象，<code>zip</code>对象是一种迭代器，它是对序列进行迭代的任何对象。迭代器在某些方面类似于数组，但与数组不同的是，不能使用索引从迭代器中选择元素。我们可以使用<code>for</code>循环对其进行遍历：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; <span class="keyword">for</span> pair <span class="keyword">in</span> zip(s,t)</span><br><span class="line">       println(pair)</span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>如果你想用数组的方法来操纵<code>zip</code>对象，可以将其转换为数组：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; collect(zip(s,t))</span><br><span class="line"><span class="number">3</span>-element <span class="built_in">Vector</span>&#123;<span class="built_in">Tuple</span>&#123;<span class="built_in">Char</span>, <span class="built_in">Int64</span>&#125;&#125;:</span><br><span class="line"> (<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"> (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"> (<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>如果序列长度不一样，那么用长度较小的序列：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; collect(zip(<span class="string">&quot;Anne&quot;</span>, <span class="string">&quot;Elk&quot;</span>))</span><br><span class="line"><span class="number">3</span>-element <span class="built_in">Array</span>&#123;<span class="built_in">Tuple</span>&#123;<span class="built_in">Char</span>,<span class="built_in">Char</span>&#125;,<span class="number">1</span>&#125;:</span><br><span class="line"> (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;E&#x27;</span>)</span><br><span class="line"> (<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;l&#x27;</span>)</span><br><span class="line"> (<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;k&#x27;</span>)</span><br></pre></td></tr></table></figure><p>你可以在<code>for</code>循环中使用元组赋值来遍历元组数组：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; t = [(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>)];</span><br><span class="line"></span><br><span class="line">julia&gt; <span class="keyword">for</span> (letter, number) <span class="keyword">in</span> t</span><br><span class="line">           println(number, <span class="string">&quot; &quot;</span>, letter)</span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line"><span class="number">1</span> a</span><br><span class="line"><span class="number">2</span> b</span><br><span class="line"><span class="number">3</span> c</span><br></pre></td></tr></table></figure><p>使用<code>enumerate</code>来获得索引和元素：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; <span class="keyword">for</span> (index, element) <span class="keyword">in</span> enumerate(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">           println(index, <span class="string">&quot; &quot;</span>, element)</span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line"><span class="number">1</span> a</span><br><span class="line"><span class="number">2</span> b</span><br><span class="line"><span class="number">3</span> c</span><br></pre></td></tr></table></figure><h3 id="Dictionaries-and-Tuples"><a href="#Dictionaries-and-Tuples" class="headerlink" title="Dictionaries and Tuples"></a>Dictionaries and Tuples</h3><p>我们可以使用元组来初始化字典：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; t = [(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)];</span><br><span class="line"></span><br><span class="line">julia&gt; d = <span class="built_in">Dict</span>(t)</span><br><span class="line"><span class="built_in">Dict</span>&#123;<span class="built_in">Char</span>,<span class="built_in">Int64</span>&#125; with <span class="number">3</span> entries:</span><br><span class="line">  <span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">1</span></span><br><span class="line">  <span class="string">&#x27;c&#x27;</span> =&gt; <span class="number">3</span></span><br><span class="line">  <span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">2</span></span><br></pre></td></tr></table></figure><p>将<code>zip</code>和<code>Dict</code>结合起来创建字典很简洁：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; d = <span class="built_in">Dict</span>(zip(<span class="string">&quot;abc&quot;</span>, <span class="number">1</span>:<span class="number">3</span>))</span><br><span class="line"><span class="built_in">Dict</span>&#123;<span class="built_in">Char</span>,<span class="built_in">Int64</span>&#125; with <span class="number">3</span> entries:</span><br><span class="line">  <span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">1</span></span><br><span class="line">  <span class="string">&#x27;c&#x27;</span> =&gt; <span class="number">3</span></span><br><span class="line">  <span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h2><h3 id="Reading-and-Writing"><a href="#Reading-and-Writing" class="headerlink" title="Reading and Writing"></a>Reading and Writing</h3><p>使用<code>w</code>模式对文件进行写，如果文件存在则清空以前的内容，不存在则重新创建一个。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; fout = open(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"><span class="built_in">IOStream</span>(&lt;file output.txt&gt;)</span><br></pre></td></tr></table></figure><p>写入</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; line1 = <span class="string">&quot;This here&#x27;s the wattle,\n&quot;</span></span><br><span class="line"><span class="string">&quot;This here&#x27;s the wattle,\n&quot;</span></span><br><span class="line"></span><br><span class="line">julia&gt; write(fout, line1)</span><br><span class="line"><span class="number">24</span></span><br></pre></td></tr></table></figure><p>返回的为写入的字符串长度。</p><p>当写入完毕后，要关闭文件：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; close(fout)</span><br></pre></td></tr></table></figure><h3 id="Filenames-and-Paths"><a href="#Filenames-and-Paths" class="headerlink" title="Filenames and Paths"></a>Filenames and Paths</h3><p><code>pwd</code>获取当前路径，<code>abspath</code>获取文件所处绝对路径，<code>ispath</code>判断是否为路径，<code>isdir</code>判断是否为文件夹，<code>readdir</code>读取路径下所有文件和路径。</p><h3 id="Catching-Exceptions"><a href="#Catching-Exceptions" class="headerlink" title="Catching Exceptions"></a>Catching Exceptions</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">    fin = open(<span class="string">&quot;bad_file.txt&quot;</span>)</span><br><span class="line"><span class="keyword">catch</span> exc</span><br><span class="line">    println(<span class="string">&quot;Something went wrong: <span class="variable">$exc</span>&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">    println(<span class="string">&quot;finally&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Serialization"><a href="#Serialization" class="headerlink" title="Serialization"></a>Serialization</h3><p>函数<code>serialize</code>和<code>deserialize</code>可以将任何类型的对象转为字节数组。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; <span class="keyword">using</span> Serialization</span><br><span class="line"></span><br><span class="line">julia&gt; io = <span class="built_in">IOBuffer</span>()</span><br><span class="line"><span class="built_in">IOBuffer</span>(data=<span class="built_in">UInt8</span>[...], readable=<span class="literal">true</span>, writable=<span class="literal">true</span>, seekable=<span class="literal">true</span>, append=<span class="literal">false</span>, size=<span class="number">0</span>, maxsize=<span class="literal">Inf</span>, ptr=<span class="number">1</span>, mark=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">julia&gt; t = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">julia&gt; serialize(io, t)</span><br><span class="line"><span class="number">24</span></span><br><span class="line"></span><br><span class="line">julia&gt; print(take!(io))</span><br><span class="line"><span class="built_in">UInt8</span>[<span class="number">0x37</span>, <span class="number">0x4a</span>, <span class="number">0x4c</span>, <span class="number">0x0f</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x15</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0xe2</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br></pre></td></tr></table></figure><p>输出的类型不利于我们阅读，我们可以将其转换为原来的格式：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; io = <span class="built_in">IOBuffer</span>();</span><br><span class="line"></span><br><span class="line">julia&gt; t1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">julia&gt; serialize(io, t1)</span><br><span class="line"><span class="number">24</span></span><br><span class="line"></span><br><span class="line">julia&gt; s = take!(io)</span><br><span class="line"><span class="number">36</span>-element <span class="built_in">Vector</span>&#123;<span class="built_in">UInt8</span>&#125;: …</span><br><span class="line"></span><br><span class="line">julia&gt; t2 = deserialize(<span class="built_in">IOBuffer</span>(s));</span><br><span class="line"></span><br><span class="line">julia&gt; print(t2)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>尽管新的对象和原对象的值相同，但是它们不是同一个对象：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; t1 == t2          </span><br><span class="line"><span class="literal">true</span>                     </span><br><span class="line">                         </span><br><span class="line">julia&gt; t1 === t2         </span><br><span class="line"><span class="literal">false</span>                    </span><br></pre></td></tr></table></figure><h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><p>如果你有一个文件<code>wc.jl</code>，内容为：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> linecount(filename)</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> eachline(filename)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    count</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">print(linecount(<span class="string">&quot;wc.jl&quot;</span>))</span><br></pre></td></tr></table></figure><p>如果你运行此段代码，它读取自己并输出$9$。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; include(<span class="string">&quot;wc.jl&quot;</span>)</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><p><code>Julia</code>引入了一些模块(module)来创建单独的变量工作区，即新的全局作用域。<code>import</code>允许控制来自其他模块的哪些名称是可见的，<code>export</code>确定哪些名称是公共的，即可以在模块外不加模块名称前缀来使用。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> LineCount</span><br><span class="line">    <span class="keyword">export</span> linecount</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> linecount(filename)</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> eachline(filename)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        count</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>将上述文件保存为<code>LineCount.jl</code>，之后运行<code>push!(LOAD_PATH, &quot;.&quot;)</code>，将当前目录添加到工作路径，<code>.</code>表示当前路径。之后</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; <span class="keyword">using</span> LineCount</span><br><span class="line"></span><br><span class="line">julia&gt; linecount(<span class="string">&quot;wc.jl&quot;</span>)</span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure><h2 id="Structs-and-Objects"><a href="#Structs-and-Objects" class="headerlink" title="Structs and Objects"></a>Structs and Objects</h2><h3 id="Composite-Types"><a href="#Composite-Types" class="headerlink" title="Composite Types"></a>Composite Types</h3><p>我们可以通过<code>struct</code>来定义复合类型，如定义<code>Point</code>类型：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Point</span><br><span class="line">    x</span><br><span class="line">    y</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">julia&gt; p = Point(<span class="number">3.0</span>, <span class="number">4.0</span>)</span><br><span class="line">Point(<span class="number">3.0</span>, <span class="number">4.0</span>)</span><br></pre></td></tr></table></figure><p>返回值是对<code>Point</code>对象的引用，我们将其赋值给<code>p</code>。</p><h3 id="Structs-are-Immutable"><a href="#Structs-are-Immutable" class="headerlink" title="Structs are Immutable"></a>Structs are Immutable</h3><p>你可以使用<code>.</code>符号来获取字段的值：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; x = p.x</span><br><span class="line"><span class="number">3.0</span></span><br><span class="line">julia&gt; p.y</span><br><span class="line"><span class="number">4.0</span></span><br></pre></td></tr></table></figure><p><code>struct</code>在默认情况下是不可变的，构造之后字段的值不可改变：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; p.y = <span class="number">1.0</span></span><br><span class="line">ERROR: setfield! immutable <span class="keyword">struct</span> of type Point cannot be changed</span><br></pre></td></tr></table></figure><h3 id="Mutable-Structs"><a href="#Mutable-Structs" class="headerlink" title="Mutable Structs"></a>Mutable Structs</h3><p>我们可以使用<code>mutate</code>关键字使<code>struct</code>可变：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mutable struct</span> MPoint</span><br><span class="line">    x</span><br><span class="line">    y</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">julia&gt; blank = MPoint(<span class="number">0.0</span>, <span class="number">0.0</span>)</span><br><span class="line">MPoint(<span class="number">0.0</span>, <span class="number">0.0</span>)</span><br><span class="line">julia&gt; blank.x = <span class="number">3.0</span></span><br><span class="line"><span class="number">3.0</span></span><br><span class="line">julia&gt; blank.y = <span class="number">4.0</span></span><br><span class="line"><span class="number">4.0</span></span><br></pre></td></tr></table></figure><h3 id="Rectangles"><a href="#Rectangles" class="headerlink" title="Rectangles"></a>Rectangles</h3><p>我们可以创建一个矩形对象，字段为一个端点的坐标和宽度和长度：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Represents a rectangle.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fields: width, height, corner.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">struct</span> Rectangle</span><br><span class="line">    width</span><br><span class="line">    height</span><br><span class="line">    corner</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">julia&gt; origin = MPoint(<span class="number">0.0</span>, <span class="number">0.0</span>)</span><br><span class="line">MPoint(<span class="number">0.0</span>, <span class="number">0.0</span>)</span><br><span class="line">julia&gt; box = Rectangle(<span class="number">100.0</span>, <span class="number">200.0</span>, origin)</span><br><span class="line">Rectangle(<span class="number">100.0</span>, <span class="number">200.0</span>, MPoint(<span class="number">0.0</span>, <span class="number">0.0</span>))</span><br></pre></td></tr></table></figure><h3 id="Instances-as-Arguments"><a href="#Instances-as-Arguments" class="headerlink" title="Instances as Arguments"></a>Instances as Arguments</h3><p>实例可以作为参数：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> printpoint(p)</span><br><span class="line">    println(<span class="string">&quot;(<span class="subst">$(p.x)</span>, <span class="subst">$(p.y)</span>)&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>当把一个实例传入到函数中去，函数会改变实例的字段值：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> movepoint!(p, dx, dy)</span><br><span class="line">    p.x += dx</span><br><span class="line">    p.y += dy</span><br><span class="line">    <span class="literal">nothing</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">julia&gt; origin = MPoint(<span class="number">0.0</span>, <span class="number">0.0</span>)</span><br><span class="line">MPoint(<span class="number">0.0</span>, <span class="number">0.0</span>)</span><br><span class="line">julia&gt; movepoint!(origin, <span class="number">1.0</span>, <span class="number">2.0</span>)</span><br><span class="line"></span><br><span class="line">julia&gt; origin</span><br><span class="line">MPoint(<span class="number">1.0</span>, <span class="number">2.0</span>)</span><br></pre></td></tr></table></figure><p>但是，你可以修改不可变对象的可变属性的值，如：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> moverectangle!(rect, dx, dy)</span><br><span class="line">  movepoint!(rect.corner, dx, dy)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">julia&gt; box</span><br><span class="line">Rectangle(<span class="number">100.0</span>, <span class="number">200.0</span>, MPoint(<span class="number">0.0</span>, <span class="number">0.0</span>))</span><br><span class="line">julia&gt; moverectangle!(box, <span class="number">1.0</span>, <span class="number">2.0</span>)</span><br><span class="line"></span><br><span class="line">julia&gt; box</span><br><span class="line">Rectangle(<span class="number">100.0</span>, <span class="number">200.0</span>, MPoint(<span class="number">1.0</span>, <span class="number">2.0</span>))</span><br></pre></td></tr></table></figure><h3 id="Instances-as-Return-Values"><a href="#Instances-as-Return-Values" class="headerlink" title="Instances as Return Values"></a>Instances as Return Values</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> findcenter(rect)</span><br><span class="line">    Point(rect.corner.x + rect.width / <span class="number">2</span>, rect.corner.y + rect.height / <span class="number">2</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Copying"><a href="#Copying" class="headerlink" title="Copying"></a>Copying</h3><p><code>Julia</code>内建函数<code>deepcopy</code>可以复制任何对象：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; p1 = MPoint(<span class="number">3.0</span>, <span class="number">4.0</span>)</span><br><span class="line">MPoint(<span class="number">3.0</span>, <span class="number">4.0</span>)</span><br><span class="line">julia&gt; p2 = deepcopy(p1)</span><br><span class="line">MPoint(<span class="number">3.0</span>, <span class="number">4.0</span>)</span><br><span class="line">julia&gt; p1 ≡ p2</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">julia&gt; p1 == p2</span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><p><code>≡</code>的结果我们应该能接受，因为是不同的对象，但是<code>==</code>的结果我们可能无法接受，因为两个对象的值是相同的，这是因为在<code>Julia</code>中可变复合类型<code>mutate</code>，<code>Julia</code>不知道什么是等价的。</p><p>而在不可变复合类型中相反：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; p1 = Point(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">Point(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">julia&gt; p2 = deepcopy(p1)</span><br><span class="line">Point(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">julia&gt; p1==p2</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"></span><br><span class="line">julia&gt; p1===p2</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>因为我们不会改变<code>p1</code>，所以复制也就没意义。</p><h3 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h3><p>判断<code>p</code>是否为<code>Point</code>类型：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; p <span class="keyword">isa</span> Point</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>查看<code>Point</code>类型的字段：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; fieldnames(Point)</span><br><span class="line">(:x, :y)</span><br></pre></td></tr></table></figure><p>或者使用：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; isdefined(p, :x)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">julia&gt; isdefined(p, :z)</span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="Structs-and-Functions"><a href="#Structs-and-Functions" class="headerlink" title="Structs and Functions"></a>Structs and Functions</h2><h3 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h3><p>我们构建时间类：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Represents the time of day.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fields: hour, minute, second</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">struct</span> MyTime</span><br><span class="line">    hour</span><br><span class="line">    minute</span><br><span class="line">    second</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; time = MyTime(<span class="number">11</span>, <span class="number">59</span>, <span class="number">30</span>)</span><br><span class="line">MyTime(<span class="number">11</span>, <span class="number">59</span>, <span class="number">30</span>)</span><br></pre></td></tr></table></figure><h3 id="Pure-Functions"><a href="#Pure-Functions" class="headerlink" title="Pure Functions"></a>Pure Functions</h3><p>下面是两个时间相加的简单原型：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> addtime(t1, t2)</span><br><span class="line">    MyTime(t1.hour + t2.hour, t1.minute + t2.minute, t1.second + t2.second)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>上面函数被称为纯函数，因为它并没有改变传入的两个对象的值。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; start = MyTime(<span class="number">9</span>, <span class="number">45</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">julia&gt; duration = MyTime(<span class="number">1</span>, <span class="number">35</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">julia&gt; done = addtime(start, duration);</span><br><span class="line"></span><br><span class="line">julia&gt; printtime(done)</span><br><span class="line"><span class="number">10</span>:<span class="number">80</span>:<span class="number">00</span></span><br></pre></td></tr></table></figure><p>出现了$80$分钟，这与我们的常识不同，我们需要添加新的规则</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> addtime(t1, t2)</span><br><span class="line">    second = t1.second + t2.second</span><br><span class="line">    minute = t1.minute + t2.minute</span><br><span class="line">    hour = t1.hour + t2.hour</span><br><span class="line">    <span class="keyword">if</span> second &gt;= <span class="number">60</span></span><br><span class="line">        second -= <span class="number">60</span></span><br><span class="line">        minute += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> minute &gt;= <span class="number">60</span></span><br><span class="line">        minute -= <span class="number">60</span></span><br><span class="line">        hour += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    MyTime(hour, minute, second)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Modifiers"><a href="#Modifiers" class="headerlink" title="Modifiers"></a>Modifiers</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> increment!(time, seconds)</span><br><span class="line">    time.second += seconds</span><br><span class="line">    <span class="keyword">if</span> time.second &gt;= <span class="number">60</span></span><br><span class="line">        time.second -= <span class="number">60</span></span><br><span class="line">        time.minute += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> time.minute &gt;= <span class="number">60</span></span><br><span class="line">        time.minute -= <span class="number">60</span></span><br><span class="line">        time.hour += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>上面定义的函数会改变传入的参数值，我们称其为<code>Modifiers</code>。</p><h2 id="Multiple-Dispatch"><a href="#Multiple-Dispatch" class="headerlink" title="Multiple Dispatch"></a>Multiple Dispatch</h2><p>在<code>Julia</code>中，你可以写在不同类型上运行的代码，这被称为泛型编程。</p><h3 id="Type-Declarations"><a href="#Type-Declarations" class="headerlink" title="Type Declarations"></a>Type Declarations</h3><p>运算符<code>::</code>将类型注释附加到表达式和变量：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; (<span class="number">1</span> + <span class="number">2</span>) :: <span class="built_in">Float64</span></span><br><span class="line">ERROR: <span class="built_in">TypeError</span>: <span class="keyword">in</span> typeassert, expected <span class="built_in">Float64</span>, got <span class="built_in">Int64</span></span><br><span class="line">julia&gt; (<span class="number">1</span> + <span class="number">2</span>) :: <span class="built_in">Int64</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>这帮助确认你的程序按照你期望的方式进行。</p><p><code>::</code>运算符也可以添加到赋值语句的左边，作为声明的一部分：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; <span class="keyword">function</span> returnfloat()</span><br><span class="line">           x::<span class="built_in">Float64</span> = <span class="number">100</span></span><br><span class="line">           x</span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line">returnfloat (generic <span class="keyword">function</span> with <span class="number">1</span> method)</span><br><span class="line">julia&gt; x = returnfloat()</span><br><span class="line"><span class="number">100.0</span></span><br><span class="line">julia&gt; typeof(x)</span><br><span class="line"><span class="built_in">Float64</span></span><br></pre></td></tr></table></figure><p>也可以作为函数定义的一部分：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> sinc(x)::<span class="built_in">Float64</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    sin(x)/(x)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><p>方法是具有特定特征的函数：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Printf</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> MyTime</span><br><span class="line">    hour :: <span class="built_in">Int64</span></span><br><span class="line">    minute :: <span class="built_in">Int64</span></span><br><span class="line">    second :: <span class="built_in">Int64</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> printtime(time::MyTime)</span><br><span class="line">    <span class="meta">@printf</span>(<span class="string">&quot;%02d:%02d:%02d&quot;</span>, time.hour, time.minute, time.second)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>上面的函数定义了输入的数据类型，为方法。</p><h3 id="Constructors"><a href="#Constructors" class="headerlink" title="Constructors"></a>Constructors</h3><p>构造是用来创建对象的一类特殊的函数。<code>MyTime</code>的默认构造函数方法有以下特征：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyTime(hour, minute, second) <span class="comment"># 默认构造函数</span></span><br><span class="line">MyTime(hour::<span class="built_in">Int64</span>, minute::<span class="built_in">Int64</span>, second::<span class="built_in">Int64</span>)</span><br></pre></td></tr></table></figure><p>我们也可以添加自己的外部构建方法：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> MyTime(time::MyTime)</span><br><span class="line">    MyTime(time.hour, time.minute, time.second)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>我们也可以构建内部构造函数：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> MyTime</span><br><span class="line">    hour :: <span class="built_in">Int64</span></span><br><span class="line">    minute :: <span class="built_in">Int64</span></span><br><span class="line">    second :: <span class="built_in">Int64</span></span><br><span class="line">    <span class="keyword">function</span> MyTime(hour::<span class="built_in">Int64</span>=<span class="number">0</span>, minute::<span class="built_in">Int64</span>=<span class="number">0</span>, second::<span class="built_in">Int64</span>=<span class="number">0</span>)</span><br><span class="line">        <span class="meta">@assert</span>(<span class="number">0</span> ≤ minute &lt; <span class="number">60</span>, <span class="string">&quot;Minute is not between 0 and 60.&quot;</span>)</span><br><span class="line">        <span class="meta">@assert</span>(<span class="number">0</span> ≤ second &lt; <span class="number">60</span>, <span class="string">&quot;Second is not between 0 and 60.&quot;</span>)</span><br><span class="line">        new(hour, minute, second)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>现在结构<code>MyTime</code>有$4$个内部构造方法：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MyTime()</span><br><span class="line">MyTime(hour::<span class="built_in">Int64</span>)</span><br><span class="line">MyTime(hour::<span class="built_in">Int64</span>, minute::<span class="built_in">Int64</span>)</span><br><span class="line">MyTime(hour::<span class="built_in">Int64</span>, minute::<span class="built_in">Int64</span>, second::<span class="built_in">Int64</span>)</span><br></pre></td></tr></table></figure><blockquote><p>内部构造函数会覆盖默认构造函数。</p></blockquote><p>内部构造函数总是定义在结构的内部，且能使用一个特殊函数<code>new</code>来创建最新定义的类型的对象。</p><p>另一种不使用<code>new</code>函数的参数的方法为：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mutable struct</span> MyTime</span><br><span class="line">    hour :: <span class="built_in">Int</span></span><br><span class="line">    minute :: <span class="built_in">Int</span></span><br><span class="line">    second :: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">function</span> MyTime(hour::<span class="built_in">Int64</span>=<span class="number">0</span>, minute::<span class="built_in">Int64</span>=<span class="number">0</span>, second::<span class="built_in">Int64</span>=<span class="number">0</span>)</span><br><span class="line">        <span class="meta">@assert</span>(<span class="number">0</span> ≤ minute &lt; <span class="number">60</span>, <span class="string">&quot;Minute is between 0 and 60.&quot;</span>)</span><br><span class="line">        <span class="meta">@assert</span>(<span class="number">0</span> ≤ second &lt; <span class="number">60</span>, <span class="string">&quot;Second is between 0 and 60.&quot;</span>)</span><br><span class="line">        time = new()</span><br><span class="line">        time.hour = hour</span><br><span class="line">        time.minute = minute</span><br><span class="line">        time.second = second</span><br><span class="line">        time</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>但是这样数据结构必须是可变的。</p><h3 id="show"><a href="#show" class="headerlink" title="show"></a><code>show</code></h3><p><code>show</code>函数是一个特殊的函数，返回对象的字符串表示。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Printf</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> Base.show(io::<span class="built_in">IO</span>, time::MyTime)</span><br><span class="line">    <span class="meta">@printf</span>(io, <span class="string">&quot;%02d:%02d:%02d&quot;</span>, time.hour, time.minute, time.second)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>在这里前缀<code>Base</code>是需要的因为我们创建了<code>Base.show</code>函数的新方法。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; time = MyTime(<span class="number">9</span>, <span class="number">45</span>)</span><br><span class="line"><span class="number">09</span>:<span class="number">45</span>:<span class="number">00</span></span><br></pre></td></tr></table></figure><h3 id="Operator-Overloading"><a href="#Operator-Overloading" class="headerlink" title="Operator Overloading"></a>Operator Overloading</h3><p>通过定义符号方法，你可以定义在定义的类型上的符号的行为。例如：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Base.+</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> +(t1::MyTime, t2::MyTime)</span><br><span class="line">    seconds = timetoint(t1) + timetoint(t2)</span><br><span class="line">    inttotime(seconds)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">julia&gt; start = MyTime(<span class="number">9</span>, <span class="number">45</span>)</span><br><span class="line"><span class="number">09</span>:<span class="number">45</span>:<span class="number">00</span></span><br><span class="line">julia&gt; duration = MyTime(<span class="number">1</span>, <span class="number">35</span>, <span class="number">0</span>)</span><br><span class="line"><span class="number">01</span>:<span class="number">35</span>:<span class="number">00</span></span><br><span class="line">julia&gt; start + duration</span><br><span class="line"><span class="number">11</span>:<span class="number">20</span>:<span class="number">00</span></span><br></pre></td></tr></table></figure><h3 id="Multiple-Dispatch-1"><a href="#Multiple-Dispatch-1" class="headerlink" title="Multiple Dispatch"></a>Multiple Dispatch</h3><p>在上面我们定义了两个<code>MyTime</code>类型相加，但是你可能也想整数和<code>Mytime</code>类型相加：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> +(time::MyTime, seconds::<span class="built_in">Int64</span>)</span><br><span class="line">    increment(time, seconds)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">julia&gt; start = MyTime(<span class="number">9</span>, <span class="number">45</span>)</span><br><span class="line"><span class="number">09</span>:<span class="number">45</span>:<span class="number">00</span></span><br><span class="line">julia&gt; start + <span class="number">1337</span></span><br><span class="line"><span class="number">10</span>:<span class="number">07</span>:<span class="number">17</span></span><br></pre></td></tr></table></figure><p>相加是可交换的，因此我们定义</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> +(seconds::<span class="built_in">Int64</span>, time::MyTime)</span><br><span class="line">  time + seconds</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">julia&gt; <span class="number">1337</span> + start</span><br><span class="line"><span class="number">10</span>:<span class="number">07</span>:<span class="number">17</span></span><br></pre></td></tr></table></figure><p>当一个函数被调用时决定使用哪个方法的决定被称为分派。</p><h3 id="Generic-Programming"><a href="#Generic-Programming" class="headerlink" title="Generic Programming"></a>Generic Programming</h3><p>多分派在必要时很有用，但(幸运的是)并不总是必要的。通常，您可以通过编写对不同类型的参数正确工作的函数来避免这种情况。</p><p>如下面的函数不仅可以对字符串使用，也可以对其他序列类型的数据使用：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> histogram(s)</span><br><span class="line">    d = <span class="built_in">Dict</span>()</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s</span><br><span class="line">        <span class="keyword">if</span> c ∉ keys(d)</span><br><span class="line">            d[c] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            d[c] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    d</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">julia&gt; t = (<span class="string">&quot;spam&quot;</span>, <span class="string">&quot;egg&quot;</span>, <span class="string">&quot;spam&quot;</span>, <span class="string">&quot;spam&quot;</span>, <span class="string">&quot;bacon&quot;</span>, <span class="string">&quot;spam&quot;</span>)</span><br><span class="line">(<span class="string">&quot;spam&quot;</span>, <span class="string">&quot;egg&quot;</span>, <span class="string">&quot;spam&quot;</span>, <span class="string">&quot;spam&quot;</span>, <span class="string">&quot;bacon&quot;</span>, <span class="string">&quot;spam&quot;</span>)</span><br><span class="line">julia&gt; histogram(t)</span><br><span class="line"><span class="built_in">Dict</span>&#123;<span class="built_in">Any</span>,<span class="built_in">Any</span>&#125; with <span class="number">3</span> entries:</span><br><span class="line">  <span class="string">&quot;bacon&quot;</span> =&gt; <span class="number">1</span></span><br><span class="line">  <span class="string">&quot;spam&quot;</span>  =&gt; <span class="number">4</span></span><br><span class="line">  <span class="string">&quot;egg&quot;</span>   =&gt; <span class="number">1</span></span><br></pre></td></tr></table></figure><p>使用多种类型的函数称为多态函数。多态可以促进代码重用。</p><h2 id="Subtyping"><a href="#Subtyping" class="headerlink" title="Subtyping"></a>Subtyping</h2><h3 id="Cards"><a href="#Cards" class="headerlink" title="Cards"></a>Cards</h3><p>假设我们有一副扑克牌，我们想比较其大小，根据花色和数字，先定义卡牌类：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Card</span><br><span class="line">    suit :: <span class="built_in">Int64</span></span><br><span class="line">    rank :: <span class="built_in">Int64</span></span><br><span class="line">    <span class="keyword">function</span> Card(suit::<span class="built_in">Int64</span>, rank::<span class="built_in">Int64</span>)</span><br><span class="line">        <span class="meta">@assert</span>(<span class="number">1</span> ≤ suit ≤ <span class="number">4</span>, <span class="string">&quot;suit is not between 1 and 4&quot;</span>)</span><br><span class="line">        <span class="meta">@assert</span>(<span class="number">1</span> ≤ rank ≤ <span class="number">13</span>, <span class="string">&quot;rank is not between 1 and 13&quot;</span>)</span><br><span class="line">        new(suit, rank)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Global-Variables-1"><a href="#Global-Variables-1" class="headerlink" title="Global Variables"></a>Global Variables</h3><p>定义对应的全局变量来一一对应花色和数组：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> suit_names = [<span class="string">&quot;♣&quot;</span>, <span class="string">&quot;♦&quot;</span>, <span class="string">&quot;♥&quot;</span>, <span class="string">&quot;♠&quot;</span>]</span><br><span class="line"><span class="keyword">const</span> rank_names = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;10&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;K&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> Base.show(io::<span class="built_in">IO</span>, card::Card)</span><br><span class="line">    print(io, rank_names[card.rank], suit_names[card.suit])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">julia&gt; Card(<span class="number">3</span>, <span class="number">11</span>)</span><br><span class="line">J♥</span><br></pre></td></tr></table></figure><h3 id="Comparing-Cards"><a href="#Comparing-Cards" class="headerlink" title="Comparing Cards"></a>Comparing Cards</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Base.&lt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> &lt;(c1::Card, c2::Card)</span><br><span class="line">    (c1.suit, c1.rank) &lt; (c2.suit, c2.rank)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Decks"><a href="#Decks" class="headerlink" title="Decks"></a>Decks</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Deck</span><br><span class="line">    cards :: <span class="built_in">Array</span>&#123;Card, <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> Deck()</span><br><span class="line">    deck = Deck(Card[])</span><br><span class="line">    <span class="keyword">for</span> suit <span class="keyword">in</span> <span class="number">1</span>:<span class="number">4</span></span><br><span class="line">        <span class="keyword">for</span> rank <span class="keyword">in</span> <span class="number">1</span>:<span class="number">13</span></span><br><span class="line">            push!(deck.cards, Card(suit, rank))</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    deck</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> Base.show(io::<span class="built_in">IO</span>, deck::Deck)</span><br><span class="line">    <span class="keyword">for</span> card <span class="keyword">in</span> deck.cards</span><br><span class="line">        print(io, card, <span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    println()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">julia&gt; Deck()</span><br><span class="line">A♣ <span class="number">2</span>♣ <span class="number">3</span>♣ <span class="number">4</span>♣ <span class="number">5</span>♣ <span class="number">6</span>♣ <span class="number">7</span>♣ <span class="number">8</span>♣ <span class="number">9</span>♣ <span class="number">10</span>♣ J♣ Q♣ K♣ A♦ <span class="number">2</span>♦ <span class="number">3</span>♦ <span class="number">4</span>♦ <span class="number">5</span>♦ <span class="number">6</span>♦ <span class="number">7</span>♦ <span class="number">8</span>♦ <span class="number">9</span>♦ <span class="number">10</span>♦ J♦ Q♦ K♦ A♥ <span class="number">2</span>♥ <span class="number">3</span>♥ <span class="number">4</span>♥ <span class="number">5</span>♥ <span class="number">6</span>♥ <span class="number">7</span>♥ <span class="number">8</span>♥ <span class="number">9</span>♥ <span class="number">10</span>♥ J♥ Q♥ K♥ A♠ <span class="number">2</span>♠ <span class="number">3</span>♠ <span class="number">4</span>♠ <span class="number">5</span>♠ <span class="number">6</span>♠ <span class="number">7</span>♠ <span class="number">8</span>♠ <span class="number">9</span>♠ <span class="number">10</span>♠ J♠ Q♠ K♠</span><br></pre></td></tr></table></figure><h3 id="Add-Remove-Shuffle-and-Sort"><a href="#Add-Remove-Shuffle-and-Sort" class="headerlink" title="Add, Remove, Shuffle and Sort"></a>Add, Remove, Shuffle and Sort</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Base.pop!(deck::Deck)</span><br><span class="line">    pop!(deck.cards)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> Base.push!(deck::Deck, card::Card)</span><br><span class="line">    push!(deck.cards, card)</span><br><span class="line">    deck</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Random</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> Random.shuffle!(deck::Deck)</span><br><span class="line">    shuffle!(deck.cards)</span><br><span class="line">    deck</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Abstract-Types-and-Subtyping"><a href="#Abstract-Types-and-Subtyping" class="headerlink" title="Abstract Types and Subtyping"></a>Abstract Types and Subtyping</h3><p>现在我们想要定义手(hand)的类型，其与Decks类型大致相同，因此我们先定义抽象类型：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract type</span> CardSet <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>在类型后可以使用<code>&lt;:</code>来指定其为谁的子类型，如果没有则为<code>Any</code>的子类型。</p><p>我们可以指定<code>Deck</code>为<code>CardSet</code>的子类</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Deck &lt;: CardSet</span><br><span class="line">    cards :: <span class="built_in">Array</span>&#123;Card, <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> Deck()</span><br><span class="line">    deck = Deck(Card[])</span><br><span class="line">    <span class="keyword">for</span> suit <span class="keyword">in</span> <span class="number">1</span>:<span class="number">4</span></span><br><span class="line">        <span class="keyword">for</span> rank <span class="keyword">in</span> <span class="number">1</span>:<span class="number">13</span></span><br><span class="line">            push!(deck.cards, Card(suit, rank))</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    deck</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Hand &lt;: CardSet</span><br><span class="line">    cards :: <span class="built_in">Array</span>&#123;Card, <span class="number">1</span>&#125;</span><br><span class="line">    label :: <span class="built_in">String</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> Hand(label::<span class="built_in">String</span>=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    Hand(Card[], label)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; deck = Deck();</span><br><span class="line"></span><br><span class="line">julia&gt; deck <span class="keyword">isa</span> CardSet</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="Abstract-Types-and-Functions"><a href="#Abstract-Types-and-Functions" class="headerlink" title="Abstract Types and Functions"></a>Abstract Types and Functions</h3><p>我们现在可以给抽象类型定义函数：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Base.show(io::<span class="built_in">IO</span>, cs::CardSet)</span><br><span class="line">    <span class="keyword">for</span> card <span class="keyword">in</span> cs.cards</span><br><span class="line">        print(io, card, <span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> Base.pop!(cs::CardSet)</span><br><span class="line">    pop!(cs.cards)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> Base.push!(cs::CardSet, card::Card)</span><br><span class="line">    push!(cs.cards, card)</span><br><span class="line">    <span class="literal">nothing</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; deck = Deck()</span><br><span class="line">A♣ <span class="number">2</span>♣ <span class="number">3</span>♣ <span class="number">4</span>♣ <span class="number">5</span>♣ <span class="number">6</span>♣ <span class="number">7</span>♣ <span class="number">8</span>♣ <span class="number">9</span>♣ <span class="number">10</span>♣ J♣ Q♣ K♣ A♦ <span class="number">2</span>♦ <span class="number">3</span>♦ <span class="number">4</span>♦ <span class="number">5</span>♦ <span class="number">6</span>♦ <span class="number">7</span>♦ <span class="number">8</span>♦ <span class="number">9</span>♦ <span class="number">10</span>♦ J♦ Q♦ K♦ A♥ <span class="number">2</span>♥ <span class="number">3</span>♥ <span class="number">4</span>♥ <span class="number">5</span>♥ <span class="number">6</span>♥ <span class="number">7</span>♥ <span class="number">8</span>♥ <span class="number">9</span>♥ <span class="number">10</span>♥ J♥ Q♥ K♥ A♠ <span class="number">2</span>♠ <span class="number">3</span>♠ <span class="number">4</span>♠ <span class="number">5</span>♠ <span class="number">6</span>♠ <span class="number">7</span>♠ <span class="number">8</span>♠ <span class="number">9</span>♠ <span class="number">10</span>♠ J♠ Q♠ K♠</span><br><span class="line">julia&gt; shuffle!(deck)</span><br><span class="line">J♦ <span class="number">10</span>♣ <span class="number">8</span>♠ <span class="number">9</span>♥ <span class="number">5</span>♠ <span class="number">7</span>♣ <span class="number">6</span>♦ A♠ J♣ <span class="number">7</span>♠ <span class="number">5</span>♦ <span class="number">10</span>♥ <span class="number">3</span>♦ <span class="number">9</span>♦ <span class="number">9</span>♣ <span class="number">4</span>♣ <span class="number">8</span>♦ <span class="number">8</span>♥ <span class="number">5</span>♣ A♥ K♥ K♦ K♠ <span class="number">4</span>♦ A♦ Q♥ <span class="number">6</span>♠ <span class="number">2</span>♦ <span class="number">6</span>♥ <span class="number">2</span>♣ <span class="number">10</span>♠ <span class="number">3</span>♥ <span class="number">2</span>♥ J♥ Q♣ <span class="number">5</span>♥ <span class="number">2</span>♠ <span class="number">9</span>♠ <span class="number">10</span>♦ Q♠ <span class="number">3</span>♠ <span class="number">8</span>♣ K♣ <span class="number">7</span>♥ <span class="number">3</span>♣ J♠ <span class="number">4</span>♥ <span class="number">6</span>♣ <span class="number">7</span>♦ <span class="number">4</span>♠ A♣ Q♦</span><br><span class="line">julia&gt; card = pop!(deck)</span><br><span class="line">Q♦</span><br><span class="line">julia&gt; push!(hand, card)</span><br></pre></td></tr></table></figure><h2 id="The-Goodies-Syntax"><a href="#The-Goodies-Syntax" class="headerlink" title="The Goodies: Syntax"></a>The Goodies: Syntax</h2><h3 id="Named-Tuples"><a href="#Named-Tuples" class="headerlink" title="Named Tuples"></a>Named Tuples</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; x = (a=<span class="number">1</span>, b=<span class="number">1</span>+<span class="number">1</span>)</span><br><span class="line">(a = <span class="number">1</span>, b = <span class="number">2</span>)</span><br><span class="line">julia&gt; x.a</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><p>可以以紧凑形式定义函数：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; f(x,y) = x + y</span><br><span class="line">f (generic <span class="keyword">function</span> with <span class="number">1</span> method)</span><br></pre></td></tr></table></figure><h4 id="Anonymous-Functions"><a href="#Anonymous-Functions" class="headerlink" title="Anonymous Functions"></a>Anonymous Functions</h4><p>我们可以定义没有名字的函数：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; x -&gt; x^<span class="number">2</span> + <span class="number">2</span>x - <span class="number">1</span></span><br><span class="line"><span class="comment">#1 (generic function with 1 method)</span></span><br><span class="line">julia&gt; <span class="keyword">function</span> (x)</span><br><span class="line">           x^<span class="number">2</span> + <span class="number">2</span>x - <span class="number">1</span></span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line"><span class="comment">#3 (generic function with 1 method)</span></span><br></pre></td></tr></table></figure><p>匿名函数通常是其他函数的参数：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; <span class="keyword">using</span> Plots</span><br><span class="line"></span><br><span class="line">julia&gt; plot(x -&gt; x^<span class="number">2</span> + <span class="number">2</span>x - <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, xlabel=<span class="string">&quot;x&quot;</span>, ylabel=<span class="string">&quot;y&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="Keyword-Arguments"><a href="#Keyword-Arguments" class="headerlink" title="Keyword Arguments"></a>Keyword Arguments</h4><p>函数参数可以命名：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; <span class="keyword">function</span> myplot(x, y; style=<span class="string">&quot;solid&quot;</span>, width=<span class="number">1</span>, color=<span class="string">&quot;black&quot;</span>)</span><br><span class="line">           <span class="comment">###</span></span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line">myplot (generic <span class="keyword">function</span> with <span class="number">1</span> method)</span><br><span class="line">julia&gt; myplot(<span class="number">0</span>:<span class="number">10</span>, <span class="number">0</span>:<span class="number">10</span>, style=<span class="string">&quot;dotted&quot;</span>, color=<span class="string">&quot;blue&quot;</span>)</span><br></pre></td></tr></table></figure><p>关键字参数用<code>;</code>隔开，但调用的时候可以使用<code>,</code>。</p><h4 id="Closures"><a href="#Closures" class="headerlink" title="Closures"></a>Closures</h4><p><code>closure</code>是允许函数获取在函数范围之外的变量的方法：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; foo(x) = ()-&gt;x</span><br><span class="line">foo (generic <span class="keyword">function</span> with <span class="number">1</span> method)</span><br><span class="line"></span><br><span class="line">julia&gt; bar = foo(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#1 (generic function with 1 method)</span></span><br><span class="line"></span><br><span class="line">julia&gt; bar()</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="Blocks"><a href="#Blocks" class="headerlink" title="Blocks"></a>Blocks</h3><p>块是一种将许多语句分组的方法。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">🐢 = Turtle()</span><br><span class="line"><span class="meta">@svg</span> <span class="keyword">begin</span></span><br><span class="line">    forward(🐢, <span class="number">100</span>)</span><br><span class="line">    turn(🐢, -<span class="number">90</span>)</span><br><span class="line">    forward(🐢, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="let-Blocks"><a href="#let-Blocks" class="headerlink" title="let Blocks"></a><code>let</code> Blocks</h4><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; x, y, z = -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">julia&gt; <span class="keyword">let</span> x = <span class="number">1</span>, z</span><br><span class="line">           <span class="meta">@show</span> x y z;</span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">y = -<span class="number">1</span></span><br><span class="line">ERROR: <span class="built_in">UndefVarError</span>: z not defined</span><br><span class="line">julia&gt; <span class="meta">@show</span> x y z;</span><br><span class="line">x = -<span class="number">1</span></span><br><span class="line">y = -<span class="number">1</span></span><br><span class="line">z = -<span class="number">1</span></span><br></pre></td></tr></table></figure><p>在第一个<code>let</code>中，<code>@show</code>打印局部变量<code>x,z</code>，打印全局变量<code>y</code>，全局变量<code>x,y,z</code>并未受影响。</p><h4 id="do-Blocks"><a href="#do-Blocks" class="headerlink" title="do Blocks"></a><code>do</code> Blocks</h4><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; data = <span class="string">&quot;This here&#x27;s the wattle,\nthe emblem of our land.\n&quot;</span></span><br><span class="line"><span class="string">&quot;This here&#x27;s the wattle,\nthe emblem of our land.\n&quot;</span></span><br><span class="line">julia&gt; open(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">do</span> fout</span><br><span class="line">           write(fout, data)</span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line"><span class="number">48</span></span><br></pre></td></tr></table></figure><p>这里<code>fout</code>为文件流，我们不再需要手动关闭<code>fout</code>。</p><p>这在函数上等价于</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; f = fout -&gt; <span class="keyword">begin</span></span><br><span class="line">           write(fout, data)</span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line"><span class="comment">#3 (generic function with 1 method)</span></span><br><span class="line">julia&gt; open(f, <span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"><span class="number">48</span></span><br></pre></td></tr></table></figure><p>匿名函数常被用为<code>open</code>的参数：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> open(f::<span class="built_in">Function</span>, args...)</span><br><span class="line">    io = open(args...)</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">        f(io)</span><br><span class="line">    <span class="keyword">finally</span></span><br><span class="line">        close(io)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>do块可以从它的封闭作用域捕获变量。例如，上面<code>open…do</code>例子中的变量<code>data</code>是从外部作用域捕获的。</p><h3 id="Control-Flow"><a href="#Control-Flow" class="headerlink" title="Control Flow"></a>Control Flow</h3><h4 id="Ternary-Operator"><a href="#Ternary-Operator" class="headerlink" title="Ternary Operator"></a>Ternary Operator</h4><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; a = <span class="number">150</span></span><br><span class="line"><span class="number">150</span></span><br><span class="line">julia&gt; a % <span class="number">2</span> == <span class="number">0</span> ? println(<span class="string">&quot;even&quot;</span>) : println(<span class="string">&quot;odd&quot;</span>)</span><br><span class="line">even</span><br></pre></td></tr></table></figure><h4 id="Short-Circuit-Evaluation"><a href="#Short-Circuit-Evaluation" class="headerlink" title="Short-Circuit Evaluation"></a>Short-Circuit Evaluation</h4><p><code>&amp;&amp;</code>和<code>||</code>是短路运算符，当前一个表达式的值可以确定结果是另一个就不需要计算了。</p><h4 id="Tasks-aka-Coroutines"><a href="#Tasks-aka-Coroutines" class="headerlink" title="Tasks (aka Coroutines)"></a>Tasks (aka Coroutines)</h4><p>任务是一种能够传递协同控制而不返回的控制结构。在Julia中，任务可以作为第一个参数为<code>Channel</code>对象的函数来实现。通道用于将值从函数传递给被调用方。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> fib(c::<span class="built_in">Channel</span>)</span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    put!(c, a)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line">        put!(c, b)</span><br><span class="line">        (a, b) = (b, a+b)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>take!</code>可以从通道中取值：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; fib_gen = <span class="built_in">Channel</span>(fib);</span><br><span class="line"></span><br><span class="line">julia&gt; take!(fib_gen)</span><br><span class="line"><span class="number">0</span></span><br><span class="line">julia&gt; take!(fib_gen)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">julia&gt; take!(fib_gen)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">julia&gt; take!(fib_gen)</span><br><span class="line"><span class="number">2</span></span><br><span class="line">julia&gt; take!(fib_gen)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>通道也可以作为迭代对象</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; <span class="keyword">for</span> val <span class="keyword">in</span> <span class="built_in">Channel</span>(fib)</span><br><span class="line">           print(val, <span class="string">&quot; &quot;</span>)</span><br><span class="line">           val &gt; <span class="number">20</span> &amp;&amp; <span class="keyword">break</span></span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span></span><br></pre></td></tr></table></figure><h3 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h3><h4 id="Primitive-Types"><a href="#Primitive-Types" class="headerlink" title="Primitive Types"></a>Primitive Types</h4><p>在<code>Julia</code>中，你可以定义自己的原始类型，标准原始类型也用同样的方法定义：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">primitive type</span> <span class="built_in">Float64</span> &lt;: <span class="built_in">AbstractFloat</span> <span class="number">64</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">primitive type</span> <span class="built_in">Bool</span> &lt;: <span class="built_in">Integer</span> <span class="number">8</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">primitive type</span> <span class="built_in">Char</span> &lt;: <span class="built_in">AbstractChar</span> <span class="number">32</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">primitive type</span> <span class="built_in">Int64</span> &lt;: <span class="built_in">Signed</span> <span class="number">64</span> <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>创建<code>Byte</code>原始类型和其构造函数：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; <span class="keyword">primitive type</span> Byte <span class="number">8</span> <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">julia&gt; Byte(val::<span class="built_in">UInt8</span>) = reinterpret(Byte, val)</span><br><span class="line">Byte</span><br><span class="line">julia&gt; b = Byte(<span class="number">0x01</span>)</span><br><span class="line">Byte(<span class="number">0x01</span>)</span><br></pre></td></tr></table></figure><p><code>reinterpret</code>函数用于存储一个8位的无符号整数的位到字节中。</p><h4 id="Parametric-Types"><a href="#Parametric-Types" class="headerlink" title="Parametric Types"></a>Parametric Types</h4><p><code>Julia</code>的类型是参数的，说明其类型可以带参数。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Point&#123;T&lt;:<span class="built_in">Real</span>&#125;</span><br><span class="line">    x::T</span><br><span class="line">    y::T</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Type-Unions"><a href="#Type-Unions" class="headerlink" title="Type Unions"></a>Type Unions</h4><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; IntOrString = <span class="built_in">Union</span>&#123;<span class="built_in">Int64</span>, <span class="built_in">String</span>&#125;</span><br><span class="line"><span class="built_in">Union</span>&#123;<span class="built_in">Int64</span>, <span class="built_in">String</span>&#125;</span><br><span class="line">julia&gt; <span class="number">150</span> :: IntOrString</span><br><span class="line"><span class="number">150</span></span><br><span class="line">julia&gt; <span class="string">&quot;Julia&quot;</span> :: IntOrString</span><br><span class="line"><span class="string">&quot;Julia&quot;</span></span><br></pre></td></tr></table></figure><p>类型联合在大多数计算机语言中是对类型进行推理的内部构造。然而，<code>Julia</code>向用户公开了该特性，因为当类型联合只有少量类型时，可以生成有效的代码。这个特性为<code>Julia</code>程序员控制调度提供了极大的灵活性。</p><h3 id="Methods-1"><a href="#Methods-1" class="headerlink" title="Methods"></a>Methods</h3><h4 id="Parametric-Methods"><a href="#Parametric-Methods" class="headerlink" title="Parametric Methods"></a>Parametric Methods</h4><p>方法定义也可以含有参数的类型参数：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; isintpoint(p::Point&#123;T&#125;) <span class="keyword">where</span> &#123;T&#125; = (T === <span class="built_in">Int64</span>)</span><br><span class="line">isintpoint (generic <span class="keyword">function</span> with <span class="number">1</span> method)</span><br><span class="line">julia&gt; p = Point(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">Point&#123;<span class="built_in">Int64</span>&#125;(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">julia&gt; isintpoint(p)</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="Function-like-Objects"><a href="#Function-like-Objects" class="headerlink" title="Function-like Objects"></a>Function-like Objects</h4><p><code>Julia</code>中的任何对象都可以被调用，这种可以被调用的对象被称为<code>functors</code>：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Polynomial&#123;R&#125;</span><br><span class="line">    coeff::<span class="built_in">Vector</span>&#123;R&#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> (p::Polynomial)(x)</span><br><span class="line">    val = p.coeff[<span class="keyword">end</span>]</span><br><span class="line">    <span class="keyword">for</span> coeff <span class="keyword">in</span> p.coeff[<span class="keyword">end</span>-<span class="number">1</span>:-<span class="number">1</span>:<span class="number">1</span>]</span><br><span class="line">        val = val * x + coeff</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    val</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>去计算多项式，我们简单调用它：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; p = Polynomial([<span class="number">1</span>,<span class="number">10</span>,<span class="number">100</span>])</span><br><span class="line">Polynomial&#123;<span class="built_in">Int64</span>&#125;([<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>])</span><br><span class="line">julia&gt; p(<span class="number">3</span>)</span><br><span class="line"><span class="number">931</span></span><br></pre></td></tr></table></figure><h3 id="Constructors-1"><a href="#Constructors-1" class="headerlink" title="Constructors"></a>Constructors</h3><p>参数类型可以显式或隐式构造</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; Point(<span class="number">1</span>,<span class="number">2</span>)         <span class="comment"># implicit T</span></span><br><span class="line">Point&#123;<span class="built_in">Int64</span>&#125;(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">julia&gt; Point&#123;<span class="built_in">Int64</span>&#125;(<span class="number">1</span>, <span class="number">2</span>) <span class="comment"># explicit T</span></span><br><span class="line">Point&#123;<span class="built_in">Int64</span>&#125;(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">julia&gt; Point(<span class="number">1</span>,<span class="number">2.5</span>)       <span class="comment"># implicit T</span></span><br><span class="line">ERROR: <span class="built_in">MethodError</span>: no method matching Point(::<span class="built_in">Int64</span>, ::<span class="built_in">Float64</span>)</span><br></pre></td></tr></table></figure><p>为每个<code>T</code>生成默认的内部和外部构造函数：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Point&#123;T&lt;:<span class="built_in">Real</span>&#125;</span><br><span class="line">    x::T</span><br><span class="line">    y::T</span><br><span class="line">    Point&#123;T&#125;(x,y) <span class="keyword">where</span> &#123;T&lt;:<span class="built_in">Real</span>&#125; = new(x,y)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Point(x::T, y::T) <span class="keyword">where</span> &#123;T&lt;:<span class="built_in">Real</span>&#125; = Point&#123;T&#125;(x,y);</span><br></pre></td></tr></table></figure><p>并且每一个<code>x</code>和<code>y</code>的类型都相同。</p><p>当类型不同时可以：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Point(x::<span class="built_in">Real</span>, y::<span class="built_in">Real</span>) = Point(promote(x,y)...);</span><br></pre></td></tr></table></figure><h3 id="Conversion-and-Promotion"><a href="#Conversion-and-Promotion" class="headerlink" title="Conversion and Promotion"></a>Conversion and Promotion</h3><h4 id="Conversion"><a href="#Conversion" class="headerlink" title="Conversion"></a>Conversion</h4><p>数据可以从一个类型转为另一个类型：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; x = <span class="number">12</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line">julia&gt; typeof(x)</span><br><span class="line"><span class="built_in">Int64</span></span><br><span class="line">julia&gt; convert(<span class="built_in">UInt8</span>, x)</span><br><span class="line"><span class="number">0x0c</span></span><br><span class="line">julia&gt; typeof(ans)</span><br><span class="line"><span class="built_in">UInt8</span></span><br></pre></td></tr></table></figure><p>我们可以增加自己的<code>convert</code>方法：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; Base.convert(::<span class="built_in">Type</span>&#123;Point&#123;T&#125;&#125;, x::<span class="built_in">Array</span>&#123;T, <span class="number">1</span>&#125;) <span class="keyword">where</span> &#123;T&lt;:<span class="built_in">Real</span>&#125; = Point(x...)</span><br><span class="line"></span><br><span class="line">julia&gt; convert(Point&#123;<span class="built_in">Int64</span>&#125;, [<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">Point&#123;<span class="built_in">Int64</span>&#125;(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h4 id="Promotion"><a href="#Promotion" class="headerlink" title="Promotion"></a>Promotion</h4><p><code>Promotion</code>是将混合类型的值转换为单一公共类型：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; promote(<span class="number">1</span>, <span class="number">2.5</span>, <span class="number">3</span>)</span><br><span class="line">(<span class="number">1.0</span>, <span class="number">2.5</span>, <span class="number">3.0</span>)</span><br></pre></td></tr></table></figure><h3 id="Metaprogramming"><a href="#Metaprogramming" class="headerlink" title="Metaprogramming"></a>Metaprogramming</h3><p><code>Julia</code>代码可以表示为语言本身的数据结构。这允许程序转换和生成自己的代码。</p><h4 id="Expressions"><a href="#Expressions" class="headerlink" title="Expressions"></a>Expressions</h4><p>每一个<code>Julia</code>程序开始都为一个字符串：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; prog = <span class="string">&quot;1 + 2&quot;</span></span><br><span class="line"><span class="string">&quot;1 + 2&quot;</span></span><br></pre></td></tr></table></figure><p>下一步是将每个字符串解析为一个名为表达式的对象，表达式由<code>Julia</code>类型<code>Expr</code>表示：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; ex = Meta.parse(prog)</span><br><span class="line">:(<span class="number">1</span> + <span class="number">2</span>)</span><br><span class="line">julia&gt; typeof(ex)</span><br><span class="line"><span class="built_in">Expr</span></span><br><span class="line">julia&gt; dump(ex)</span><br><span class="line"><span class="built_in">Expr</span></span><br><span class="line">  head: <span class="built_in">Symbol</span> call</span><br><span class="line">  args: <span class="built_in">Array</span>&#123;<span class="built_in">Any</span>&#125;((<span class="number">3</span>,))</span><br><span class="line">    <span class="number">1</span>: <span class="built_in">Symbol</span> +</span><br><span class="line">    <span class="number">2</span>: <span class="built_in">Int64</span> <span class="number">1</span></span><br><span class="line">    <span class="number">3</span>: <span class="built_in">Int64</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><code>dump</code>函数显示带有注释的<code>expr</code>对象。</p><p>表达式可以由<code>:()</code>或<code>quote</code>块构造：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; ex = <span class="keyword">quote</span></span><br><span class="line">           <span class="number">1</span> + <span class="number">2</span></span><br><span class="line">       <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h4 id="eval"><a href="#eval" class="headerlink" title="eval"></a><code>eval</code></h4><p>可以用<code>eval</code>函数计算表达式的值：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; eval(ex)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="Macros"><a href="#Macros" class="headerlink" title="Macros"></a>Macros</h4><p>宏可以包括程序中生成的代码。宏将<code>Expr</code>对象的元组直接映射到编译后的表达式：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">macro</span> containervariable(container, element)</span><br><span class="line">    <span class="keyword">return</span> esc(:($(<span class="built_in">Symbol</span>(container,element)) = $container[$element]))</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="Generated-Functions"><a href="#Generated-Functions" class="headerlink" title="Generated Functions"></a>Generated Functions</h4><p>宏<code>@generated</code>根据参数的类型为方法创建专门的代码：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@generated</span> <span class="keyword">function</span> square(x)</span><br><span class="line">    println(x)</span><br><span class="line">    :(x * x)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">julia&gt; x = square(<span class="number">2</span>); <span class="comment"># note: output is from println() statement in the body</span></span><br><span class="line"><span class="built_in">Int64</span></span><br><span class="line">julia&gt; x              <span class="comment"># now we print x</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">julia&gt; y = square(<span class="string">&quot;spam&quot;</span>);</span><br><span class="line"><span class="built_in">String</span></span><br><span class="line">julia&gt; y</span><br><span class="line"><span class="string">&quot;spamspam&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Missing-Values"><a href="#Missing-Values" class="headerlink" title="Missing Values"></a>Missing Values</h3><p>缺失的值可以通过<code>missing</code>对象表示，该对象是<code>Missing</code>类型的单例实例：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; a = [<span class="number">1</span>, <span class="literal">missing</span>]</span><br><span class="line"><span class="number">2</span>-element <span class="built_in">Array</span>&#123;<span class="built_in">Union</span>&#123;<span class="built_in">Missing</span>, <span class="built_in">Int64</span>&#125;,<span class="number">1</span>&#125;:</span><br><span class="line"> <span class="number">1</span></span><br><span class="line">  <span class="literal">missing</span></span><br><span class="line"></span><br><span class="line">julia&gt; sum(a)</span><br><span class="line"><span class="literal">missing</span></span><br><span class="line"></span><br><span class="line">julia&gt; sum(skipmissing([<span class="number">1</span>, <span class="literal">missing</span>]))</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="The-Goodies-Base-and-Standard-Library"><a href="#The-Goodies-Base-and-Standard-Library" class="headerlink" title="The Goodies: Base and Standard Library"></a>The Goodies: Base and Standard Library</h2><h3 id="Measuring-Performance"><a href="#Measuring-Performance" class="headerlink" title="Measuring Performance"></a>Measuring Performance</h3><p>可以使用宏<code>@time</code>来比较程序运行的快慢。</p><h3 id="Collections-and-Data-Structures"><a href="#Collections-and-Data-Structures" class="headerlink" title="Collections and Data Structures"></a>Collections and Data Structures</h3><p>Julia提供了另一种内置类型，称为set，它的行为类似于没有值的字典键的集合。集合提供了计算常见集合操作的函数和运算符。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> subtract(d1, d2)</span><br><span class="line">    res = <span class="built_in">Dict</span>()</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> keys(d1)</span><br><span class="line">        <span class="keyword">if</span> key ∉ keys(d2)</span><br><span class="line">            res[key] = <span class="literal">nothing</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    res</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> subtract(d1, d2)</span><br><span class="line">    setdiff(d1, d2)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> hasduplicates(t)</span><br><span class="line">    d = <span class="built_in">Dict</span>()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> t</span><br><span class="line">        <span class="keyword">if</span> x ∈ d</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        d[x] = <span class="literal">nothing</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="literal">false</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> hasduplicates(t)</span><br><span class="line">    length(<span class="built_in">Set</span>(t)) &lt; length(t)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> usesonly(word, available)</span><br><span class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> word</span><br><span class="line">        <span class="keyword">if</span> letter ∉ available</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> usesonly(word, available)</span><br><span class="line">    <span class="built_in">Set</span>(word) ⊆ <span class="built_in">Set</span>(available)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h3><p><code>Julia</code>指定了一些非正式的接口来定义行为，例如，具有特定目标的方法。当您为某个类型扩展这样的方法时，可以使用该类型的对象来构建这些行为。</p><p>例如斐波那契：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Fibonacci&#123;T&lt;:<span class="built_in">Real</span>&#125; <span class="keyword">end</span></span><br><span class="line">Fibonacci(d::<span class="built_in">DataType</span>) = d&lt;:<span class="built_in">Real</span> ? Fibonacci&#123;d&#125;() : error(<span class="string">&quot;No Real type!&quot;</span>)</span><br><span class="line"></span><br><span class="line">Base.iterate(::Fibonacci&#123;T&#125;) <span class="keyword">where</span> &#123;T&lt;:<span class="built_in">Real</span>&#125; = (zero(T), (one(T), one(T)))</span><br><span class="line">Base.iterate(::Fibonacci&#123;T&#125;, state::<span class="built_in">Tuple</span>&#123;T, T&#125;) <span class="keyword">where</span> &#123;T&lt;:<span class="built_in">Real</span>&#125; = (state[<span class="number">1</span>], (state[<span class="number">2</span>], state[<span class="number">1</span>] + state[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure><p>首先定义了结构和构造方法，之后定义了初始循环，返回值第一个为$0$，之后一个元组为<code>state</code>用于下面的下一次循环。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; <span class="keyword">for</span> e <span class="keyword">in</span> Fibonacci(<span class="built_in">Int64</span>)</span><br><span class="line">           e &gt; <span class="number">100</span> &amp;&amp; <span class="keyword">break</span></span><br><span class="line">           print(e, <span class="string">&quot; &quot;</span>)</span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span> <span class="number">55</span> <span class="number">89</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Farticle%2F0641bd5a05ae260e3167b7a6b6f389143abb0416.jpg&amp;refer=http%3A%2F%2Fi0.hdslb.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1659401858&amp;t=1004217d7de1a7d354b99be904052734&quot; style=&quot;zoom: 100%;&quot; /&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;书籍网址：&lt;a href=&quot;https://benlauwens.github.io/ThinkJulia.jl/latest/book.html&quot;&gt;https://benlauwens.github.io/ThinkJulia.jl/latest/book.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="书籍阅读" scheme="https://www.hfcouc.work/categories/%E4%B9%A6%E7%B1%8D%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="Julia" scheme="https://www.hfcouc.work/tags/Julia/"/>
    
    <category term="编程" scheme="https://www.hfcouc.work/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>书籍Thinking Julia前十章阅读笔记</title>
    <link href="https://www.hfcouc.work/2022/07/01/thinkjulia/"/>
    <id>https://www.hfcouc.work/2022/07/01/thinkjulia/</id>
    <published>2022-07-01T10:19:26.000Z</published>
    <updated>2022-07-03T01:31:43.197Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p align="center">    <img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimglf6.lf127.net%2Fimg%2FanBSb2NqdEc5dTlseXpNTWxpY0RWQ2NwUlAyVmFEa2lFSVo0TVM4WXNwSndDMUdvN3crMS9nPT0.jpg%3FimageView%26thumbnail%3D2160x0%26quality%3D90%26interlace%3D1%26type%3Djpg&refer=http%3A%2F%2Fimglf6.lf127.net&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1659263087&t=d2faeee051aa3c102a86e173d74306ad" style="zoom: 100%;" /></p><blockquote><p>书籍网址：<a href="https://benlauwens.github.io/ThinkJulia.jl/latest/book.html">https://benlauwens.github.io/ThinkJulia.jl/latest/book.html</a></p></blockquote><span id="more"></span><h2 id="The-Way-of-the-program"><a href="#The-Way-of-the-program" class="headerlink" title="The Way of the program"></a>The Way of the program</h2><h3 id="What-is-a-Program"><a href="#What-is-a-Program" class="headerlink" title="What is a Program?"></a>What is a Program?</h3><p>一个程序应该包括以下几部分：</p><ul><li>输入：从键盘、文件、网络或者其他设备中获取数据</li><li>输出：将数据展示在屏幕上、或将其存储在文件中、将其发送到网络上等等</li><li>数学：执行基本的数学运算，如加法乘法等</li><li>条件执行：查看特定的条件并且运行适当的代码</li><li>重复：重复地做一些动作，通常有一些变化</li></ul><h3 id="The-First-Program"><a href="#The-First-Program" class="headerlink" title="The First Program"></a>The First Program</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure><h3 id="Arithmetic-Operators"><a href="#Arithmetic-Operators" class="headerlink" title="Arithmetic Operators"></a>Arithmetic Operators</h3><p>符号<code>+</code>，<code>-</code>，<code>*</code>，<code>/</code>，<code>^</code>分别表示加法、减法、乘法、除法、幂运算。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; <span class="number">40</span> + <span class="number">2</span>         </span><br><span class="line"><span class="number">42</span>                    </span><br><span class="line">                      </span><br><span class="line">julia&gt; <span class="number">43</span> - <span class="number">1</span>         </span><br><span class="line"><span class="number">42</span>                    </span><br><span class="line">                      </span><br><span class="line">julia&gt; <span class="number">6</span> * <span class="number">7</span>          </span><br><span class="line"><span class="number">42</span>                    </span><br><span class="line">                      </span><br><span class="line">julia&gt; <span class="number">84</span> / <span class="number">2</span>         </span><br><span class="line"><span class="number">42.0</span>                  </span><br><span class="line">                      </span><br><span class="line">julia&gt; <span class="number">6</span> ^ <span class="number">2</span> + <span class="number">6</span>      </span><br><span class="line"><span class="number">42</span>                    </span><br></pre></td></tr></table></figure><blockquote><p>注意在除法中我们得到是$42.0$而不是$42$，后面我们会解释原因。</p></blockquote><h3 id="Values-and-Types"><a href="#Values-and-Types" class="headerlink" title="Values and Types"></a>Values and Types</h3><p>我们可以使用<code>typeof</code>函数来获取类型。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; typeof(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">Int64</span></span><br><span class="line"></span><br><span class="line">julia&gt; typeof(<span class="number">42.0</span>)</span><br><span class="line"><span class="built_in">Float64</span></span><br><span class="line"></span><br><span class="line">julia&gt; typeof(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line"><span class="built_in">String</span></span><br></pre></td></tr></table></figure><h2 id="Variables-Expressions-and-Statements"><a href="#Variables-Expressions-and-Statements" class="headerlink" title="Variables, Expressions and Statements"></a>Variables, Expressions and Statements</h2><h3 id="Assignment-Statements"><a href="#Assignment-Statements" class="headerlink" title="Assignment Statements"></a>Assignment Statements</h3><p>使用<code>=</code>对变量进行赋值。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; n = <span class="number">17</span></span><br><span class="line"><span class="number">17</span></span><br></pre></td></tr></table></figure><h3 id="Variable-Names"><a href="#Variable-Names" class="headerlink" title="Variable Names"></a>Variable Names</h3><p>命名可以采用字母、数字和<code>_</code>，但是数字不能在开头，也不能使用关键字。</p><p>下面为<code>Julia</code>的关键字：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract type</span>    <span class="keyword">baremodule</span>   <span class="keyword">begin</span>      <span class="keyword">break</span>       <span class="keyword">catch</span></span><br><span class="line"><span class="keyword">const</span>            <span class="keyword">continue</span>     <span class="keyword">do</span>         <span class="keyword">else</span>        <span class="keyword">elseif</span></span><br><span class="line"><span class="keyword">end</span>              <span class="keyword">export</span>       <span class="keyword">finally</span>    <span class="keyword">for</span>         <span class="keyword">function</span></span><br><span class="line"><span class="keyword">global</span>           <span class="keyword">if</span>           <span class="keyword">import</span>     importall   <span class="keyword">in</span></span><br><span class="line"><span class="keyword">let</span>              <span class="keyword">local</span>        <span class="keyword">macro</span>      <span class="keyword">module</span>      <span class="keyword">mutable struct</span></span><br><span class="line"><span class="keyword">primitive type</span>   <span class="keyword">quote</span>        <span class="keyword">return</span>     <span class="keyword">try</span>         <span class="keyword">using</span></span><br><span class="line"><span class="keyword">struct</span>           <span class="keyword">where</span>        <span class="keyword">while</span></span><br></pre></td></tr></table></figure><h3 id="Expressions-and-Statements"><a href="#Expressions-and-Statements" class="headerlink" title="Expressions and Statements"></a>Expressions and Statements</h3><p>表达式是值（values）、变量（variables）和符号（operators）的组合。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; <span class="number">42</span></span><br><span class="line"><span class="number">42</span></span><br><span class="line"></span><br><span class="line">julia&gt; n</span><br><span class="line"><span class="number">17</span></span><br><span class="line"></span><br><span class="line">julia&gt; n + <span class="number">25</span></span><br><span class="line"><span class="number">42</span></span><br></pre></td></tr></table></figure><p>语句是具有效果的代码单位，例如创建变量或显示值。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; n = <span class="number">17</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"></span><br><span class="line">julia&gt; println(n)</span><br><span class="line"><span class="number">17</span></span><br></pre></td></tr></table></figure><h3 id="Operator-Precedence"><a href="#Operator-Precedence" class="headerlink" title="Operator Precedence"></a>Operator Precedence</h3><p>括号优先级最高，其次是幂，之后是乘除法、加减法优先级最低。</p><h3 id="String-Operations"><a href="#String-Operations" class="headerlink" title="String Operations"></a>String Operations</h3><p><code>*</code>表示字符串拼接，<code>^</code>表示字符串重复。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; first_str = <span class="string">&quot;throat&quot;</span></span><br><span class="line"><span class="string">&quot;throat&quot;</span></span><br><span class="line"></span><br><span class="line">julia&gt; second_str = <span class="string">&quot;warbler&quot;</span></span><br><span class="line"><span class="string">&quot;warbler&quot;</span></span><br><span class="line"></span><br><span class="line">julia&gt; first_str * second_str</span><br><span class="line"><span class="string">&quot;throatwarbler&quot;</span></span><br><span class="line"></span><br><span class="line">julia&gt; <span class="string">&quot;Spam&quot;</span>^<span class="number">3</span></span><br><span class="line"><span class="string">&quot;SpamSpamSpam&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h3><p>注释用<code>#</code>。</p><h3 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h3><p><code>Julia</code>中存在三种错误。</p><ul><li>语法错误(Syntax error)：语法指的是程序的结构和关于该结构的规则。如括号少一边。</li><li>运行时错误(Runtime error)：指的是程序运行时出错，也被称为异常。</li><li>语义错误(Semantic error)：这种错误程序会运行，但是得到的结果不是我们想要的。</li></ul><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><h3 id="Function-Calls"><a href="#Function-Calls" class="headerlink" title="Function Calls"></a>Function Calls</h3><p>我们之前已经看到一个函数调用的例子：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure><p><code>Println()</code>是函数的名字，括号里面是函数的参数。</p><p><code>Julia</code>提供一些类型转换的函数：</p><p><code>parse</code>函数将字符串类型转为任何数字(number)类型</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; parse(<span class="built_in">Int64</span>, <span class="string">&quot;32&quot;</span>)</span><br><span class="line"><span class="number">32</span></span><br><span class="line"></span><br><span class="line">julia&gt; parse(<span class="built_in">Float64</span>, <span class="string">&quot;3.14159&quot;</span>)</span><br><span class="line"><span class="number">3.14159</span></span><br><span class="line"></span><br><span class="line">julia&gt; parse(<span class="built_in">Int64</span>, <span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">ERROR: <span class="built_in">ArgumentError</span>: invalid base <span class="number">10</span> digit <span class="string">&#x27;H&#x27;</span> <span class="keyword">in</span> <span class="string">&quot;Hello&quot;</span></span><br></pre></td></tr></table></figure><p><code>trunc</code>可以将字符串截断为整数：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; trunc(<span class="built_in">Int64</span>, <span class="number">3.9999</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line">julia&gt; trunc(<span class="built_in">Int64</span>, -<span class="number">2.3</span>)</span><br><span class="line">-<span class="number">2</span></span><br></pre></td></tr></table></figure><p><code>float</code>将整数转为浮点数：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; float(<span class="number">24</span>)</span><br><span class="line"><span class="number">24.0</span></span><br></pre></td></tr></table></figure><p><code>string</code>将参数转换为字符串：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; string(<span class="number">32</span>)</span><br><span class="line"><span class="string">&quot;32&quot;</span></span><br><span class="line"></span><br><span class="line">julia&gt; string(<span class="number">32.2</span>)</span><br><span class="line"><span class="string">&quot;32.2&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Adding-New-Functions"><a href="#Adding-New-Functions" class="headerlink" title="Adding New Functions"></a>Adding New Functions</h3><p>我们使用<code>function</code>定义函数，以<code>end</code>结束。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> printlyrics()</span><br><span class="line">    println(<span class="string">&quot;I&#x27;m a lumberjack, and I&#x27;m okay.&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;I sleep all night and I work all day.&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>我们也可以在函数中调用函数：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> repeatlyrics()</span><br><span class="line">    printlyrics()</span><br><span class="line">    printlyrics()</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p> 函数在运行前必须被定义。</p></blockquote><h3 id="Parameters-and-Arguments"><a href="#Parameters-and-Arguments" class="headerlink" title="Parameters and Arguments"></a>Parameters and Arguments</h3><p>下面我们定义一个含有参数的函数：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> printtwice(bruce)</span><br><span class="line">    println(bruce)</span><br><span class="line">    println(bruce)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>传入的参数可以是值(value)、表达式和变量。</p><h3 id="Variables-and-Parameters-Are-Local"><a href="#Variables-and-Parameters-Are-Local" class="headerlink" title="Variables and Parameters Are Local"></a>Variables and Parameters Are Local</h3><p>函数的变量和参数是局部的。</p><h3 id="Fruitful-Functions-and-Void-Functions"><a href="#Fruitful-Functions-and-Void-Functions" class="headerlink" title="Fruitful Functions and Void Functions"></a>Fruitful Functions and Void Functions</h3><p>有返回值的函数称为Fruitful Functions，没有返回值的函数称为Void Functions。没有返回值的函数的返回值为<code>nothing</code>，我们只能使用<code>show</code>函数打印。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; result = printtwice(<span class="string">&quot;Bing&quot;</span>)</span><br><span class="line">Bing</span><br><span class="line">Bing</span><br><span class="line">julia&gt; show(result)</span><br><span class="line"><span class="literal">nothing</span></span><br></pre></td></tr></table></figure><p><code>nothing</code>的类型为<code>Nothing</code>：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; typeof(<span class="literal">nothing</span>)</span><br><span class="line"><span class="built_in">Nothing</span></span><br></pre></td></tr></table></figure><h2 id="Case-Study-Interface-Design"><a href="#Case-Study-Interface-Design" class="headerlink" title="Case Study: Interface Design"></a>Case Study: Interface Design</h2><h3 id="Turtles"><a href="#Turtles" class="headerlink" title="Turtles"></a>Turtles</h3><p>我们使用下列命令下载所需要的包：</p><p>首先在<code>REPL</code>下按<code>]</code>键调出包管理：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(v1<span class="number">.0</span>) pkg&gt; add https://github.com/BenLauwens/ThinkJulia.jl</span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; <span class="keyword">using</span> ThinkJulia</span><br><span class="line"></span><br><span class="line">julia&gt; 🐢 = Turtle()</span><br><span class="line">Luxor.Turtle(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="literal">true</span>, <span class="number">0.0</span>, (<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>))</span><br></pre></td></tr></table></figure><blockquote><p> 输入：<code>🐢</code> (<strong><code>\:turtle: TAB</code></strong>)。</p></blockquote><p>一旦创建了一个乌龟，可以调用函数来让他移动。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@svg</span> <span class="keyword">begin</span></span><br><span class="line">    forward(🐢, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>@svg</code>关键字运行一个绘制SVG图片的宏。宏是Julia的一个重要但高级的特性。</p><p>为了绘制直角，修改宏</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">🐢 = Turtle()</span><br><span class="line"><span class="meta">@svg</span> <span class="keyword">begin</span></span><br><span class="line">    forward(🐢, <span class="number">100</span>)</span><br><span class="line">    turn(🐢, -<span class="number">90</span>)</span><br><span class="line">    forward(🐢, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Simple-Repetition"><a href="#Simple-Repetition" class="headerlink" title="Simple Repetition"></a>Simple Repetition</h3><p>我们使用<code>for</code>循环来绘制一个正方形：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">🐢 = Turtle()</span><br><span class="line"><span class="meta">@svg</span> <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>:<span class="number">4</span></span><br><span class="line">        forward(🐢, <span class="number">100</span>)</span><br><span class="line">        turn(🐢, -<span class="number">90</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="Conditionals-and-Recursion"><a href="#Conditionals-and-Recursion" class="headerlink" title="Conditionals and Recursion"></a>Conditionals and Recursion</h2><h3 id="Floor-Division-and-Modulus"><a href="#Floor-Division-and-Modulus" class="headerlink" title="Floor Division and Modulus"></a>Floor Division and Modulus</h3><p><code>floor division</code>符号<code>÷</code> (<strong><code>\div TAB</code></strong>)，两个数字相除后得到整数。取余符号<code>%</code>得到余数。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; minutes = <span class="number">105</span>            </span><br><span class="line"><span class="number">105</span>                             </span><br><span class="line">                                </span><br><span class="line">julia&gt; hours = minutes÷<span class="number">60</span>       </span><br><span class="line"><span class="number">1</span>                               </span><br><span class="line">                                </span><br><span class="line">julia&gt; remainder = minutes % <span class="number">60</span> </span><br><span class="line"><span class="number">45</span>                              </span><br></pre></td></tr></table></figure><h3 id="Boolean-Expressions"><a href="#Boolean-Expressions" class="headerlink" title="Boolean Expressions"></a>Boolean Expressions</h3><p>布尔表达式为结果为真或假的表达式。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x == y               <span class="comment"># x is equal to y</span></span><br><span class="line">x != y               <span class="comment"># x is not equal to y</span></span><br><span class="line">x ≠ y                <span class="comment"># (\ne TAB)</span></span><br><span class="line">x &gt; y                <span class="comment"># x is greater than y</span></span><br><span class="line">x &lt; y                <span class="comment"># x is less than y</span></span><br><span class="line">x &gt;= y               <span class="comment"># x is greater than or equal to y</span></span><br><span class="line">x ≥ y                <span class="comment"># (\ge TAB)</span></span><br><span class="line">x &lt;= y               <span class="comment"># x is less than or equal to y</span></span><br><span class="line">x ≤ y                <span class="comment"># (\le TAB)</span></span><br></pre></td></tr></table></figure><h3 id="Logical-Operators"><a href="#Logical-Operators" class="headerlink" title="Logical Operators"></a>Logical Operators</h3><p>与<code>&amp;&amp;</code></p><p>或<code>||</code></p><p>非<code>!</code></p><p>其中<code>&amp;&amp;</code>的优先级高于<code>||</code>。</p><h3 id="Conditional-Execution"><a href="#Conditional-Execution" class="headerlink" title="Conditional Execution"></a>Conditional Execution</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x &gt; <span class="number">0</span></span><br><span class="line">    println(<span class="string">&quot;x is positive&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Alternative-Execution"><a href="#Alternative-Execution" class="headerlink" title="Alternative Execution"></a>Alternative Execution</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">    println(<span class="string">&quot;x is even&quot;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    println(<span class="string">&quot;x is odd&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Chained-Conditionals"><a href="#Chained-Conditionals" class="headerlink" title="Chained Conditionals"></a>Chained Conditionals</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x &lt; y</span><br><span class="line">    println(<span class="string">&quot;x is less than y&quot;</span>)</span><br><span class="line"><span class="keyword">elseif</span> x &gt; y</span><br><span class="line">    println(<span class="string">&quot;x is greater than y&quot;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    println(<span class="string">&quot;x and y are equal&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Nested-Conditionals"><a href="#Nested-Conditionals" class="headerlink" title="Nested Conditionals"></a>Nested Conditionals</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x == y</span><br><span class="line">    println(<span class="string">&quot;x and y are equal&quot;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; y</span><br><span class="line">        println(<span class="string">&quot;x is less than y&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        println(<span class="string">&quot;x is greater than y&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">0</span> &lt; x &lt; <span class="number">10</span></span><br><span class="line">    println(<span class="string">&quot;x is a positive single-digit number.&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h3><p>函数自己调用自己被称为递归。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> printn(s, n)</span><br><span class="line">    <span class="keyword">if</span> n ≤ <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    println(s)</span><br><span class="line">    printn(s, n-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Keyboard-Input"><a href="#Keyboard-Input" class="headerlink" title="Keyboard Input"></a>Keyboard Input</h3><p><code>Julia</code>提供内建函数<code>readline</code>来停止程序来等待用户输入一些东西，当用户键入<code>RETURN</code>或<code>ENTERN</code>时程序继续运行，<code>readline</code>以字符串的形式返回用户输入的内容。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; text = readline()</span><br><span class="line">What are you waiting <span class="keyword">for</span>?</span><br><span class="line"><span class="string">&quot;What are you waiting for?&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Fruitful-Functions"><a href="#Fruitful-Functions" class="headerlink" title="Fruitful Functions"></a>Fruitful Functions</h2><h3 id="Return-Values"><a href="#Return-Values" class="headerlink" title="Return Values"></a>Return Values</h3><p>函数具有返回值：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> area(radius)</span><br><span class="line">    a = <span class="literal">π</span> * radius^<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>我们也可以省略<code>return</code>，默认最后一行为函数的返回值：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> area(radius)</span><br><span class="line">    <span class="literal">π</span> * radius^<span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Checking-Types"><a href="#Checking-Types" class="headerlink" title="Checking Types"></a>Checking Types</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> fact(n)</span><br><span class="line">    <span class="keyword">if</span> !(n <span class="keyword">isa</span> <span class="built_in">Int64</span>)</span><br><span class="line">        error(<span class="string">&quot;Factorial is only defined for integers.&quot;</span>)</span><br><span class="line">    <span class="keyword">elseif</span> n &lt; <span class="number">0</span></span><br><span class="line">        error(<span class="string">&quot;Factorial is not defined for negative integers.&quot;</span>)</span><br><span class="line">    <span class="keyword">elseif</span> n == <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> n * fact(n-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="Iteration"><a href="#Iteration" class="headerlink" title="Iteration"></a>Iteration</h2><h3 id="The-while-Statement"><a href="#The-while-Statement" class="headerlink" title="The while Statement"></a>The <code>while</code> Statement</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> countdown(n)</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span></span><br><span class="line">        print(n, <span class="string">&quot; &quot;</span>)</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    println(<span class="string">&quot;Blastoff!&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line">    print(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">    line = readline()</span><br><span class="line">    <span class="keyword">if</span> line == <span class="string">&quot;done&quot;</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    println(line)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">println(<span class="string">&quot;Done!&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>:<span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    print(i, <span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h2><h3 id="Characters"><a href="#Characters" class="headerlink" title="Characters"></a>Characters</h3><p>一个字符用单引号<code>&#39;&#39;</code>包裹：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; <span class="string">&#x27;x&#x27;</span></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>: ASCII/Unicode U+<span class="number">0078</span> (category Ll: Letter, lowercase)</span><br><span class="line">julia&gt; &#x27;🍌&#x27;</span><br><span class="line">&#x27;🍌&#x27;: Unicode U+<span class="number">01f34</span>c (category So: <span class="built_in">Symbol</span>, other)</span><br><span class="line">julia&gt; typeof(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="built_in">Char</span></span><br></pre></td></tr></table></figure><h3 id="A-String-Is-a-Sequence"><a href="#A-String-Is-a-Sequence" class="headerlink" title="A String Is a Sequence"></a>A String Is a Sequence</h3><p>我们可以对字符串进行索引：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; fruit = <span class="string">&quot;banana&quot;</span></span><br><span class="line"><span class="string">&quot;banana&quot;</span></span><br><span class="line">julia&gt; letter = fruit[<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;b&#x27;</span>: ASCII/Unicode U+<span class="number">0062</span> (category Ll: Letter, lowercase)</span><br><span class="line">julia&gt; fruit[<span class="keyword">end</span>]</span><br><span class="line"><span class="string">&#x27;a&#x27;</span>: ASCII/Unicode U+<span class="number">0061</span> (category Ll: Letter, lowercase)</span><br></pre></td></tr></table></figure><h3 id="length"><a href="#length" class="headerlink" title="length"></a><code>length</code></h3><p><code>length</code>返回字符串的长度：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; fruits = <span class="string">&quot;🍌 🍎 🍐&quot;</span></span><br><span class="line"><span class="string">&quot;🍌 🍎 🍐&quot;</span></span><br><span class="line">julia&gt; len = length(fruits)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>字符串是使用<code>UTF-8</code>进行编码的。<code>UTF-8</code>是一个可变宽度的编码，这意味着并非所有字符均以相同数量的字节编码。因此我们索引可能会出错。</p><p>函数<code>sizeof</code>可以给出字符串的字节数：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; sizeof(<span class="string">&quot;🍌&quot;</span>)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>这意味着<code>UTF-8</code>编码的字符串中的字节索引并不是并不总是一个字符的合理的索引：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; fruits[<span class="number">2</span>]</span><br><span class="line">ERROR: <span class="built_in">StringIndexError</span>(<span class="string">&quot;🍌 🍎 🍐&quot;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="Traversal"><a href="#Traversal" class="headerlink" title="Traversal"></a>Traversal</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">index = firstindex(fruits)</span><br><span class="line"><span class="keyword">while</span> index &lt;= sizeof(fruits)</span><br><span class="line">    letter = fruits[index]</span><br><span class="line">    println(letter)</span><br><span class="line">    <span class="keyword">global</span> index = nextind(fruits, index)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>nextind</code>返回下一个合理的索引；<code>prevind</code>查找前一个合理的索引。</p><h3 id="String-Slices"><a href="#String-Slices" class="headerlink" title="String Slices"></a>String Slices</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; str = <span class="string">&quot;Julius Caesar&quot;</span>;</span><br><span class="line"></span><br><span class="line">julia&gt; str[<span class="number">1</span>:<span class="number">6</span>]</span><br><span class="line"><span class="string">&quot;Julius&quot;</span></span><br><span class="line">julia&gt; str[:]</span><br><span class="line"><span class="string">&quot;Julius Caesar&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Strings-Are-Immutable"><a href="#Strings-Are-Immutable" class="headerlink" title="Strings Are Immutable"></a>Strings Are Immutable</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; greeting = <span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line"><span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line">julia&gt; greeting[<span class="number">1</span>] = <span class="string">&#x27;J&#x27;</span></span><br><span class="line">ERROR: <span class="built_in">MethodError</span>: no method matching setindex!(::<span class="built_in">String</span>, ::<span class="built_in">Char</span>, ::<span class="built_in">Int64</span>)</span><br></pre></td></tr></table></figure><h3 id="String-Interpolation"><a href="#String-Interpolation" class="headerlink" title="String Interpolation"></a>String Interpolation</h3><p>使用符号<code>$</code>可以将表达式的值插入到字符串中：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; greet = <span class="string">&quot;Hello&quot;</span>  </span><br><span class="line"><span class="string">&quot;Hello&quot;</span>                 </span><br><span class="line">                        </span><br><span class="line">julia&gt; whom = <span class="string">&quot;World&quot;</span>   </span><br><span class="line"><span class="string">&quot;World&quot;</span>                 </span><br><span class="line"></span><br><span class="line">julia&gt; <span class="string">&quot;<span class="subst">$(greet)</span>, <span class="subst">$(whom)</span>!&quot;</span></span><br><span class="line"><span class="string">&quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Searching"><a href="#Searching" class="headerlink" title="Searching"></a>Searching</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> find(word, letter)</span><br><span class="line">    index = firstindex(word)</span><br><span class="line">    <span class="keyword">while</span> index &lt;= sizeof(word)</span><br><span class="line">        <span class="keyword">if</span> word[index] == letter</span><br><span class="line">            <span class="keyword">return</span> index</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        index = nextind(word, index)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    -<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Looping-and-Counting"><a href="#Looping-and-Counting" class="headerlink" title="Looping and Counting"></a>Looping and Counting</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">&quot;banana&quot;</span></span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> word</span><br><span class="line">    <span class="keyword">if</span> letter == <span class="string">&#x27;a&#x27;</span></span><br><span class="line">        <span class="keyword">global</span> counter = counter + <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">println(counter)</span><br></pre></td></tr></table></figure><h3 id="String-Library"><a href="#String-Library" class="headerlink" title="String Library"></a>String Library</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; uppercase(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line"><span class="string">&quot;HELLO, WORLD!&quot;</span></span><br><span class="line"></span><br><span class="line">julia&gt; findfirst(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;banana&quot;</span>)</span><br><span class="line"><span class="number">2</span>:<span class="number">2</span></span><br><span class="line"></span><br><span class="line">julia&gt; findfirst(<span class="string">&quot;na&quot;</span>, <span class="string">&quot;banana&quot;</span>)</span><br><span class="line"><span class="number">3</span>:<span class="number">4</span></span><br><span class="line"></span><br><span class="line">julia&gt; findnext(<span class="string">&quot;na&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="number">4</span>)</span><br><span class="line"><span class="number">5</span>:<span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="The-∈-Operator"><a href="#The-∈-Operator" class="headerlink" title="The ∈ Operator"></a>The <code>∈</code> Operator</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; <span class="string">&#x27;a&#x27;</span> ∈ <span class="string">&quot;banana&quot;</span>    <span class="comment"># &#x27;a&#x27; in &quot;banana&quot;</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="String-Comparison"><a href="#String-Comparison" class="headerlink" title="String Comparison"></a>String Comparison</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">&quot;Pineapple&quot;</span></span><br><span class="line"><span class="keyword">if</span> word &lt; <span class="string">&quot;banana&quot;</span></span><br><span class="line">    println(<span class="string">&quot;Your word, <span class="subst">$(word)</span>, comes before banana.&quot;</span>)</span><br><span class="line"><span class="keyword">elseif</span> word &gt; <span class="string">&quot;banana&quot;</span></span><br><span class="line">    println(<span class="string">&quot;Your word, <span class="subst">$(word)</span>, comes after banana.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    println(<span class="string">&quot;All right, bananas.&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">&gt; Your word, Pineapple, comes before banana.</span><br></pre></td></tr></table></figure><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><p><code>Array</code>为<code>Julia</code>内置的数据结构。</p><h3 id="An-Array-is-a-Sequence"><a href="#An-Array-is-a-Sequence" class="headerlink" title="An Array is a Sequence"></a>An Array is a Sequence</h3><p>数组中元素不一定要是同一种类型，最简单的创建数组的方法是用中括号<code>[]</code>：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&quot;spam&quot;</span>, <span class="number">2.0</span>, <span class="number">5</span>, [<span class="number">10</span>, <span class="number">20</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; cheeses = [<span class="string">&quot;Cheddar&quot;</span>, <span class="string">&quot;Edam&quot;</span>, <span class="string">&quot;Gouda&quot;</span>];</span><br><span class="line"></span><br><span class="line">julia&gt; numbers = [<span class="number">42</span>, <span class="number">123</span>];</span><br><span class="line"></span><br><span class="line">julia&gt; empty = [];</span><br><span class="line"></span><br><span class="line">julia&gt; print(cheeses, <span class="string">&quot; &quot;</span>, numbers, <span class="string">&quot; &quot;</span>, empty)</span><br><span class="line">[<span class="string">&quot;Cheddar&quot;</span>, <span class="string">&quot;Edam&quot;</span>, <span class="string">&quot;Gouda&quot;</span>] [<span class="number">42</span>, <span class="number">123</span>] <span class="built_in">Any</span>[]</span><br></pre></td></tr></table></figure><p>我们可以使用<code>typeof</code>来查看类型：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; typeof(cheeses)</span><br><span class="line"><span class="built_in">Array</span>&#123;<span class="built_in">String</span>,<span class="number">1</span>&#125;</span><br><span class="line">julia&gt; typeof(numbers)</span><br><span class="line"><span class="built_in">Array</span>&#123;<span class="built_in">Int64</span>,<span class="number">1</span>&#125;</span><br><span class="line">julia&gt; typeof(empty)</span><br><span class="line"><span class="built_in">Array</span>&#123;<span class="built_in">Any</span>,<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><p>数组类型包含数组中元素的类型和维度。</p><h3 id="Arrays-Are-Mutable"><a href="#Arrays-Are-Mutable" class="headerlink" title="Arrays Are Mutable"></a>Arrays Are Mutable</h3><p>数组是可变的：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; numbers[<span class="number">2</span>] = <span class="number">5</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">julia&gt; print(numbers)</span><br><span class="line">[<span class="number">42</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><h3 id="Traversing-an-Array"><a href="#Traversing-an-Array" class="headerlink" title="Traversing an Array"></a>Traversing an Array</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> cheese <span class="keyword">in</span> cheeses</span><br><span class="line">    println(cheese)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> []</span><br><span class="line">    println(<span class="string">&quot;This can never happens.&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="Array-Slices"><a href="#Array-Slices" class="headerlink" title="Array Slices"></a>Array Slices</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; t = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line">julia&gt; print(t[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">julia&gt; print(t[<span class="number">3</span>:<span class="keyword">end</span>])</span><br><span class="line">[<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br></pre></td></tr></table></figure><p><code>[:]</code>拷贝数组：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; print(t[:])</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="Array-Library"><a href="#Array-Library" class="headerlink" title="Array Library"></a>Array Library</h3><p><code>push!</code>向数组中添加元素：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; t = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line">julia&gt; push!(t, <span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">julia&gt; print(t)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br></pre></td></tr></table></figure><p><code>append!</code>将第一个数组的元素放在第二个数组前面：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; t1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line">julia&gt; t2 = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"></span><br><span class="line">julia&gt; append!(t1, t2);</span><br><span class="line"></span><br><span class="line">julia&gt; print(t1)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br></pre></td></tr></table></figure><p><code>sort!</code>排序，改变原数组，<code>sort</code>不改变原数组，带<code>!</code>的函数改变原来的数组。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; t = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"></span><br><span class="line">julia&gt; sort!(t);</span><br><span class="line"></span><br><span class="line">julia&gt; print(t)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"></span><br><span class="line">julia&gt; t1 = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"></span><br><span class="line">julia&gt; t2 = sort(t1);</span><br><span class="line"></span><br><span class="line">julia&gt; print(t1)</span><br><span class="line">[<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">julia&gt; print(t2)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="Dot-Syntax"><a href="#Dot-Syntax" class="headerlink" title="Dot Syntax"></a>Dot Syntax</h3><p>函数前添加<code>.</code>是逐元素操作：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; t = uppercase.([<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>, <span class="string">&quot;ghi&quot;</span>]);</span><br><span class="line"></span><br><span class="line">julia&gt; print(t)</span><br><span class="line">[<span class="string">&quot;ABC&quot;</span>, <span class="string">&quot;DEF&quot;</span>, <span class="string">&quot;GHI&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="Deleting-Inserting-Elements"><a href="#Deleting-Inserting-Elements" class="headerlink" title="Deleting (Inserting) Elements"></a>Deleting (Inserting) Elements</h3><p><code>splice!</code>删除返回元素：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; t = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line">julia&gt; splice!(t, <span class="number">2</span>)</span><br><span class="line"><span class="string">&#x27;b&#x27;</span>: ASCII/Unicode U+<span class="number">0062</span> (category Ll: Letter, lowercase)</span><br><span class="line">julia&gt; print(t)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure><p><code>pop!</code>删除并返回最后一个元素：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; t = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line">julia&gt; pop!(t)</span><br><span class="line"><span class="string">&#x27;c&#x27;</span>: ASCII/Unicode U+<span class="number">0063</span> (category Ll: Letter, lowercase)</span><br><span class="line">julia&gt; print(t)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br></pre></td></tr></table></figure><p><code>popfirst!</code>删除返回第一个元素：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; t = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line">julia&gt; popfirst!(t)</span><br><span class="line"><span class="string">&#x27;a&#x27;</span>: ASCII/Unicode U+<span class="number">0061</span> (category Ll: Letter, lowercase)</span><br><span class="line">julia&gt; print(t)</span><br><span class="line">[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure><p><code>pushfirst!</code> and <code>push!</code>分别在第一位和最后一位插入数据。</p><p><code>deleteat!</code>删除但不返回元素：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; t = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line">julia&gt; print(deleteat!(t, <span class="number">2</span>))</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure><p> <code>insert!</code>在指定位置插入元素：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; t = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line">julia&gt; print(insert!(t, <span class="number">2</span>, <span class="string">&#x27;x&#x27;</span>))</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="Arrays-and-Strings"><a href="#Arrays-and-Strings" class="headerlink" title="Arrays and Strings"></a>Arrays and Strings</h3><p><code>collect</code>可以将字符串转为数组：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; t = collect(<span class="string">&quot;spam&quot;</span>);</span><br><span class="line"></span><br><span class="line">julia&gt; print(t)</span><br><span class="line">[<span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;m&#x27;</span>]</span><br></pre></td></tr></table></figure><p><code>split</code>可以将字符串按照分隔符分割为数组：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; t = split(<span class="string">&quot;spam-spam-spam&quot;</span>, <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"></span><br><span class="line">julia&gt; print(t)</span><br><span class="line"><span class="built_in">SubString</span>&#123;<span class="built_in">String</span>&#125;[<span class="string">&quot;spam&quot;</span>, <span class="string">&quot;spam&quot;</span>, <span class="string">&quot;spam&quot;</span>]</span><br></pre></td></tr></table></figure><p><code>join</code>是<code>split</code>的逆运算，将数组转为字符串：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; t = [<span class="string">&quot;pining&quot;</span>, <span class="string">&quot;for&quot;</span>, <span class="string">&quot;the&quot;</span>, <span class="string">&quot;fjords&quot;</span>];</span><br><span class="line"></span><br><span class="line">julia&gt; s = join(t, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="string">&quot;pining for the fjords&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Objects-and-Values"><a href="#Objects-and-Values" class="headerlink" title="Objects and Values"></a>Objects and Values</h3><p>一个对象是变量可以引用的东西。</p><p>对于字符串：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; a = <span class="string">&quot;banana&quot;</span></span><br><span class="line"><span class="string">&quot;banana&quot;</span></span><br><span class="line">julia&gt; b = <span class="string">&quot;banana&quot;</span></span><br><span class="line"><span class="string">&quot;banana&quot;</span></span><br><span class="line">julia&gt; a ≡ b</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>对于数组：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">julia&gt; b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">julia&gt; a ≡ b</span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="Aliasing"><a href="#Aliasing" class="headerlink" title="Aliasing"></a>Aliasing</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">julia&gt; b = a;</span><br><span class="line"></span><br><span class="line">julia&gt; b ≡ a</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>变量与对象的关联称为引用。在这个例子中，有两个对同一个对象的引用。</p><h3 id="Array-Arguments"><a href="#Array-Arguments" class="headerlink" title="Array Arguments"></a>Array Arguments</h3><p>当把一个数组传给函数时，函数得到数组的引用，函数会改变数组：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> deletehead!(t)</span><br><span class="line">    popfirst!(t)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">julia&gt; letters = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line">julia&gt; deletehead!(letters);</span><br><span class="line"></span><br><span class="line">julia&gt; print(letters)</span><br><span class="line">[<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure><p>函数<code>vcat</code>创建新的数组，不会改变原数组：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">julia&gt; t3 = vcat(t1, [<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">julia&gt; print(t1)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">julia&gt; print(t3)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>切片也会创建新数组，不会改变原数组：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> baddeletehead(t)</span><br><span class="line">    t = t[<span class="number">2</span>:<span class="keyword">end</span>]                <span class="comment"># WRONG!</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">julia&gt; t4 = baddeletehead(t3);</span><br><span class="line"></span><br><span class="line">julia&gt; print(t3)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">julia&gt; print(t4)</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimglf6.lf127.net%2Fimg%2FanBSb2NqdEc5dTlseXpNTWxpY0RWQ2NwUlAyVmFEa2lFSVo0TVM4WXNwSndDMUdvN3crMS9nPT0.jpg%3FimageView%26thumbnail%3D2160x0%26quality%3D90%26interlace%3D1%26type%3Djpg&amp;refer=http%3A%2F%2Fimglf6.lf127.net&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1659263087&amp;t=d2faeee051aa3c102a86e173d74306ad&quot; style=&quot;zoom: 100%;&quot; /&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;书籍网址：&lt;a href=&quot;https://benlauwens.github.io/ThinkJulia.jl/latest/book.html&quot;&gt;https://benlauwens.github.io/ThinkJulia.jl/latest/book.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="书籍阅读" scheme="https://www.hfcouc.work/categories/%E4%B9%A6%E7%B1%8D%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="Julia" scheme="https://www.hfcouc.work/tags/Julia/"/>
    
    <category term="编程" scheme="https://www.hfcouc.work/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>B站课程Mathematica前三周</title>
    <link href="https://www.hfcouc.work/2022/07/01/math/"/>
    <id>https://www.hfcouc.work/2022/07/01/math/</id>
    <published>2022-07-01T10:19:12.000Z</published>
    <updated>2022-07-01T10:27:07.977Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p align="center">    <img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Farticle%2F7d065302ef2984abddb60152758c13bd66f74fba.jpg&refer=http%3A%2F%2Fi0.hdslb.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1659263087&t=447b47f50cbb4d4d181ed18e4ac43cb5" style="zoom: 100%;" /></p><blockquote><p> B站课程链接：<a href="https://www.bilibili.com/video/BV1av411N7Xi?spm_id_from=333.999.0.0&amp;vd_source=6177c61c946280bb88c727585de76bc8">https://www.bilibili.com/video/BV1av411N7Xi?spm_id_from=333.999.0.0&amp;vd_source=6177c61c946280bb88c727585de76bc8</a></p></blockquote><span id="more"></span><h2 id="第一周"><a href="#第一周" class="headerlink" title="第一周"></a>第一周</h2><h3 id="值、变量、类型"><a href="#值、变量、类型" class="headerlink" title="值、变量、类型"></a>值、变量、类型</h3><p>以下三种对象成为原子(atom)：</p><p>符号(Symbol)：由字母和数字(数字不能在起始位置)构成的有限序列</p><p>数字(Number)：整数、有理数、实数、复数</p><p>字符串(String)：由双引号<code>&quot;&quot;</code>括起来的任意字符构成的有限序列</p><h4 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h4><p>我们在命名时应注意避开系统内建符号，系统内建符号的特点为：</p><ul><li>由第一个字母大写的单词组成(Camel命名法)：True、False、FactorInteger、SetAttributes</li><li>用来做判断的函数末尾通常有”Q”：EvenQ、PrimeQ、MatchQ</li><li>用人名命名的符号=人名+符号名：EulerGamma、BesselJ、DiracDelta</li></ul><h4 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h4><p>一个编程语言的类型检查越严格，程序员受到的束缚越大。Mathematica程序通常来说都比较短小，靠程序员自觉检查类型基本上就足够了，所以不需要太严格的类型检查机制。一个较弱的类型检查可以让程序员写出更灵活的程序。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Sin</span><span class="punctuation">[</span><span class="string">&quot;I&#x27;m a string!&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">Sin</span><span class="punctuation">[</span><span class="string">&quot;I&#x27;m a string!&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Sin</span><span class="punctuation">[</span><span class="string">&quot;I&#x27;m a string!&quot;</span><span class="punctuation">]</span> <span class="operator">/.</span> <span class="punctuation">&#123;</span><span class="string">&quot;I&#x27;m a string!&quot;</span> <span class="operator">-&gt;</span> <span class="built_in">Pi</span><span class="operator">/</span><span class="number">3</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">Sqrt</span><span class="punctuation">[</span><span class="number">3</span><span class="punctuation">]</span><span class="operator">/</span><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="条件、循环、子程序"><a href="#条件、循环、子程序" class="headerlink" title="条件、循环、子程序"></a>条件、循环、子程序</h3><p>在Mathematica中，条件和循环结构其实用的并不多。这是因为条件结构的功能基本上可以通过核心语言中的模式匹配来完成；而循环结构的功能则可以通过表处理和泛函编程完成。</p><h4 id="简单的条件判断"><a href="#简单的条件判断" class="headerlink" title="简单的条件判断"></a>简单的条件判断</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">If</span><span class="punctuation">[</span><span class="built_in">True</span><span class="operator">,</span> <span class="built_in">Print</span><span class="punctuation">[</span><span class="string">&quot;Then&quot;</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">Then</span></span><br><span class="line"><span class="built_in">If</span><span class="punctuation">[</span><span class="built_in">False</span><span class="operator">,</span> <span class="built_in">Print</span><span class="punctuation">[</span><span class="string">&quot;Then&quot;</span><span class="punctuation">]</span><span class="operator">,</span> <span class="built_in">Print</span><span class="punctuation">[</span><span class="string">&quot;Else&quot;</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">Else</span></span><br><span class="line"><span class="built_in">If</span><span class="punctuation">[</span><span class="variable">a</span> <span class="operator">==</span> <span class="variable">b</span><span class="operator">,</span> <span class="built_in">Print</span><span class="punctuation">[</span><span class="string">&quot;Then&quot;</span><span class="punctuation">]</span><span class="operator">,</span> <span class="built_in">Print</span><span class="punctuation">[</span><span class="string">&quot;Else&quot;</span><span class="punctuation">]</span><span class="operator">,</span> <span class="built_in">Print</span><span class="punctuation">[</span><span class="string">&quot;Unevaluated&quot;</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">Unevaluated</span></span><br><span class="line"><span class="built_in">If</span><span class="punctuation">[</span><span class="variable">a</span> <span class="operator">===</span> <span class="variable">b</span><span class="operator">,</span> <span class="built_in">Print</span><span class="punctuation">[</span><span class="string">&quot;Then&quot;</span><span class="punctuation">]</span><span class="operator">,</span> <span class="built_in">Print</span><span class="punctuation">[</span><span class="string">&quot;Else&quot;</span><span class="punctuation">]</span><span class="operator">,</span> <span class="built_in">Print</span><span class="punctuation">[</span><span class="string">&quot;Unevaluated&quot;</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">Else</span></span><br></pre></td></tr></table></figure><h4 id="多重条件判断"><a href="#多重条件判断" class="headerlink" title="多重条件判断"></a>多重条件判断</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span><span class="operator">;</span> <span class="built_in">Which</span><span class="punctuation">[</span><span class="variable">x</span> <span class="operator">==</span> <span class="number">1</span><span class="operator">,</span> <span class="number">1</span><span class="operator">,</span> <span class="variable">x</span> <span class="operator">==</span> <span class="number">2</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="variable">x</span> <span class="operator">==</span> <span class="number">3</span><span class="operator">,</span> <span class="number">3</span><span class="operator">,</span> <span class="built_in">True</span><span class="operator">,</span> <span class="built_in">Print</span><span class="punctuation">[</span><span class="string">&quot;x!=1,2,3&quot;</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">x</span><span class="operator">!=</span><span class="number">1</span><span class="operator">,</span><span class="number">2</span><span class="operator">,</span><span class="number">3</span></span><br><span class="line"><span class="built_in">Plot</span><span class="punctuation">[</span><span class="built_in">Piecewise</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="variable">x</span> <span class="operator">==</span> <span class="number">0</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="built_in">Sin</span><span class="punctuation">[</span><span class="variable">x</span><span class="punctuation">]</span><span class="operator">/</span><span class="variable">x</span><span class="operator">,</span> <span class="variable">x</span> <span class="operator">!=</span> <span class="number">0</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">x</span><span class="operator">,</span> <span class="operator">-</span><span class="number">4</span> <span class="built_in">Pi</span><span class="operator">,</span> <span class="number">4</span> <span class="built_in">Pi</span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/HFC666/image/master/img/math1.jpg" alt=""></p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Switch</span><span class="punctuation">[</span><span class="variable">b</span><span class="operator">,</span> <span class="built_in">True</span><span class="operator">,</span> <span class="number">1</span><span class="operator">,</span> <span class="built_in">False</span><span class="operator">,</span> <span class="number">0</span><span class="operator">,</span> <span class="type">_</span><span class="operator">,</span> <span class="built_in">Print</span><span class="punctuation">[</span><span class="string">&quot;b is not a boolean value!&quot;</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">b</span> <span class="variable">is</span> <span class="variable">not</span> <span class="variable">a</span> <span class="variable">boolean</span> <span class="variable">value</span><span class="operator">!</span></span><br></pre></td></tr></table></figure><h4 id="简单循环"><a href="#简单循环" class="headerlink" title="简单循环"></a>简单循环</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Do</span><span class="punctuation">[</span><span class="built_in">Print</span><span class="punctuation">[</span><span class="string">&quot;哟,&quot;</span><span class="punctuation">]</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">3</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="operator">;</span> <span class="built_in">Print</span><span class="punctuation">[</span><span class="string">&quot;切克闹!&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Do</span><span class="punctuation">[</span><span class="built_in">Print</span><span class="punctuation">[</span><span class="built_in">Prime</span><span class="punctuation">[</span><span class="variable">i</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">i</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="built_in">PrimePi</span><span class="punctuation">[</span><span class="number">100</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Do</span><span class="punctuation">[</span><span class="built_in">Print</span><span class="punctuation">[</span><span class="variable">i</span><span class="operator">,</span> <span class="string">&quot; is a prime number.&quot;</span><span class="punctuation">]</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">i</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="operator">,</span> <span class="number">5</span><span class="operator">,</span> <span class="number">7</span><span class="operator">,</span> <span class="number">11</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h4 id="复杂循环"><a href="#复杂循环" class="headerlink" title="复杂循环"></a>复杂循环</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">For</span><span class="punctuation">[</span><span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span><span class="operator">;</span> <span class="variable">t</span> <span class="operator">=</span> <span class="variable">i</span><span class="operator">,</span> <span class="variable">i</span> <span class="operator">&lt;=</span> <span class="number">10</span><span class="operator">,</span> <span class="variable">i</span><span class="operator">++,</span> <span class="built_in">Print</span><span class="punctuation">[</span><span class="variable">t</span> <span class="operator">*=</span> <span class="variable">i</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="variable">n</span> <span class="operator">=</span> <span class="number">1234567</span><span class="operator">;</span> <span class="built_in">While</span><span class="punctuation">[</span><span class="built_in">Not</span><span class="punctuation">[</span><span class="built_in">PrimeQ</span><span class="punctuation">[</span><span class="operator">++</span><span class="variable">n</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="operator">;</span> <span class="variable">n</span></span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数定义方法一：模式匹配+延迟赋值</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">f</span><span class="punctuation">[</span><span class="type">x_</span><span class="punctuation">]</span> <span class="operator">:=</span> <span class="variable">x</span><span class="operator">^</span><span class="number">2</span><span class="operator">;</span></span><br><span class="line"><span class="variable">f</span><span class="punctuation">[</span><span class="type">x_</span><span class="operator">,</span> <span class="type">y_</span><span class="punctuation">]</span> <span class="operator">:=</span> <span class="variable">x</span> <span class="variable">y</span><span class="operator">;</span></span><br></pre></td></tr></table></figure><p>函数定义方法二：纯函数($\lambda-$表达式、匿名函数)</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">f1</span> <span class="operator">=</span> <span class="built_in">Function</span><span class="punctuation">[</span><span class="variable">x</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">^</span><span class="number">2</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"><span class="comment">(* 简写形式 *)</span></span><br><span class="line"><span class="variable">f2</span> <span class="operator">=</span> <span class="type">#</span><span class="operator">^</span><span class="number">2</span> <span class="operator">&amp;;</span></span><br><span class="line"><span class="variable">g1</span> <span class="operator">=</span> <span class="built_in">Function</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="variable">x</span><span class="operator">,</span> <span class="variable">y</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="variable">x</span> <span class="variable">y</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"><span class="comment">(* 简写形式 *)</span></span><br><span class="line"><span class="variable">g2</span> <span class="operator">=</span> <span class="type">#1</span> <span class="type">#2</span> <span class="operator">&amp;;</span></span><br></pre></td></tr></table></figure><p>例子：求不大于给定正整数$n$的所有素数的和</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(* 类C实现 *)</span></span><br><span class="line"><span class="variable">myPrimeQ</span> <span class="operator">=</span> </span><br><span class="line">  <span class="built_in">Function</span><span class="punctuation">[</span><span class="variable">x</span><span class="operator">,</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span><span class="operator">;</span> <span class="variable">max</span> <span class="operator">=</span> <span class="built_in">Floor</span><span class="punctuation">[</span><span class="built_in">Sqrt</span><span class="punctuation">[</span><span class="variable">x</span><span class="punctuation">]</span><span class="punctuation">]</span> <span class="operator">+</span> <span class="number">1</span><span class="operator">;</span> </span><br><span class="line">   <span class="built_in">While</span><span class="punctuation">[</span><span class="built_in">Mod</span><span class="punctuation">[</span><span class="variable">x</span><span class="operator">,</span> <span class="variable">i</span><span class="punctuation">]</span> <span class="operator">!=</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> <span class="variable">i</span> <span class="operator">&lt;</span> <span class="variable">max</span><span class="operator">,</span> <span class="variable">i</span><span class="operator">++</span><span class="punctuation">]</span><span class="operator">;</span> <span class="built_in">Not</span><span class="punctuation">[</span><span class="variable">i</span> <span class="operator">&lt;</span> <span class="variable">max</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"><span class="variable">myPrimeSum</span> <span class="operator">=</span> </span><br><span class="line">  <span class="built_in">Function</span><span class="punctuation">[</span><span class="variable">n</span><span class="operator">,</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span><span class="operator">;</span> <span class="built_in">Do</span><span class="punctuation">[</span><span class="built_in">If</span><span class="punctuation">[</span><span class="variable">myPrimeQ</span><span class="punctuation">[</span><span class="variable">x</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">sum</span> <span class="operator">+=</span> <span class="variable">x</span><span class="punctuation">]</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">x</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="variable">n</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="operator">;</span> <span class="variable">sum</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"><span class="comment">(*核心语言实现。Mathematica内部存储了前10亿个素数的素数表*)</span></span><br><span class="line"><span class="variable">myPrimesum2</span> <span class="operator">=</span> <span class="built_in">Plus</span> <span class="operator">@@</span> <span class="built_in">Prime</span> <span class="operator">/@</span> <span class="built_in">Range</span> <span class="operator">@</span> <span class="built_in">PrimePi</span><span class="punctuation">[</span><span class="type">#</span><span class="punctuation">]</span> <span class="operator">&amp;;</span></span><br><span class="line"><span class="built_in">Timing</span><span class="punctuation">[</span><span class="type">#</span><span class="punctuation">[</span><span class="number">100000</span><span class="punctuation">]</span><span class="punctuation">]</span> <span class="operator">&amp;</span> <span class="operator">/@</span> <span class="punctuation">&#123;</span><span class="variable">myPrimeSum</span><span class="operator">,</span> <span class="variable">myPrimesum2</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">3.4375</span><span class="operator">,</span> <span class="number">454396537</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">0.</span><span class="operator">,</span> <span class="number">454396537</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="第二周"><a href="#第二周" class="headerlink" title="第二周"></a>第二周</h2><h3 id="核心语言"><a href="#核心语言" class="headerlink" title="核心语言"></a>核心语言</h3><p>什么是Mathematica核心语言</p><p>我们已经看到，虽然Mathematica提供了一些函数可以让我们像编写C程序一样编写Mathematica程序，但是这样编写出来的程序的效率很成问题，而且程序本身也不易懂。另一方面，我们还展示了如何用所谓Mathematica核心语言编制出更高效、更简明的程序。如：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">myPrimesum2</span> <span class="operator">=</span> <span class="built_in">Plus</span> <span class="operator">@@</span> <span class="built_in">Prime</span> <span class="operator">/@</span> <span class="built_in">Range</span> <span class="operator">@</span> <span class="built_in">PrimePi</span><span class="punctuation">[</span><span class="type">#</span><span class="punctuation">]</span> <span class="operator">&amp;;</span></span><br></pre></td></tr></table></figure><p>这里有很多符号(<code>@@</code>、<code>/@</code>、<code>#</code>、<code>&amp;</code>)，它们其实只是一些Mathematica内建函数的简写形式，其完整形式为：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">myPrimesum2</span> <span class="operator">=</span> <span class="built_in">Function</span><span class="punctuation">[</span><span class="variable">n</span><span class="operator">,</span></span><br><span class="line">  <span class="built_in">Apply</span><span class="punctuation">[</span></span><br><span class="line">   <span class="built_in">Plus</span><span class="operator">,</span></span><br><span class="line">   <span class="built_in">Map</span><span class="punctuation">[</span></span><br><span class="line">    <span class="built_in">Prime</span><span class="operator">,</span></span><br><span class="line">    <span class="built_in">Range</span><span class="punctuation">[</span></span><br><span class="line">     <span class="built_in">PrimePi</span><span class="punctuation">[</span><span class="variable">n</span><span class="punctuation">]</span></span><br><span class="line">     <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">   <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">]</span> </span><br></pre></td></tr></table></figure><p>在Mathematica中，我们可以用TreeForm来获得一个表达式的语法树。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">TreeForm</span><span class="punctuation">[</span><span class="punctuation">(</span><span class="variable">a</span> <span class="operator">+</span> <span class="variable">b</span><span class="operator">^</span><span class="variable">n</span><span class="punctuation">)</span><span class="operator">/</span><span class="variable">z</span> <span class="operator">==</span> <span class="variable">x</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/HFC666/image/master/img/math2.jpg" alt=""></p><p>我们也可以用FullForm来获得一个表达式在Mathematica内部的完整形式：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FullForm</span><span class="punctuation">[</span><span class="punctuation">(</span><span class="variable">a</span> <span class="operator">+</span> <span class="variable">b</span><span class="operator">^</span><span class="variable">n</span><span class="punctuation">)</span><span class="operator">/</span><span class="variable">z</span> <span class="operator">==</span> <span class="variable">x</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">FullForm</span><span class="punctuation">[</span><span class="punctuation">(</span><span class="variable">a</span> <span class="operator">+</span> <span class="variable">b</span><span class="operator">^</span><span class="variable">n</span><span class="punctuation">)</span><span class="operator">/</span><span class="variable">z</span> <span class="operator">==</span> <span class="variable">x</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>在Mathematica中，满足如下条件的对象就叫做表达式</p><ol><li>原子对象是表达式</li><li>若$\mathrm{F,X_1,X_2,\cdots,X_n}$是表达式，则$\mathrm{F[X_1,X_2,\cdots,X_n]}$也是表达式。</li></ol><p>Mathematica中的一切对象都是表达式，一个Mathematica程序就是一个表达式。</p><blockquote><p>这一事实如此地重要，以至于有人将其称为Mathematica的第一原理：万物皆表(达式)。</p></blockquote><p>Mathematica的计算：</p><ol><li>从待计算对象中识别一些可化简的模式</li><li>将识别出的模式用已知的规则进行化解</li></ol><p>Mathematica是这样进行计算的，其中第一步叫做模式匹配，第二步叫做规则代入。基于模式和规则的计算模型在数理逻辑或计算机科学中叫做重写系统。</p><p>Mathematica第二原理：计算即重写。</p><h3 id="表达式与表"><a href="#表达式与表" class="headerlink" title="表达式与表"></a>表达式与表</h3><p>根据定义，一个表达式或者是原子，或者是形如$\mathrm{F[X_1,X_2,\cdots,X_n]}$的函数。事实上，原子也可以看成后者的特殊情况，只要我们把函数的自变量个数取成零就行了。所以，以后我们讨论表达式的时候，总把它写成$\mathrm{F[X_1,X_2,\cdots,X_n]}$的样子。</p><p>给定一个表达式$\mathrm{F[X_1,X_2,\cdots,X_n]}$，我们称$\mathrm{F}$是它的”头”。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Head</span> <span class="operator">/@</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">1</span><span class="operator">/</span><span class="number">2</span><span class="operator">,</span> <span class="built_in">True</span><span class="operator">,</span> <span class="string">&quot;number&quot;</span><span class="operator">,</span> <span class="variable">a</span> <span class="operator">+</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">a</span> <span class="operator">-</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">a</span><span class="operator">*</span><span class="variable">b</span><span class="operator">,</span> </span><br><span class="line">  <span class="variable">a</span><span class="operator">/</span><span class="variable">b</span><span class="operator">,</span> <span class="punctuation">(</span><span class="variable">f</span> <span class="operator">+</span> <span class="variable">g</span><span class="punctuation">)</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="operator">,</span> <span class="variable">x3</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="built_in">Integer</span><span class="operator">,</span> <span class="built_in">Rational</span><span class="operator">,</span> <span class="built_in">Symbol</span><span class="operator">,</span> <span class="built_in">String</span><span class="operator">,</span> <span class="built_in">Plus</span><span class="operator">,</span> <span class="built_in">Plus</span><span class="operator">,</span> <span class="built_in">Times</span><span class="operator">,</span> <span class="built_in">Times</span><span class="operator">,</span> <span class="variable">f</span> <span class="operator">+</span> <span class="variable">g</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>我们发现对于原子表达式：符号的头总是Symbol；数字的头则依赖于它的类型，结果可以是Integer、Rational、Real和Complex；字符串的头总是String；图片的头是Image等等。</p><p>利用这个性质，我们可以判断一个表达式是否是原子。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">myAtomQ</span> <span class="operator">=</span> </span><br><span class="line">  <span class="built_in">Function</span><span class="punctuation">[</span><span class="variable">ex</span><span class="operator">,</span> </span><br><span class="line">   <span class="built_in">MemberQ</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="built_in">Symbol</span><span class="operator">,</span> <span class="built_in">Integer</span><span class="operator">,</span> <span class="built_in">Rational</span><span class="operator">,</span> <span class="built_in">Reals</span><span class="operator">,</span> <span class="built_in">Complex</span><span class="operator">,</span> <span class="built_in">String</span><span class="operator">,</span> </span><br><span class="line">     <span class="built_in">Image</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="built_in">Head</span><span class="punctuation">[</span><span class="variable">ex</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="operator">;</span></span><br></pre></td></tr></table></figure><p>除了头以外，我们也常常需要将表达式的参数部分取出来。取出来的东西一些表达式构成的序列，是没有头的。但是在Mathematica里所有的表达式都必须有头，所以，为了处理这种无头表达式，Mathematica引入表(List)这个概念，然后规定所哟无头表达式的头都是List。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">ex</span> <span class="operator">=</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="operator">,</span> <span class="variable">x3</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"><span class="built_in">List</span> <span class="operator">@@</span> <span class="variable">ex</span></span><br><span class="line"><span class="built_in">Apply</span><span class="punctuation">[</span><span class="variable">g</span><span class="operator">,</span> <span class="variable">ex</span><span class="punctuation">]</span></span><br><span class="line"><span class="comment">(*可以将Apply函数理解为换头*)</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="operator">,</span> <span class="variable">x3</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">g</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="operator">,</span> <span class="variable">x3</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>表这种表达式还有一种变体，叫做序列(Sequence)。序列可以认为是没有两边花括号(“{}”)的表，或者说，表是用序列的元素做成了一个新的对象，而序列是某种更原始的东西。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">ex</span> <span class="operator">=</span> <span class="variable">h</span><span class="punctuation">[</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"><span class="variable">seq</span> <span class="operator">=</span> <span class="built_in">Sequence</span> <span class="operator">@@</span> <span class="variable">ex</span></span><br><span class="line"><span class="variable">lst</span> <span class="operator">=</span> <span class="built_in">List</span> <span class="operator">@@</span> <span class="variable">ex</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">Sequence</span><span class="punctuation">[</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">f</span><span class="punctuation">[</span><span class="variable">seq</span><span class="punctuation">]</span></span><br><span class="line"><span class="variable">f</span><span class="punctuation">[</span><span class="variable">lst</span><span class="punctuation">]</span></span><br><span class="line"><span class="variable">f</span> <span class="operator">@@</span> <span class="variable">lst</span></span><br><span class="line"><span class="variable">f</span><span class="punctuation">[</span><span class="variable">seq</span><span class="operator">,</span> <span class="variable">lst</span><span class="operator">,</span> <span class="number">4</span><span class="operator">,</span> <span class="number">5</span><span class="operator">,</span> <span class="number">6</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">f</span><span class="punctuation">[</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">f</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">f</span><span class="punctuation">[</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">f</span><span class="punctuation">[</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="number">4</span><span class="operator">,</span> <span class="number">5</span><span class="operator">,</span> <span class="number">6</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>上面的例子表明，当我们想把一个表达式的参数传递给另一个函数时，用List换头的结果可能不是我们想要的，因为多了一层花括号。如果不想要这层花括号，就要用Sequence换头。</p><p>除了用Head和Apply以外，Mathematica还提供了另一种访问复合表达式内部表达式的方法，即系统内建函数Part，简写形式为<code>[[...]]</code>。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">ex</span> <span class="operator">=</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="operator">,</span> <span class="variable">x3</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="variable">ex</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">ex</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">ex</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">ex</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">3</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="variable">f</span><span class="operator">,</span> <span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="operator">,</span> <span class="variable">x3</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>对于嵌套的表达式，我们可以多次地取Part：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">ex</span> <span class="operator">=</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">g</span><span class="punctuation">[</span><span class="variable">b</span><span class="operator">,</span> <span class="variable">c</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">h</span><span class="punctuation">[</span><span class="variable">d</span><span class="operator">,</span> <span class="variable">k</span><span class="punctuation">[</span><span class="variable">e</span><span class="operator">,</span> <span class="variable">i</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">j</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"><span class="variable">ex</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">3</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">i</span></span><br></pre></td></tr></table></figure><p>这个操作可以通过一个Part实现：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">ex</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">3</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">i</span></span><br></pre></td></tr></table></figure><p>另外Part还有更多的用法：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">ex</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="operator">-</span><span class="number">1</span><span class="operator">,</span> <span class="operator">-</span><span class="number">2</span><span class="operator">,</span> <span class="operator">-</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="variable">ex</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="variable">ex</span><span class="punctuation">[</span><span class="number">1</span> <span class="operator">;;</span> <span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="variable">ex</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">1</span> <span class="operator">;;</span> <span class="number">3</span> <span class="operator">;;</span> <span class="number">2</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">i</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">g</span><span class="punctuation">[</span><span class="variable">b</span><span class="operator">,</span> <span class="variable">c</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">h</span><span class="punctuation">[</span><span class="variable">d</span><span class="operator">,</span> <span class="variable">k</span><span class="punctuation">[</span><span class="variable">e</span><span class="operator">,</span> <span class="variable">i</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">j</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">g</span><span class="punctuation">[</span><span class="variable">b</span><span class="operator">,</span> <span class="variable">c</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">h</span><span class="punctuation">[</span><span class="variable">d</span><span class="operator">,</span> <span class="variable">k</span><span class="punctuation">[</span><span class="variable">e</span><span class="operator">,</span> <span class="variable">i</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">j</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">[</span><span class="number">1</span> <span class="operator">;;</span> <span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">h</span><span class="punctuation">[</span><span class="variable">d</span><span class="operator">,</span> <span class="variable">k</span><span class="punctuation">[</span><span class="variable">e</span><span class="operator">,</span> <span class="variable">i</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">j</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>最常用的Part都有属于它们自己的内建函数：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span><span class="punctuation">[</span><span class="variable">op</span><span class="operator">,</span> <span class="variable">op</span><span class="punctuation">[</span><span class="variable">f</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="operator">,</span> <span class="variable">x3</span><span class="operator">,</span> <span class="variable">x4</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">]</span> <span class="operator">/@</span> <span class="punctuation">&#123;</span><span class="built_in">First</span><span class="operator">,</span> <span class="built_in">Last</span><span class="operator">,</span> <span class="built_in">Rest</span><span class="operator">,</span> <span class="built_in">Most</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x4</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">x2</span><span class="operator">,</span> <span class="variable">x3</span><span class="operator">,</span> <span class="variable">x4</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="operator">,</span> <span class="variable">x3</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="built_in">Take</span><span class="punctuation">[</span><span class="variable">f</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="operator">,</span> <span class="variable">x3</span><span class="operator">,</span> <span class="variable">x4</span><span class="punctuation">]</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Drop</span><span class="punctuation">[</span><span class="variable">f</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="operator">,</span> <span class="variable">x3</span><span class="operator">,</span> <span class="variable">x4</span><span class="punctuation">]</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">x2</span><span class="operator">,</span> <span class="variable">x3</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x4</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>对于Take函数，我们可以这样替代：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">f</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="operator">,</span> <span class="variable">x3</span><span class="operator">,</span> <span class="variable">x4</span><span class="punctuation">]</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">x2</span><span class="operator">,</span> <span class="variable">x3</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>对于给定的表达式，有两个值很重要，即它的长度和深度：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Length</span><span class="punctuation">[</span><span class="variable">f</span><span class="punctuation">[</span><span class="variable">g</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">h</span><span class="punctuation">[</span><span class="variable">x2</span><span class="operator">,</span> <span class="variable">x3</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">x4</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Depth</span><span class="punctuation">[</span><span class="variable">f</span><span class="punctuation">[</span><span class="variable">g</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">h</span><span class="punctuation">[</span><span class="variable">x2</span><span class="operator">,</span> <span class="variable">x3</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">x4</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="number">2</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="表的构造"><a href="#表的构造" class="headerlink" title="表的构造"></a>表的构造</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Range</span><span class="punctuation">[</span><span class="number">10</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Range</span><span class="punctuation">[</span><span class="number">2</span><span class="operator">,</span> <span class="number">10</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Range</span><span class="punctuation">[</span><span class="number">2</span><span class="operator">,</span> <span class="number">10</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="operator">,</span> <span class="number">4</span><span class="operator">,</span> <span class="number">5</span><span class="operator">,</span> <span class="number">6</span><span class="operator">,</span> <span class="number">7</span><span class="operator">,</span> <span class="number">8</span><span class="operator">,</span> <span class="number">9</span><span class="operator">,</span> <span class="number">10</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="operator">,</span> <span class="number">4</span><span class="operator">,</span> <span class="number">5</span><span class="operator">,</span> <span class="number">6</span><span class="operator">,</span> <span class="number">7</span><span class="operator">,</span> <span class="number">8</span><span class="operator">,</span> <span class="number">9</span><span class="operator">,</span> <span class="number">10</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">5</span><span class="operator">,</span> <span class="number">8</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Table</span><span class="punctuation">[</span><span class="variable">i</span><span class="operator">^</span><span class="number">2</span> <span class="operator">+</span> <span class="variable">i</span> <span class="operator">+</span> <span class="number">1</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">i</span><span class="operator">,</span> <span class="number">10</span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Table</span><span class="punctuation">[</span><span class="built_in">KroneckerDelta</span><span class="punctuation">[</span><span class="variable">i</span><span class="operator">,</span> <span class="variable">j</span> <span class="operator">-</span> <span class="number">1</span><span class="punctuation">]</span> <span class="operator">+</span> <span class="variable">t</span> <span class="built_in">KroneckerDelta</span><span class="punctuation">[</span><span class="variable">i</span><span class="operator">,</span> <span class="variable">j</span> <span class="operator">+</span> <span class="number">4</span><span class="punctuation">]</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">i</span><span class="operator">,</span> </span><br><span class="line">   <span class="number">5</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">j</span><span class="operator">,</span> <span class="number">5</span><span class="punctuation">&#125;</span><span class="punctuation">]</span> <span class="operator">//</span> <span class="built_in">MatrixForm</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">3</span><span class="operator">,</span> <span class="number">7</span><span class="operator">,</span> <span class="number">13</span><span class="operator">,</span> <span class="number">21</span><span class="operator">,</span> <span class="number">31</span><span class="operator">,</span> <span class="number">43</span><span class="operator">,</span> <span class="number">57</span><span class="operator">,</span> <span class="number">73</span><span class="operator">,</span> <span class="number">91</span><span class="operator">,</span> <span class="number">111</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">\left(\begin{array}{lllll}0 & 1 & 0 & 0 & 0 \\0 & 0 & 1 & 0 & 0 \\0 & 0 & 0 & 1 & 0 \\0 & 0 & 0 & 0 & 1 \\t & 0 & 0 & 0 & 0\end{array}\right)</script><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span><span class="punctuation">[</span><span class="type">#</span><span class="operator">^</span><span class="number">2</span> <span class="operator">+</span> <span class="type">#</span> <span class="operator">+</span> <span class="number">1</span> <span class="operator">&amp;,</span> <span class="number">10</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">3</span><span class="operator">,</span> <span class="number">7</span><span class="operator">,</span> <span class="number">13</span><span class="operator">,</span> <span class="number">21</span><span class="operator">,</span> <span class="number">31</span><span class="operator">,</span> <span class="number">43</span><span class="operator">,</span> <span class="number">57</span><span class="operator">,</span> <span class="number">73</span><span class="operator">,</span> <span class="number">91</span><span class="operator">,</span> <span class="number">111</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="type">#</span><span class="operator">^</span><span class="number">2</span> <span class="operator">+</span> <span class="type">#</span> <span class="operator">+</span> <span class="number">1</span> <span class="operator">&amp;</span> <span class="operator">/@</span> <span class="built_in">Range</span><span class="punctuation">[</span><span class="number">10</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">3</span><span class="operator">,</span> <span class="number">7</span><span class="operator">,</span> <span class="number">13</span><span class="operator">,</span> <span class="number">21</span><span class="operator">,</span> <span class="number">31</span><span class="operator">,</span> <span class="number">43</span><span class="operator">,</span> <span class="number">57</span><span class="operator">,</span> <span class="number">73</span><span class="operator">,</span> <span class="number">91</span><span class="operator">,</span> <span class="number">111</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span><span class="punctuation">[</span><span class="variable">f</span><span class="operator">,</span> <span class="number">5</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="variable">h</span><span class="punctuation">]</span><span class="comment">(*5指的是长度，2指的是起始位置，h指的是头*)</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">h</span><span class="punctuation">[</span><span class="variable">f</span><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="number">3</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="number">4</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="number">5</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="number">6</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Tuples</span><span class="punctuation">[</span><span class="built_in">Range</span><span class="punctuation">[</span><span class="number">3</span><span class="punctuation">]</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">1</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">1</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">3</span><span class="operator">,</span> <span class="number">1</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">3</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">3</span><span class="operator">,</span> </span><br><span class="line">  <span class="number">3</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="built_in">Outer</span><span class="punctuation">[</span><span class="variable">f</span><span class="operator">,</span> <span class="built_in">Range</span><span class="punctuation">[</span><span class="number">3</span><span class="punctuation">]</span><span class="operator">,</span> <span class="built_in">Range</span><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="number">1</span><span class="operator">,</span> <span class="number">1</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="number">2</span><span class="operator">,</span> <span class="number">1</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="number">2</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="number">3</span><span class="operator">,</span> <span class="number">1</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="number">3</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="表的查询和搜索"><a href="#表的查询和搜索" class="headerlink" title="表的查询和搜索"></a>表的查询和搜索</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">ex</span> <span class="operator">=</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="operator">,</span> <span class="variable">x3</span><span class="operator">,</span> <span class="variable">x4</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"><span class="built_in">Function</span><span class="punctuation">[</span><span class="variable">i</span><span class="operator">,</span> <span class="built_in">MemberQ</span><span class="punctuation">[</span><span class="variable">ex</span><span class="operator">,</span> <span class="variable">i</span><span class="punctuation">]</span><span class="punctuation">]</span> <span class="operator">/@</span> <span class="punctuation">&#123;</span><span class="variable">f</span><span class="operator">,</span> <span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="operator">,</span> <span class="variable">x3</span><span class="operator">,</span> <span class="variable">x4</span><span class="operator">,</span> <span class="variable">x5</span><span class="operator">,</span> <span class="variable">x6</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="built_in">Function</span><span class="punctuation">[</span><span class="variable">i</span><span class="operator">,</span> <span class="built_in">FreeQ</span><span class="punctuation">[</span><span class="variable">ex</span><span class="operator">,</span> <span class="variable">i</span><span class="punctuation">]</span><span class="punctuation">]</span> <span class="operator">/@</span> <span class="punctuation">&#123;</span><span class="variable">f</span><span class="operator">,</span> <span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="operator">,</span> <span class="variable">x3</span><span class="operator">,</span> <span class="variable">x4</span><span class="operator">,</span> <span class="variable">x5</span><span class="operator">,</span> <span class="variable">x6</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="built_in">False</span><span class="operator">,</span> <span class="built_in">True</span><span class="operator">,</span> <span class="built_in">True</span><span class="operator">,</span> <span class="built_in">True</span><span class="operator">,</span> <span class="built_in">True</span><span class="operator">,</span> <span class="built_in">False</span><span class="operator">,</span> <span class="built_in">False</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="built_in">False</span><span class="operator">,</span> <span class="built_in">False</span><span class="operator">,</span> <span class="built_in">False</span><span class="operator">,</span> <span class="built_in">False</span><span class="operator">,</span> <span class="built_in">False</span><span class="operator">,</span> <span class="built_in">True</span><span class="operator">,</span> <span class="built_in">True</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>可以看出MemberQ和FreeQ结果并不是相反的。</p><p>MemberQ函数还有参数：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">MemberQ</span><span class="punctuation">[</span><span class="variable">ex</span><span class="operator">,</span> <span class="variable">f</span><span class="operator">,</span> <span class="built_in">Heads</span> <span class="operator">-&gt;</span> <span class="built_in">True</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">True</span></span><br></pre></td></tr></table></figure><p>FreeQ函数可以指定深度（默认深度是所有深度都查找）：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FreeQ</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">1</span><span class="operator">,</span> <span class="number">3</span><span class="operator">,</span> <span class="number">0</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="number">0</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">FreeQ</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">1</span><span class="operator">,</span> <span class="number">3</span><span class="operator">,</span> <span class="number">0</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="number">0</span><span class="operator">,</span> <span class="number">1</span><span class="punctuation">]</span><span class="comment">(*在第一层搜索*)</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">False</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">True</span></span><br></pre></td></tr></table></figure><p>还有Count函数(默认只看第一层)：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">euler</span> <span class="operator">=</span> <span class="punctuation">(</span><span class="variable">a</span> <span class="operator">+</span> <span class="variable">b</span><span class="operator">^</span><span class="variable">n</span><span class="punctuation">)</span><span class="operator">/</span><span class="variable">n</span> <span class="operator">==</span> <span class="variable">x</span><span class="operator">;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="built_in">Count</span><span class="punctuation">[</span><span class="variable">euler</span><span class="operator">,</span> <span class="variable">n</span><span class="punctuation">]</span><span class="operator">,</span> <span class="built_in">Count</span><span class="punctuation">[</span><span class="variable">euler</span><span class="operator">,</span> <span class="variable">n</span><span class="operator">,</span> <span class="built_in">Infinity</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">0</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Position可以找到位置：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Position</span><span class="punctuation">[</span><span class="variable">euler</span><span class="operator">,</span> <span class="variable">n</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Position</span><span class="punctuation">[</span><span class="variable">euler</span><span class="operator">,</span> <span class="variable">n</span><span class="operator">,</span> <span class="number">4</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Position</span><span class="punctuation">[</span><span class="variable">euler</span><span class="operator">,</span> <span class="variable">n</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">4</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="comment">(*带&#123;&#125;表示只搜这一层，不带表示最深搜到这层*)</span></span><br><span class="line"><span class="built_in">Function</span><span class="punctuation">[</span><span class="variable">level</span><span class="operator">,</span> <span class="built_in">Position</span><span class="punctuation">[</span><span class="variable">euler</span><span class="operator">,</span> <span class="variable">n</span><span class="operator">,</span> <span class="variable">level</span><span class="punctuation">]</span><span class="punctuation">]</span> <span class="operator">/@</span> <span class="punctuation">&#123;</span><span class="number">0</span><span class="operator">,</span> <span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="operator">,</span> <span class="number">4</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="built_in">Function</span><span class="punctuation">[</span><span class="variable">level</span><span class="operator">,</span> <span class="built_in">Position</span><span class="punctuation">[</span><span class="variable">euler</span><span class="operator">,</span> <span class="variable">n</span><span class="operator">,</span> <span class="variable">level</span><span class="punctuation">]</span><span class="punctuation">]</span> <span class="operator">/@</span> <span class="punctuation">&#123;</span><span class="number">3</span><span class="operator">,</span> <span class="number">4</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="built_in">Function</span><span class="punctuation">[</span><span class="variable">level</span><span class="operator">,</span> <span class="built_in">Position</span><span class="punctuation">[</span><span class="variable">euler</span><span class="operator">,</span> <span class="variable">n</span><span class="operator">,</span> <span class="variable">level</span><span class="punctuation">]</span><span class="punctuation">]</span> <span class="operator">/@</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">4</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">1</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">1</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">1</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">1</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">1</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">1</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">1</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Select选取满足某个条件的：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Select</span><span class="punctuation">[</span><span class="built_in">Prime</span> <span class="operator">/@</span> <span class="built_in">Range</span><span class="punctuation">[</span><span class="number">10</span><span class="punctuation">]</span><span class="operator">,</span> <span class="built_in">OddQ</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Select</span><span class="punctuation">[</span><span class="built_in">Prime</span> <span class="operator">/@</span> <span class="built_in">Range</span><span class="punctuation">[</span><span class="number">10</span><span class="punctuation">]</span><span class="operator">,</span> <span class="built_in">Mod</span><span class="punctuation">[</span><span class="type">#</span><span class="operator">,</span> <span class="number">4</span><span class="punctuation">]</span> <span class="operator">==</span> <span class="number">1</span> <span class="operator">&amp;</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">3</span><span class="operator">,</span> <span class="number">5</span><span class="operator">,</span> <span class="number">7</span><span class="operator">,</span> <span class="number">11</span><span class="operator">,</span> <span class="number">13</span><span class="operator">,</span> <span class="number">17</span><span class="operator">,</span> <span class="number">19</span><span class="operator">,</span> <span class="number">23</span><span class="operator">,</span> <span class="number">29</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">5</span><span class="operator">,</span> <span class="number">13</span><span class="operator">,</span> <span class="number">17</span><span class="operator">,</span> <span class="number">29</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="表的添加、删除和修改"><a href="#表的添加、删除和修改" class="headerlink" title="表的添加、删除和修改"></a>表的添加、删除和修改</h3><p>下面的操作不改变表达式本身：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">ex</span> <span class="operator">=</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">c</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="built_in">Prepend</span><span class="punctuation">[</span><span class="variable">ex</span><span class="operator">,</span> <span class="variable">z</span><span class="punctuation">]</span><span class="operator">,</span> <span class="built_in">Append</span><span class="punctuation">[</span><span class="variable">ex</span><span class="operator">,</span> <span class="variable">d</span><span class="punctuation">]</span><span class="operator">,</span> <span class="built_in">Insert</span><span class="punctuation">[</span><span class="variable">ex</span><span class="operator">,</span> <span class="variable">i</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">]</span><span class="operator">,</span> <span class="built_in">Insert</span><span class="punctuation">[</span><span class="variable">ex</span><span class="operator">,</span> <span class="variable">i</span><span class="operator">,</span> <span class="operator">-</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="variable">z</span><span class="operator">,</span> <span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">c</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">c</span><span class="operator">,</span> <span class="variable">d</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">i</span><span class="operator">,</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">c</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">i</span><span class="operator">,</span> <span class="variable">c</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="variable">ex</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">c</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>下面的操作会改变表达式：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="built_in">PrependTo</span><span class="punctuation">[</span><span class="variable">ex</span><span class="operator">,</span> <span class="variable">z</span><span class="punctuation">]</span><span class="operator">,</span> <span class="built_in">AppendTo</span><span class="punctuation">[</span><span class="variable">ex</span><span class="operator">,</span> <span class="variable">d</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="variable">z</span><span class="operator">,</span> <span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">c</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">z</span><span class="operator">,</span> <span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">c</span><span class="operator">,</span> <span class="variable">d</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Delete也不改变原表达式：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Delete</span><span class="punctuation">[</span><span class="variable">ex</span><span class="operator">,</span> <span class="number">1</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Delete</span><span class="punctuation">[</span><span class="variable">ex</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="operator">-</span><span class="number">1</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">c</span><span class="operator">,</span> <span class="variable">d</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">c</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>ReplacePart也不改变：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="built_in">ReplacePart</span><span class="punctuation">[</span><span class="variable">ex</span><span class="operator">,</span> <span class="number">1</span> <span class="operator">-&gt;</span> <span class="variable">x</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">ex</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="variable">x</span><span class="operator">,</span> <span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">c</span><span class="operator">,</span> <span class="variable">d</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">z</span><span class="operator">,</span> <span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">c</span><span class="operator">,</span> <span class="variable">d</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>但是下面会改变：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">ex</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span> <span class="operator">=</span> <span class="variable">y</span><span class="operator">;</span></span><br><span class="line"><span class="variable">ex</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">y</span><span class="operator">,</span> <span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">c</span><span class="operator">,</span> <span class="variable">d</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>下面的是旋转的函数：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Reverse</span><span class="punctuation">[</span><span class="variable">ex</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">RotateLeft</span><span class="punctuation">[</span><span class="variable">ex</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">RotateRight</span><span class="punctuation">[</span><span class="variable">ex</span><span class="operator">,</span> <span class="operator">-</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">d</span><span class="operator">,</span> <span class="variable">c</span><span class="operator">,</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">a</span><span class="operator">,</span> <span class="variable">y</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">b</span><span class="operator">,</span> <span class="variable">c</span><span class="operator">,</span> <span class="variable">d</span><span class="operator">,</span> <span class="variable">y</span><span class="operator">,</span> <span class="variable">a</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">c</span><span class="operator">,</span> <span class="variable">d</span><span class="operator">,</span> <span class="variable">y</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h3 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h3><p>头部一样的表达式之间的集合运算：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Join</span><span class="punctuation">[</span><span class="variable">f</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x3</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="operator">,</span> <span class="variable">x1</span><span class="operator">,</span> <span class="variable">x3</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Union</span><span class="punctuation">[</span><span class="variable">f</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="operator">,</span> <span class="variable">x1</span><span class="operator">,</span> <span class="variable">x3</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="operator">,</span> <span class="variable">x3</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Intersection</span><span class="punctuation">[</span><span class="variable">f</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="operator">,</span> <span class="variable">x3</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="operator">,</span> <span class="variable">x4</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Complement</span><span class="punctuation">[</span><span class="variable">f</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="operator">,</span> <span class="variable">x3</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="operator">,</span> <span class="variable">x4</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">x3</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">list</span> <span class="operator">=</span> <span class="built_in">Array</span><span class="punctuation">[</span><span class="built_in">RandomInteger</span><span class="punctuation">[</span><span class="number">10</span><span class="punctuation">]</span> <span class="operator">&amp;,</span> <span class="punctuation">&#123;</span><span class="number">20</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Sort</span><span class="punctuation">[</span><span class="variable">list</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">8</span><span class="operator">,</span> <span class="number">0</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">6</span><span class="operator">,</span> <span class="number">7</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">4</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">10</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">9</span><span class="operator">,</span> <span class="number">6</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">0</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">5</span><span class="operator">,</span> <span class="number">10</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">8</span><span class="operator">,</span> </span><br><span class="line">  <span class="number">10</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">1</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">8</span><span class="operator">,</span> <span class="number">5</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">5</span><span class="operator">,</span> <span class="number">8</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">9</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">10</span><span class="operator">,</span> <span class="number">7</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">4</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">9</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">4</span><span class="operator">,</span> </span><br><span class="line">  <span class="number">5</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">5</span><span class="operator">,</span> <span class="number">1</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">0</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">4</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">5</span><span class="operator">,</span> <span class="number">9</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">0</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">0</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">1</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">9</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">10</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">4</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">4</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">4</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">4</span><span class="operator">,</span> </span><br><span class="line">  <span class="number">5</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">5</span><span class="operator">,</span> <span class="number">1</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">5</span><span class="operator">,</span> <span class="number">8</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">5</span><span class="operator">,</span> <span class="number">9</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">5</span><span class="operator">,</span> <span class="number">10</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">6</span><span class="operator">,</span> <span class="number">7</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">8</span><span class="operator">,</span> <span class="number">0</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">8</span><span class="operator">,</span> <span class="number">5</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">8</span><span class="operator">,</span> </span><br><span class="line">  <span class="number">10</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">9</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">9</span><span class="operator">,</span> <span class="number">6</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">10</span><span class="operator">,</span> <span class="number">7</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Sort</span><span class="punctuation">[</span><span class="variable">list</span><span class="operator">,</span> <span class="built_in">Function</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="variable">list1</span><span class="operator">,</span> <span class="variable">list2</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="variable">list1</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span> <span class="operator">&lt;</span> <span class="variable">list2</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">0</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">1</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">0</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">9</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">10</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">4</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">4</span><span class="operator">,</span> <span class="number">5</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">4</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">4</span><span class="operator">,</span> </span><br><span class="line">  <span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">5</span><span class="operator">,</span> <span class="number">9</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">5</span><span class="operator">,</span> <span class="number">1</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">5</span><span class="operator">,</span> <span class="number">8</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">5</span><span class="operator">,</span> <span class="number">10</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">6</span><span class="operator">,</span> <span class="number">7</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">8</span><span class="operator">,</span> <span class="number">5</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">8</span><span class="operator">,</span> <span class="number">10</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">8</span><span class="operator">,</span> </span><br><span class="line">  <span class="number">0</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">9</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">9</span><span class="operator">,</span> <span class="number">6</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">10</span><span class="operator">,</span> <span class="number">7</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="built_in">Sort</span><span class="punctuation">[</span><span class="variable">list</span><span class="operator">,</span> <span class="punctuation">(</span><span class="type">#1</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span> <span class="operator">&lt;</span> <span class="type">#2</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">)</span> <span class="operator">||</span> <span class="punctuation">(</span><span class="type">#1</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span> <span class="operator">==</span> <span class="type">#2</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span> <span class="operator">&amp;&amp;</span> <span class="type">#1</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">]</span> <span class="operator">&gt;</span> <span class="type">#2</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">)</span> <span class="operator">&amp;</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">1</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">0</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">0</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">10</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">9</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">4</span><span class="operator">,</span> <span class="number">5</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">4</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">4</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">4</span><span class="operator">,</span> </span><br><span class="line">  <span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">5</span><span class="operator">,</span> <span class="number">10</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">5</span><span class="operator">,</span> <span class="number">9</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">5</span><span class="operator">,</span> <span class="number">8</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">5</span><span class="operator">,</span> <span class="number">1</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">6</span><span class="operator">,</span> <span class="number">7</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">8</span><span class="operator">,</span> <span class="number">10</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">8</span><span class="operator">,</span> <span class="number">5</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">8</span><span class="operator">,</span> </span><br><span class="line">  <span class="number">0</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">9</span><span class="operator">,</span> <span class="number">6</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">9</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">10</span><span class="operator">,</span> <span class="number">7</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">  </span><br><span class="line"><span class="variable">list</span> <span class="operator">=</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="operator">,</span> <span class="number">5</span><span class="operator">,</span> <span class="number">1</span><span class="operator">,</span> <span class="number">4</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="built_in">Sort</span><span class="punctuation">[</span><span class="variable">list</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Ordering</span><span class="punctuation">[</span><span class="variable">list</span><span class="punctuation">]</span></span><br><span class="line"><span class="variable">list</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="built_in">Ordering</span><span class="punctuation">[</span><span class="variable">list</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="operator">,</span> <span class="number">5</span><span class="operator">,</span> <span class="number">1</span><span class="operator">,</span> <span class="number">4</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="operator">,</span> <span class="number">4</span><span class="operator">,</span> <span class="number">5</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">4</span><span class="operator">,</span> <span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">5</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="operator">,</span> <span class="number">4</span><span class="operator">,</span> <span class="number">5</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="第三周"><a href="#第三周" class="headerlink" title="第三周"></a>第三周</h2><p>例：一种常用的提速技巧</p><p><code>Append</code>函数很慢，因为在表的最后插入数据，需要遍历整个表。</p><p>问题：找到不大于$n$的所有无平方因子的自然数</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">solution1</span> <span class="operator">=</span> </span><br><span class="line">  <span class="built_in">Function</span><span class="punctuation">[</span><span class="variable">n</span><span class="operator">,</span> <span class="variable">L</span> <span class="operator">=</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="operator">;</span> </span><br><span class="line">   <span class="built_in">Function</span><span class="punctuation">[</span><span class="variable">i</span><span class="operator">,</span> <span class="built_in">If</span><span class="punctuation">[</span><span class="built_in">SquareFreeQ</span><span class="punctuation">[</span><span class="variable">i</span><span class="punctuation">]</span><span class="operator">,</span> <span class="built_in">AppendTo</span><span class="punctuation">[</span><span class="variable">L</span><span class="operator">,</span> <span class="variable">i</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">]</span> <span class="operator">/@</span> <span class="built_in">Range</span><span class="punctuation">[</span><span class="variable">n</span><span class="punctuation">]</span><span class="operator">;</span> <span class="variable">L</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"><span class="variable">solution2</span> <span class="operator">=</span> </span><br><span class="line">  <span class="built_in">Function</span><span class="punctuation">[</span><span class="variable">n</span><span class="operator">,</span> <span class="variable">L</span> <span class="operator">=</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="operator">;</span> </span><br><span class="line">   <span class="built_in">Function</span><span class="punctuation">[</span><span class="variable">i</span><span class="operator">,</span> <span class="built_in">If</span><span class="punctuation">[</span><span class="built_in">SquareFreeQ</span><span class="punctuation">[</span><span class="variable">i</span><span class="punctuation">]</span><span class="operator">,</span> <span class="built_in">PrependTo</span><span class="punctuation">[</span><span class="variable">L</span><span class="operator">,</span> <span class="variable">i</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">]</span> <span class="operator">/@</span> <span class="built_in">Range</span><span class="punctuation">[</span><span class="variable">n</span><span class="punctuation">]</span><span class="operator">;</span> </span><br><span class="line">   <span class="built_in">Reverse</span><span class="punctuation">[</span><span class="variable">L</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"><span class="comment">(*嵌套表:Flatten*)</span></span><br><span class="line"><span class="variable">solution3</span> <span class="operator">=</span> </span><br><span class="line">  <span class="built_in">Function</span><span class="punctuation">[</span><span class="variable">n</span><span class="operator">,</span> <span class="variable">L</span> <span class="operator">=</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="operator">;</span> </span><br><span class="line">   <span class="built_in">Function</span><span class="punctuation">[</span><span class="variable">i</span><span class="operator">,</span> <span class="built_in">If</span><span class="punctuation">[</span><span class="built_in">SquareFreeQ</span><span class="punctuation">[</span><span class="variable">i</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">L</span> <span class="operator">=</span> <span class="punctuation">&#123;</span><span class="variable">L</span><span class="operator">,</span> <span class="variable">i</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">]</span> <span class="operator">/@</span> <span class="built_in">Range</span><span class="punctuation">[</span><span class="variable">n</span><span class="punctuation">]</span><span class="operator">;</span> </span><br><span class="line">   <span class="built_in">Flatten</span><span class="punctuation">[</span><span class="variable">L</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"><span class="comment">(*收获与播种*)</span></span><br><span class="line"><span class="variable">solution4</span> <span class="operator">=</span> </span><br><span class="line">  <span class="built_in">Function</span><span class="punctuation">[</span><span class="variable">n</span><span class="operator">,</span> </span><br><span class="line">   <span class="built_in">Reap</span><span class="punctuation">[</span><span class="built_in">Function</span><span class="punctuation">[</span><span class="variable">i</span><span class="operator">,</span> <span class="built_in">If</span><span class="punctuation">[</span><span class="built_in">SquareFreeQ</span><span class="punctuation">[</span><span class="variable">i</span><span class="punctuation">]</span><span class="operator">,</span> <span class="built_in">Sow</span><span class="punctuation">[</span><span class="variable">i</span><span class="punctuation">]</span><span class="operator">,</span> <span class="number">0</span><span class="punctuation">]</span><span class="punctuation">]</span> <span class="operator">/@</span> <span class="built_in">Range</span><span class="punctuation">[</span><span class="variable">n</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">2</span><span class="operator">,</span> </span><br><span class="line">     <span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Timing</span><span class="punctuation">[</span><span class="type">#</span><span class="punctuation">[</span><span class="number">50000</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span> <span class="operator">&amp;</span> <span class="operator">/@</span> <span class="punctuation">&#123;</span><span class="variable">solution1</span><span class="operator">,</span> <span class="variable">solution2</span><span class="operator">,</span> <span class="variable">solution3</span><span class="operator">,</span> </span><br><span class="line">  <span class="variable">solution4</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">1.5625</span><span class="operator">,</span> <span class="number">1.34375</span><span class="operator">,</span> <span class="number">0.125</span><span class="operator">,</span> <span class="number">0.109375</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>但是Flatten函数也存在缺点，就是当我们搜索的结果中含有表时，会破坏我们搜索结果的结构，我们可以使用下面的方法解决：</p><p>求解<code>Pell</code>方程$x^2-2y^2=1$的满足$1\le y\le n$的解。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">solution5</span> <span class="operator">=</span> </span><br><span class="line">  <span class="built_in">Function</span><span class="punctuation">[</span><span class="variable">n</span><span class="operator">,</span> <span class="variable">L</span> <span class="operator">=</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="operator">;</span> </span><br><span class="line">   <span class="built_in">Do</span><span class="punctuation">[</span><span class="built_in">If</span><span class="punctuation">[</span><span class="built_in">IntegerQ</span><span class="punctuation">[</span><span class="variable">x</span> <span class="operator">=</span> <span class="built_in">Sqrt</span><span class="punctuation">[</span><span class="number">1</span> <span class="operator">+</span> <span class="number">2</span> <span class="variable">y</span><span class="operator">^</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">L</span> <span class="operator">=</span> <span class="punctuation">&#123;</span><span class="variable">L</span><span class="operator">,</span> <span class="variable">list</span><span class="punctuation">[</span><span class="variable">x</span><span class="operator">,</span> <span class="variable">y</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">y</span> <span class="operator">,</span> </span><br><span class="line">     <span class="variable">n</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="operator">;</span> <span class="built_in">Flatten</span><span class="punctuation">[</span><span class="variable">L</span><span class="punctuation">]</span> <span class="operator">/.</span> <span class="punctuation">&#123;</span><span class="variable">list</span> <span class="operator">-&gt;</span> <span class="built_in">List</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="operator">;</span></span><br></pre></td></tr></table></figure><p>这里是用<code>list</code>代替<code>List</code>放置被压平，之后又还原。</p><p>但收获与播种不存在此类问题：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">solution6</span> <span class="operator">=</span> </span><br><span class="line"> <span class="built_in">Function</span><span class="punctuation">[</span><span class="variable">n</span><span class="operator">,</span> </span><br><span class="line">  <span class="built_in">Reap</span><span class="punctuation">[</span><span class="built_in">Do</span><span class="punctuation">[</span><span class="built_in">If</span><span class="punctuation">[</span><span class="built_in">IntegerQ</span><span class="punctuation">[</span><span class="variable">x</span> <span class="operator">=</span> <span class="built_in">Sqrt</span><span class="punctuation">[</span><span class="number">1</span> <span class="operator">+</span> <span class="number">2</span> <span class="variable">y</span><span class="operator">^</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="operator">,</span> <span class="built_in">Sow</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="variable">x</span><span class="operator">,</span> <span class="variable">y</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">y</span><span class="operator">,</span> <span class="variable">n</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">2</span><span class="operator">,</span></span><br><span class="line">     <span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>收获与播种是很有用的一种构造表的方法，它们还有更高级的用法：播种的时候可以给每个种子加标签，收获时可以按照标签或模式匹配进行收获。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Reap</span><span class="punctuation">[</span></span><br><span class="line"> <span class="built_in">Sow</span><span class="punctuation">[</span>张三<span class="operator">,</span> <span class="punctuation">&#123;</span>披萨<span class="operator">,</span> 可乐<span class="operator">,</span> 鸡翅<span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"> <span class="built_in">Sow</span><span class="punctuation">[</span>李四<span class="operator">,</span> <span class="punctuation">&#123;</span>意面<span class="operator">,</span> 可乐<span class="operator">,</span> 鸡翅<span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"> <span class="built_in">Sow</span><span class="punctuation">[</span>王五<span class="operator">,</span> <span class="punctuation">&#123;</span>披萨<span class="operator">,</span> 雪碧<span class="operator">,</span> 薯条<span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"> <span class="built_in">Sow</span><span class="punctuation">[</span>刘六<span class="operator">,</span> <span class="punctuation">&#123;</span>意面<span class="operator">,</span> 红茶<span class="operator">,</span> 沙拉<span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"> <span class="built_in">Sow</span><span class="punctuation">[</span>陈七<span class="operator">,</span> <span class="punctuation">&#123;</span>披萨<span class="operator">,</span> 可乐<span class="operator">,</span> 薯条<span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"> <span class="built_in">Sow</span><span class="punctuation">[</span>杨八<span class="operator">,</span> <span class="punctuation">&#123;</span>意面<span class="operator">,</span> 橙汁<span class="operator">,</span> 沙拉<span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="operator">;,</span></span><br><span class="line"> 红茶</span><br><span class="line"> <span class="punctuation">]</span></span><br><span class="line"> <span class="operator">&gt;</span> <span class="built_in">Null</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span>刘六<span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"> </span><br><span class="line"> <span class="built_in">Reap</span><span class="punctuation">[</span></span><br><span class="line"> <span class="built_in">Sow</span><span class="punctuation">[</span>张三<span class="operator">,</span> <span class="punctuation">&#123;</span>披萨<span class="operator">,</span> 可乐<span class="operator">,</span> 鸡翅<span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"> <span class="built_in">Sow</span><span class="punctuation">[</span>李四<span class="operator">,</span> <span class="punctuation">&#123;</span>意面<span class="operator">,</span> 可乐<span class="operator">,</span> 鸡翅<span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"> <span class="built_in">Sow</span><span class="punctuation">[</span>王五<span class="operator">,</span> <span class="punctuation">&#123;</span>披萨<span class="operator">,</span> 雪碧<span class="operator">,</span> 薯条<span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"> <span class="built_in">Sow</span><span class="punctuation">[</span>刘六<span class="operator">,</span> <span class="punctuation">&#123;</span>意面<span class="operator">,</span> 红茶<span class="operator">,</span> 沙拉<span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"> <span class="built_in">Sow</span><span class="punctuation">[</span>陈七<span class="operator">,</span> <span class="punctuation">&#123;</span>披萨<span class="operator">,</span> 可乐<span class="operator">,</span> 薯条<span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="operator">;</span></span><br><span class="line"> <span class="built_in">Sow</span><span class="punctuation">[</span>杨八<span class="operator">,</span> <span class="punctuation">&#123;</span>意面<span class="operator">,</span> 橙汁<span class="operator">,</span> 沙拉<span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="operator">;,</span></span><br><span class="line"> <span class="type">_</span><span class="operator">,</span> <span class="type">#1</span> <span class="operator">-&gt;</span> <span class="type">#2</span> <span class="operator">&amp;</span></span><br><span class="line"> <span class="punctuation">]</span></span><br><span class="line"> </span><br><span class="line"> <span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="built_in">Null</span><span class="operator">,</span> <span class="punctuation">&#123;</span>披萨 <span class="operator">-&gt;</span> <span class="punctuation">&#123;</span>张三<span class="operator">,</span> 王五<span class="operator">,</span> 陈七<span class="punctuation">&#125;</span><span class="operator">,</span> 可乐 <span class="operator">-&gt;</span> <span class="punctuation">&#123;</span>张三<span class="operator">,</span> 李四<span class="operator">,</span> 陈七<span class="punctuation">&#125;</span><span class="operator">,</span> 鸡翅 <span class="operator">-&gt;</span> <span class="punctuation">&#123;</span>张三<span class="operator">,</span> 李四<span class="punctuation">&#125;</span><span class="operator">,</span> </span><br><span class="line">  意面 <span class="operator">-&gt;</span> <span class="punctuation">&#123;</span>李四<span class="operator">,</span> 刘六<span class="operator">,</span> 杨八<span class="punctuation">&#125;</span><span class="operator">,</span> 雪碧 <span class="operator">-&gt;</span> <span class="punctuation">&#123;</span>王五<span class="punctuation">&#125;</span><span class="operator">,</span> 薯条 <span class="operator">-&gt;</span> <span class="punctuation">&#123;</span>王五<span class="operator">,</span> 陈七<span class="punctuation">&#125;</span><span class="operator">,</span> 红茶 <span class="operator">-&gt;</span> <span class="punctuation">&#123;</span>刘六<span class="punctuation">&#125;</span><span class="operator">,</span> </span><br><span class="line">  沙拉 <span class="operator">-&gt;</span> <span class="punctuation">&#123;</span>刘六<span class="operator">,</span> 杨八<span class="punctuation">&#125;</span><span class="operator">,</span> 橙汁 <span class="operator">-&gt;</span> <span class="punctuation">&#123;</span>杨八<span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>,</code>后的表示模式匹配,<code>_</code>表示所有模式都可，而后面的为匿名函数。</p><h3 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h3><p>我们已经提过Mathematica的第二原理：计算即重写。重写分两步、分别是模式匹配和规则代入。我们先讲模式匹配。</p><p>所谓模式，是指满足一定条件的表达式构成的集合。而模式匹配，就是从给定的待计算表达式中搜索出符合某种模式（即输入这个集合）的子表达式。模式匹配完成之后，我们就可以对这些匹配出来的子表达式应用计算规则，从而达到计算或化简的目的。有些时候，我们的目标本身就是某种搜索结果，如果善用模式匹配，就可以写出非常高效的程序。</p><p>根据定义，单个表达式也可以认为是一种模式，它只包含一个表达式作为其元素，这在模式匹配的时候也是很常见的。不过这种模式太简单了，我们称之为平凡模式，我们后面讨论模式时一般总假设是非平凡的。</p><p>最简单的(非平凡)的模式是<code>_</code>，全名<code>Blank[]</code>，它代表一切表达式。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FullForm</span> <span class="operator">/@</span> <span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="type">_</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">g</span><span class="punctuation">[</span><span class="type">_</span><span class="operator">,</span> <span class="type">_</span><span class="punctuation">]</span><span class="operator">,</span> <span class="type">_</span><span class="punctuation">[</span><span class="variable">x</span><span class="operator">,</span> <span class="variable">y</span><span class="punctuation">]</span><span class="operator">,</span> <span class="type">_</span><span class="punctuation">[</span><span class="type">_</span><span class="operator">,</span> <span class="type">_</span><span class="operator">,</span> <span class="type">_</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="built_in">Blank</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="operator">,</span><span class="variable">g</span><span class="punctuation">[</span><span class="built_in">Blank</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="operator">,</span><span class="built_in">Blank</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="operator">,</span><span class="built_in">Blank</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">[</span><span class="variable">x</span><span class="operator">,</span><span class="variable">y</span><span class="punctuation">]</span><span class="operator">,</span><span class="built_in">Blank</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">[</span><span class="built_in">Blank</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="operator">,</span><span class="built_in">Blank</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="operator">,</span><span class="built_in">Blank</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">FullForm</span> <span class="operator">/@</span> <span class="punctuation">&#123;</span><span class="type">_</span> <span class="operator">+</span> <span class="type">_</span><span class="operator">,</span> <span class="type">_</span> <span class="operator">-</span> <span class="type">_</span><span class="operator">,</span> <span class="type">_</span><span class="operator">*_,</span> <span class="type">_</span><span class="operator">^_</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="built_in">Times</span><span class="punctuation">[</span><span class="number">2</span><span class="operator">,</span><span class="built_in">Blank</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="operator">,</span><span class="number">0</span><span class="operator">,</span><span class="built_in">Power</span><span class="punctuation">[</span><span class="built_in">Blank</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="operator">,</span><span class="number">2</span><span class="punctuation">]</span><span class="operator">,</span><span class="built_in">Power</span><span class="punctuation">[</span><span class="built_in">Blank</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="operator">,</span><span class="built_in">Blank</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">MatchQ</span><span class="punctuation">[</span><span class="variable">a</span> <span class="operator">+</span> <span class="variable">b</span><span class="operator">,</span> <span class="type">_</span> <span class="operator">+</span> <span class="type">_</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">MatchQ</span><span class="punctuation">[</span><span class="variable">a</span> <span class="operator">+</span> <span class="variable">a</span><span class="operator">,</span> <span class="type">_</span> <span class="operator">+</span> <span class="type">_</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">MatchQ</span><span class="punctuation">[</span><span class="variable">a</span> <span class="operator">-</span> <span class="variable">b</span><span class="operator">,</span> <span class="type">_</span> <span class="operator">-</span> <span class="type">_</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">MatchQ</span><span class="punctuation">[</span><span class="variable">a</span> <span class="operator">-</span> <span class="variable">a</span><span class="operator">,</span> <span class="type">_</span> <span class="operator">-</span> <span class="type">_</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">MatchQ</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">*</span><span class="variable">b</span><span class="operator">,</span> <span class="type">_</span><span class="operator">*_</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">MatchQ</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">*</span><span class="variable">a</span><span class="operator">,</span> <span class="type">_</span><span class="operator">*_</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">MatchQ</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">/</span><span class="variable">b</span><span class="operator">,</span> <span class="type">_</span><span class="operator">/_</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">MatchQ</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">/</span><span class="variable">a</span><span class="operator">,</span> <span class="type">_</span><span class="operator">/_</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">MatchQ</span><span class="punctuation">[</span><span class="variable">g</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="punctuation">]</span><span class="operator">,</span> <span class="type">_</span><span class="punctuation">[</span><span class="type">_</span><span class="operator">,</span> <span class="type">_</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">False</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">True</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">False</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">True</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">False</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">True</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">False</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">True</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">True</span></span><br></pre></td></tr></table></figure><p><code>+,-,/,*</code>为具体的二元运算，而<code>g</code>为抽象的二元运算，所以结果可能有所不同。</p><p>我们可以将匹配好的模式命名，其完整形式为Pattern[name, pattern]，简写形式有两种，分别对应于不同的优先级。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FullForm</span><span class="punctuation">[</span><span class="type">x_</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">FullForm</span><span class="punctuation">[</span><span class="variable">x</span> <span class="operator">:</span> <span class="type">_</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">FullForm</span><span class="punctuation">[</span><span class="type">x_</span><span class="punctuation">[</span><span class="type">_</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">FullForm</span><span class="punctuation">[</span><span class="variable">x</span> <span class="operator">:</span> <span class="type">_</span><span class="punctuation">[</span><span class="type">_</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">Pattern</span><span class="punctuation">[</span><span class="variable">x</span><span class="operator">,</span><span class="built_in">Blank</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">Pattern</span><span class="punctuation">[</span><span class="variable">x</span><span class="operator">,</span><span class="built_in">Blank</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">Pattern</span><span class="punctuation">[</span><span class="variable">x</span><span class="operator">,</span><span class="built_in">Blank</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">[</span><span class="built_in">Blank</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">Pattern</span><span class="punctuation">[</span><span class="variable">x</span><span class="operator">,</span><span class="built_in">Blank</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">[</span><span class="built_in">Blank</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>如果在一个模式中，同一个命名模式出现了多次，它们会被认为是同样的。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">MatchQ</span><span class="punctuation">[</span><span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">a</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="type">x_</span><span class="operator">,</span> <span class="type">x_</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">MatchQ</span><span class="punctuation">[</span><span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="type">x_</span><span class="operator">,</span> <span class="type">x_</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">MatchQ</span><span class="punctuation">[</span><span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="type">x_</span><span class="operator">,</span> <span class="type">y_</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">True</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">False</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">True</span></span><br></pre></td></tr></table></figure><p>注意模式匹配是按Mathematica内部的FullForm匹配的，它总是基于结构的，而非基于数学的。例如当我们匹配<code>x^_</code>这个模式时，<code>x</code>本身并不会匹配到，尽管在数学上$x=x^1$。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">^</span><span class="number">2</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">^</span><span class="number">3</span><span class="punctuation">&#125;</span> <span class="operator">/.</span> <span class="punctuation">&#123;</span><span class="variable">x</span><span class="operator">^</span><span class="type">n_</span> <span class="operator">:&gt;</span>  <span class="variable">p</span><span class="punctuation">[</span><span class="variable">n</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="number">1</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">,</span> <span class="variable">p</span><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">p</span><span class="punctuation">[</span><span class="number">3</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>为了解决这个问题，我们可以这样：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">^</span><span class="number">2</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">^</span><span class="number">3</span><span class="punctuation">&#125;</span> <span class="operator">/.</span> <span class="punctuation">&#123;</span><span class="variable">x</span><span class="operator">^</span><span class="type">n_</span> <span class="operator">:&gt;</span>  <span class="variable">p</span><span class="punctuation">[</span><span class="variable">n</span><span class="punctuation">]</span><span class="operator">,</span> <span class="number">1</span> <span class="operator">-&gt;</span> <span class="variable">p</span><span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">x</span> <span class="operator">-&gt;</span> <span class="variable">p</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="variable">p</span><span class="punctuation">[</span><span class="number">0</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">p</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">p</span><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">p</span><span class="punctuation">[</span><span class="number">3</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>但是如果有涉及到带有交换性、结合性的函数，Mathematica也会变得聪明一些。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="variable">a</span> <span class="operator">+</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">b</span> <span class="operator">+</span> <span class="variable">c</span><span class="operator">,</span> <span class="built_in">Plus</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="built_in">Plus</span><span class="punctuation">[</span><span class="variable">b</span><span class="operator">,</span> <span class="variable">c</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">&#125;</span> <span class="operator">/.</span> <span class="punctuation">&#123;</span><span class="variable">b</span> <span class="operator">+</span> <span class="type">x_</span>  <span class="operator">:&gt;</span> <span class="variable">x</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">c</span><span class="operator">,</span> <span class="variable">a</span> <span class="operator">+</span> <span class="variable">c</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这是因为Plus这个函数在Mathematica内部具有Flat和Orderless两种属性，分别对应于结合性和交换性。Mathematica在做模式匹配的时候会考虑这些属性导致的一些等价形式，如Plus[a,b] = Plus[b,a]，Plus[a,Plus[b,c]] = Plus[b, Plus[a,c]]等等。</p><p>我们可以用Cases函数来列出所匹配的东西，不指定深度只搜第一层：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Cases</span><span class="punctuation">[</span><span class="number">1</span> <span class="operator">+</span> <span class="variable">x</span> <span class="operator">+</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">x</span><span class="operator">^</span><span class="number">2</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">^</span><span class="number">3</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">^_</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Cases</span><span class="punctuation">[</span><span class="number">1</span> <span class="operator">+</span> <span class="variable">x</span> <span class="operator">+</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">x</span><span class="operator">^</span><span class="number">2</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">^</span><span class="number">3</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">^_,</span> <span class="built_in">Infinity</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="variable">x</span><span class="operator">^</span><span class="number">2</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">^</span><span class="number">3</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Max</span><span class="punctuation">[</span><span class="built_in">Cases</span><span class="punctuation">[</span><span class="variable">a0</span> <span class="operator">+</span> <span class="variable">a1</span> <span class="variable">x</span> <span class="operator">+</span> <span class="variable">a2</span> <span class="variable">x</span><span class="operator">^</span><span class="number">2</span> <span class="operator">+</span> <span class="variable">a3</span> <span class="variable">x</span><span class="operator">^</span><span class="number">3</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">^</span><span class="type">n_</span> <span class="operator">:&gt;</span> <span class="variable">n</span><span class="operator">,</span> <span class="built_in">Infinity</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>可以用模式匹配模式：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Cases</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="variable">a</span> <span class="operator">-&gt;</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">c</span> <span class="operator">-&gt;</span> <span class="variable">d</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="built_in">HoldPattern</span><span class="punctuation">[</span><span class="variable">a</span> <span class="operator">-&gt;</span> <span class="type">_</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="variable">a</span> <span class="operator">-&gt;</span> <span class="variable">b</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>还可以用DeleteCases去掉被匹配到的东西。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">DeleteCases</span><span class="punctuation">[</span><span class="variable">f</span><span class="punctuation">[</span><span class="variable">x</span><span class="punctuation">]</span> <span class="operator">+</span> <span class="variable">g</span><span class="punctuation">[</span><span class="variable">y</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="type">_</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">g</span><span class="punctuation">[</span><span class="variable">y</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">DeleteCases</span><span class="punctuation">[</span><span class="built_in">CoefficientList</span><span class="punctuation">[</span><span class="punctuation">(</span><span class="number">1</span> <span class="operator">+</span> <span class="variable">x</span><span class="punctuation">)</span><span class="operator">^</span><span class="number">10</span> <span class="operator">+</span> <span class="punctuation">(</span><span class="number">1</span> <span class="operator">-</span> <span class="variable">x</span><span class="punctuation">)</span><span class="operator">^</span><span class="number">10</span><span class="operator">,</span> <span class="variable">x</span><span class="punctuation">]</span><span class="operator">,</span> <span class="number">0</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">90</span><span class="operator">,</span> <span class="number">420</span><span class="operator">,</span> <span class="number">420</span><span class="operator">,</span> <span class="number">90</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">(*CoefficientList求多项式系数*)</span></span><br></pre></td></tr></table></figure><p>比简单匹配稍微复杂一点的是类型匹配，完整形式为Blank[head]：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Cases</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2.5</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">,</span> <span class="variable">y</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">x</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="type">_f</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Cases</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2.5</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">,</span> <span class="variable">y</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">x</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="type">_Symbol</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Cases</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2.5</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">,</span> <span class="variable">y</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">x</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="type">_Integer</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Cases</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2.5</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">,</span> <span class="variable">y</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">x</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="type">_Real</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="variable">x</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="variable">x</span><span class="operator">,</span><span class="variable">y</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">2.5</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>更复杂的是带条件的模式：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Cases</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="operator">,</span> <span class="number">4</span><span class="operator">,</span> <span class="number">5</span><span class="operator">,</span> <span class="number">6</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">,</span> <span class="variable">y</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="type">_</span><span class="operator">?</span><span class="punctuation">(</span><span class="built_in">EvenQ</span><span class="punctuation">[</span><span class="punctuation">(</span><span class="type">#</span> <span class="operator">+</span> <span class="type">#</span><span class="operator">^</span><span class="number">2</span><span class="punctuation">)</span><span class="operator">/</span><span class="number">2</span><span class="punctuation">]</span> <span class="operator">&amp;</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Cases</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="operator">,</span> <span class="number">4</span><span class="operator">,</span> <span class="number">5</span><span class="operator">,</span> <span class="number">6</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">,</span> <span class="variable">y</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="type">_</span><span class="operator">?</span><span class="punctuation">(</span><span class="built_in">Not</span><span class="operator">@</span><span class="built_in">EvenQ</span><span class="punctuation">[</span><span class="punctuation">(</span><span class="type">#</span> <span class="operator">+</span> <span class="type">#</span><span class="operator">^</span><span class="number">2</span><span class="punctuation">)</span><span class="operator">/</span><span class="number">2</span><span class="punctuation">]</span> <span class="operator">&amp;</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Cases</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="operator">,</span> <span class="number">4</span><span class="operator">,</span> <span class="number">5</span><span class="operator">,</span> <span class="number">6</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">,</span> <span class="variable">y</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="built_in">Except</span><span class="punctuation">[</span><span class="type">_</span><span class="operator">?</span><span class="punctuation">(</span><span class="built_in">EvenQ</span><span class="punctuation">[</span><span class="punctuation">(</span><span class="type">#</span> <span class="operator">+</span> <span class="type">#</span><span class="operator">^</span><span class="number">2</span><span class="punctuation">)</span><span class="operator">/</span><span class="number">2</span><span class="punctuation">]</span> <span class="operator">&amp;</span><span class="punctuation">)</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Cases</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="operator">,</span> <span class="number">4</span><span class="operator">,</span> <span class="number">5</span><span class="operator">,</span> <span class="number">6</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">,</span> <span class="variable">y</span><span class="punctuation">&#125;</span><span class="operator">,</span> </span><br><span class="line"> <span class="built_in">Except</span><span class="punctuation">[</span><span class="type">_</span><span class="operator">?</span><span class="punctuation">(</span><span class="built_in">EvenQ</span><span class="punctuation">[</span><span class="punctuation">(</span><span class="type">#</span> <span class="operator">+</span> <span class="type">#</span><span class="operator">^</span><span class="number">2</span><span class="punctuation">)</span><span class="operator">/</span><span class="number">2</span><span class="punctuation">]</span> <span class="operator">&amp;</span><span class="punctuation">)</span><span class="operator">,</span> <span class="type">_</span><span class="operator">?</span><span class="built_in">NumberQ</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"> <span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">3</span><span class="operator">,</span> <span class="number">4</span><span class="punctuation">&#125;</span></span><br><span class="line"> <span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">5</span><span class="operator">,</span> <span class="number">6</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">,</span> <span class="variable">y</span><span class="punctuation">&#125;</span></span><br><span class="line"> <span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">5</span><span class="operator">,</span> <span class="number">6</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">,</span> <span class="variable">y</span><span class="punctuation">&#125;</span></span><br><span class="line"> <span class="operator">&gt;</span> <span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">5</span><span class="operator">,</span> <span class="number">6</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>Except[c,p]</code>满足<code>p</code>但不满足<code>c</code>。</p><p>与命名类似，条件也有更低优先级的一种简写形式：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Cases</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">3</span><span class="operator">,</span> <span class="number">1</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="type">_</span><span class="operator">?</span><span class="punctuation">(</span><span class="type">#</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="punctuation">]</span> <span class="operator">&lt;</span> <span class="type">#</span><span class="punctuation">[</span><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span><span class="punctuation">]</span> <span class="operator">&amp;</span><span class="punctuation">)</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Cases</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">3</span><span class="operator">,</span> <span class="number">1</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="type">x_</span><span class="operator">,</span> <span class="type">y_</span><span class="punctuation">&#125;</span> <span class="operator">/;</span> <span class="variable">x</span> <span class="operator">&lt;</span> <span class="variable">y</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>运算符<code>/;</code>经常被用来定义分情况的函数，如著名的$3x+1$问题：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">f</span><span class="punctuation">[</span><span class="type">n_</span><span class="punctuation">]</span> <span class="operator">:=</span> <span class="variable">n</span><span class="operator">/</span><span class="number">2</span> <span class="operator">/;</span> <span class="built_in">EvenQ</span><span class="punctuation">[</span><span class="variable">n</span><span class="punctuation">]</span></span><br><span class="line"><span class="variable">f</span><span class="punctuation">[</span><span class="type">n_</span><span class="punctuation">]</span> <span class="operator">:=</span> <span class="number">3</span> <span class="variable">n</span> <span class="operator">+</span> <span class="number">1</span> <span class="operator">/;</span> <span class="built_in">OddQ</span><span class="punctuation">[</span><span class="variable">n</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>如何定义双线性运算？</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">inner</span><span class="punctuation">[</span><span class="type">x1_</span> <span class="operator">+</span> <span class="type">x2_</span><span class="operator">,</span> <span class="type">x3_</span><span class="punctuation">]</span> <span class="operator">:=</span> <span class="variable">inner</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x3</span><span class="punctuation">]</span> <span class="operator">+</span> <span class="variable">inner</span><span class="punctuation">[</span><span class="variable">x2</span><span class="operator">,</span> <span class="variable">x3</span><span class="punctuation">]</span></span><br><span class="line"><span class="variable">inner</span><span class="punctuation">[</span><span class="type">x1_</span><span class="operator">,</span> <span class="type">x2_</span> <span class="operator">+</span> <span class="type">x3_</span><span class="punctuation">]</span> <span class="operator">:=</span> <span class="variable">inner</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="punctuation">]</span> <span class="operator">+</span> <span class="variable">inner</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x3</span><span class="punctuation">]</span></span><br><span class="line"><span class="variable">inner</span><span class="punctuation">[</span><span class="type">a_</span><span class="operator">?</span><span class="built_in">NumberQ</span> <span class="type">x1_</span><span class="operator">,</span> <span class="type">x2_</span><span class="punctuation">]</span> <span class="operator">:=</span> <span class="variable">a</span> <span class="variable">inner</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="punctuation">]</span></span><br><span class="line"><span class="variable">inner</span><span class="punctuation">[</span><span class="type">x1_</span><span class="operator">,</span> <span class="type">a_</span><span class="operator">?</span><span class="built_in">NumberQ</span> <span class="type">x2_</span><span class="punctuation">]</span> <span class="operator">:=</span> <span class="variable">a</span> <span class="variable">inner</span><span class="punctuation">[</span><span class="variable">x1</span><span class="operator">,</span> <span class="variable">x2</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="variable">inner</span><span class="punctuation">[</span><span class="number">3</span> <span class="variable">x</span> <span class="operator">+</span> <span class="number">2</span> <span class="variable">y</span><span class="operator">,</span> <span class="variable">z</span><span class="operator">/</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="number">3</span><span class="operator">/</span><span class="number">2</span> <span class="variable">inner</span><span class="punctuation">[</span><span class="variable">x</span><span class="operator">,</span> <span class="variable">z</span><span class="punctuation">]</span> <span class="operator">+</span> <span class="variable">inner</span><span class="punctuation">[</span><span class="variable">y</span><span class="operator">,</span> <span class="variable">z</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>有时候我们需要对好几种情况做同一种规则代入，这时候就需要”或然匹配”，其形式为<code>p1|p2|p3</code>：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">1</span><span class="operator">/</span><span class="number">2</span><span class="operator">,</span> <span class="number">0.25</span><span class="operator">,</span> <span class="number">3</span> <span class="operator">+</span> <span class="number">4</span> <span class="built_in">I</span><span class="punctuation">&#125;</span> <span class="operator">/.</span> <span class="punctuation">&#123;</span><span class="type">_Rational</span> <span class="operator">-&gt;</span> <span class="number">0</span><span class="operator">,</span> <span class="type">_Real</span> <span class="operator">-&gt;</span> <span class="number">0</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">1</span><span class="operator">/</span><span class="number">2</span><span class="operator">,</span> <span class="number">0.25</span><span class="operator">,</span> <span class="number">3</span> <span class="operator">+</span> <span class="number">4</span> <span class="built_in">I</span><span class="punctuation">&#125;</span> <span class="operator">/.</span> <span class="punctuation">&#123;</span><span class="type">_Rational</span> <span class="operator">|</span> <span class="type">_Real</span> <span class="operator">-&gt;</span> <span class="number">0</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="built_in">Cases</span><span class="punctuation">[</span><span class="built_in">Symbol</span> <span class="operator">/@</span> <span class="built_in">CharacterRange</span><span class="punctuation">[</span><span class="string">&quot;a&quot;</span><span class="operator">,</span> <span class="string">&quot;z&quot;</span><span class="punctuation">]</span><span class="operator">,</span> <span class="built_in">Except</span><span class="punctuation">[</span><span class="variable">a</span> <span class="operator">|</span> <span class="variable">e</span> <span class="operator">|</span> <span class="variable">i</span> <span class="operator">|</span> <span class="variable">o</span> <span class="operator">|</span> <span class="variable">u</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">0</span><span class="operator">,</span> <span class="number">0</span><span class="operator">,</span> <span class="number">3</span> <span class="operator">+</span> <span class="number">4</span> <span class="built_in">I</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">0</span><span class="operator">,</span> <span class="number">0</span><span class="operator">,</span> <span class="number">3</span> <span class="operator">+</span> <span class="number">4</span> <span class="built_in">I</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="variable">b</span><span class="operator">,</span> <span class="variable">c</span><span class="operator">,</span> <span class="variable">d</span><span class="operator">,</span> <span class="variable">f</span><span class="operator">,</span> <span class="variable">g</span><span class="operator">,</span> <span class="variable">h</span><span class="operator">,</span> <span class="variable">j</span><span class="operator">,</span> <span class="variable">k</span><span class="operator">,</span> <span class="variable">l</span><span class="operator">,</span> <span class="variable">m</span><span class="operator">,</span> <span class="variable">n</span><span class="operator">,</span> <span class="variable">p</span><span class="operator">,</span> <span class="variable">q</span><span class="operator">,</span> <span class="variable">r</span><span class="operator">,</span> <span class="variable">s</span><span class="operator">,</span> <span class="variable">t</span><span class="operator">,</span> <span class="variable">v</span><span class="operator">,</span> <span class="variable">w</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">,</span> <span class="variable">y</span><span class="operator">,</span> <span class="variable">z</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>之前模式匹配都是针对一个表达式的，模式匹配还可以对表达式序列进行。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">x</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">x</span><span class="operator">,</span> <span class="variable">y</span><span class="punctuation">]</span><span class="punctuation">&#125;</span> <span class="operator">/.</span> <span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="type">a__</span><span class="punctuation">]</span> <span class="operator">:&gt;</span> <span class="punctuation">&#123;</span><span class="variable">a</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">x</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">x</span><span class="operator">,</span> <span class="variable">y</span><span class="punctuation">]</span><span class="punctuation">&#125;</span> <span class="operator">/.</span> <span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="type">a___</span><span class="punctuation">]</span> <span class="operator">:&gt;</span> <span class="punctuation">&#123;</span><span class="variable">a</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">x</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">x</span><span class="operator">,</span> <span class="variable">y</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">x</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">x</span><span class="operator">,</span> <span class="variable">y</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>两个下划线对于空(0个表达式，对应于f[]无表达式)不匹配，三个下划线匹配空为空。</p><p>例子：判断表中元素是否都是素数。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">listPrimeQ</span><span class="punctuation">[</span><span class="type">list_</span><span class="punctuation">]</span> <span class="operator">:=</span> </span><br><span class="line"> <span class="built_in">Not</span><span class="operator">@</span><span class="built_in">MatchQ</span><span class="punctuation">[</span><span class="variable">list</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="type">___</span><span class="operator">,</span> <span class="type">_</span><span class="operator">?</span><span class="punctuation">(</span><span class="built_in">Not</span><span class="punctuation">[</span><span class="built_in">PrimeQ</span><span class="punctuation">[</span><span class="type">#</span><span class="punctuation">]</span><span class="punctuation">]</span> <span class="operator">&amp;</span><span class="punctuation">)</span><span class="operator">,</span> <span class="type">___</span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"> <span class="comment">(*前后两个___，表示前面有0个或多个表达式，中间的不能为素数*)</span></span><br><span class="line"><span class="variable">list</span> <span class="operator">=</span> <span class="built_in">Array</span><span class="punctuation">[</span><span class="type">#</span><span class="operator">^</span><span class="number">2</span> <span class="operator">+</span> <span class="type">#</span> <span class="operator">+</span> <span class="number">41</span> <span class="operator">&amp;,</span> <span class="number">40</span><span class="operator">,</span> <span class="number">0</span><span class="punctuation">]</span></span><br><span class="line"><span class="variable">listPrimeQ</span><span class="punctuation">[</span><span class="variable">list</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="built_in">True</span></span><br></pre></td></tr></table></figure><p>用Longest和Shortest可以控制<code>__</code>和<code>___</code>的匹配长度：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">c</span><span class="operator">,</span> <span class="variable">d</span><span class="operator">,</span> <span class="variable">e</span><span class="operator">,</span> <span class="variable">f</span><span class="operator">,</span> <span class="variable">g</span><span class="punctuation">&#125;</span> <span class="operator">/.</span> <span class="punctuation">&#123;</span><span class="type">x__</span><span class="operator">,</span> <span class="type">y__</span><span class="operator">,</span> <span class="type">z__</span><span class="punctuation">&#125;</span> <span class="operator">-&gt;</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="variable">x</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">y</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">z</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">c</span><span class="operator">,</span> <span class="variable">d</span><span class="operator">,</span> <span class="variable">e</span><span class="operator">,</span> <span class="variable">f</span><span class="operator">,</span> <span class="variable">g</span><span class="punctuation">&#125;</span> <span class="operator">/.</span> <span class="punctuation">&#123;</span><span class="type">x__</span><span class="operator">,</span> <span class="built_in">Longest</span><span class="punctuation">[</span><span class="type">y__</span><span class="punctuation">]</span><span class="operator">,</span> <span class="type">z__</span><span class="punctuation">&#125;</span> <span class="operator">-&gt;</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="variable">x</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">y</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">z</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="variable">a</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">b</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">c</span><span class="operator">,</span> <span class="variable">d</span><span class="operator">,</span> <span class="variable">e</span><span class="operator">,</span> <span class="variable">f</span><span class="operator">,</span> <span class="variable">g</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="punctuation">&#123;</span><span class="variable">a</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">b</span><span class="operator">,</span> <span class="variable">c</span><span class="operator">,</span> <span class="variable">d</span><span class="operator">,</span> <span class="variable">e</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">g</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>重复模式：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Cases</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">a</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">a</span><span class="operator">,</span> <span class="variable">a</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span> <span class="operator">..</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Cases</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">a</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">a</span><span class="operator">,</span> <span class="variable">a</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="built_in">Repeated</span><span class="punctuation">[</span><span class="variable">a</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Cases</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">a</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">a</span><span class="operator">,</span> <span class="variable">a</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="built_in">Repeated</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="built_in">Cases</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">a</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">a</span><span class="operator">,</span> <span class="variable">a</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="built_in">Repeated</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">a</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">a</span><span class="operator">,</span> <span class="variable">a</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">a</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">a</span><span class="operator">,</span> <span class="variable">a</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">a</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">a</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">a</span><span class="operator">,</span> <span class="variable">a</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>模式序列：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">f</span><span class="punctuation">[</span><span class="variable">x</span> <span class="operator">:</span> <span class="built_in">PatternSequence</span><span class="punctuation">[</span><span class="type">_</span><span class="operator">,</span> <span class="type">_</span><span class="punctuation">]</span><span class="operator">,</span> <span class="type">y___</span><span class="punctuation">]</span> <span class="operator">:=</span> <span class="variable">p</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="variable">x</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="variable">y</span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="operator">,</span> <span class="number">4</span><span class="operator">,</span> <span class="number">5</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">p</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">p</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="punctuation">&#125;</span><span class="operator">,</span> <span class="punctuation">&#123;</span><span class="number">3</span><span class="operator">,</span> <span class="number">4</span><span class="operator">,</span> <span class="number">5</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">a</span><span class="operator">,</span> <span class="variable">a</span><span class="operator">,</span> </span><br><span class="line">  <span class="variable">b</span><span class="punctuation">&#125;</span> <span class="operator">/.</span> <span class="punctuation">&#123;</span><span class="type">___</span><span class="operator">,</span> <span class="variable">x</span> <span class="operator">:</span> <span class="built_in">Longest</span><span class="punctuation">[</span><span class="built_in">PatternSequence</span><span class="punctuation">[</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="punctuation">]</span> <span class="operator">..</span><span class="punctuation">]</span><span class="operator">,</span> <span class="type">___</span><span class="punctuation">&#125;</span> <span class="operator">:&gt;</span> <span class="punctuation">&#123;</span><span class="variable">x</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="operator">,</span> <span class="variable">a</span><span class="operator">,</span> <span class="variable">b</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>模式的默认值：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">plus</span><span class="punctuation">[</span><span class="type">x_</span><span class="operator">:</span> <span class="number">0</span><span class="operator">,</span> <span class="type">y_</span><span class="operator">:</span> <span class="number">0</span><span class="punctuation">]</span> <span class="operator">:=</span> <span class="variable">x</span> <span class="operator">+</span> <span class="variable">y</span><span class="operator">;</span></span><br><span class="line"><span class="variable">plus</span><span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="variable">plus</span><span class="punctuation">[</span><span class="variable">x</span><span class="punctuation">]</span></span><br><span class="line"><span class="variable">plus</span><span class="punctuation">[</span><span class="variable">x</span><span class="operator">,</span> <span class="variable">y</span><span class="punctuation">]</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">x</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="variable">x</span><span class="operator">+</span><span class="variable">y</span></span><br></pre></td></tr></table></figure><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">^</span><span class="number">2</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">^</span><span class="number">3</span><span class="punctuation">&#125;</span> <span class="operator">/.</span> <span class="punctuation">&#123;</span><span class="variable">x</span><span class="operator">^</span><span class="type">n_</span> <span class="operator">:&gt;</span> <span class="variable">n</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">^</span><span class="number">2</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">^</span><span class="number">3</span><span class="punctuation">&#125;</span> <span class="operator">/.</span> <span class="punctuation">&#123;</span><span class="variable">x</span><span class="operator">^</span><span class="type">n_</span><span class="operator">.</span> <span class="operator">:&gt;</span>  <span class="variable">n</span><span class="punctuation">&#125;</span><span class="comment">(*相当于把Power函数的默认值也考虑进去了*)</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">1</span><span class="operator">,</span> <span class="number">1</span><span class="operator">,</span> <span class="number">2</span><span class="operator">,</span> <span class="number">3</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>字面模式：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="type">x_</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="type">y_</span><span class="punctuation">]</span><span class="punctuation">&#125;</span> <span class="operator">/.</span> <span class="variable">f</span><span class="punctuation">[</span><span class="type">x_</span><span class="punctuation">]</span> <span class="operator">:&gt;</span> <span class="variable">x</span><span class="operator">^</span><span class="number">2</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="type">x_</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="type">y_</span><span class="punctuation">]</span><span class="punctuation">&#125;</span> <span class="operator">/.</span> <span class="variable">f</span><span class="punctuation">[</span><span class="built_in">Verbatim</span><span class="punctuation">[</span><span class="type">x_</span><span class="punctuation">]</span><span class="punctuation">]</span> <span class="operator">:&gt;</span> <span class="variable">x</span><span class="operator">^</span><span class="number">2</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="number">4</span><span class="operator">,</span> <span class="variable">a</span><span class="operator">^</span><span class="number">2</span><span class="operator">,</span> <span class="type">x_</span><span class="operator">^</span><span class="number">2</span><span class="operator">,</span> <span class="type">y_</span><span class="operator">^</span><span class="number">2</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="punctuation">&#123;</span><span class="variable">f</span><span class="punctuation">[</span><span class="number">2</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="variable">a</span><span class="punctuation">]</span><span class="operator">,</span> <span class="variable">x</span><span class="operator">^</span><span class="number">2</span><span class="operator">,</span> <span class="variable">f</span><span class="punctuation">[</span><span class="type">y_</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Farticle%2F7d065302ef2984abddb60152758c13bd66f74fba.jpg&amp;refer=http%3A%2F%2Fi0.hdslb.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1659263087&amp;t=447b47f50cbb4d4d181ed18e4ac43cb5&quot; style=&quot;zoom: 100%;&quot; /&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt; B站课程链接：&lt;a href=&quot;https://www.bilibili.com/video/BV1av411N7Xi?spm_id_from=333.999.0.0&amp;amp;vd_source=6177c61c946280bb88c727585de76bc8&quot;&gt;https://www.bilibili.com/video/BV1av411N7Xi?spm_id_from=333.999.0.0&amp;amp;vd_source=6177c61c946280bb88c727585de76bc8&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="课程笔记" scheme="https://www.hfcouc.work/categories/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Mathematica" scheme="https://www.hfcouc.work/tags/Mathematica/"/>
    
    <category term="编程" scheme="https://www.hfcouc.work/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Statistical Rethinking:Chapter3</title>
    <link href="https://www.hfcouc.work/2022/06/29/rt3/"/>
    <id>https://www.hfcouc.work/2022/06/29/rt3/</id>
    <published>2022-06-29T06:55:16.000Z</published>
    <updated>2022-06-29T06:57:19.641Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Sampling-the-Imaginary"><a href="#Sampling-the-Imaginary" class="headerlink" title="Sampling the Imaginary"></a>Sampling the Imaginary</h2><p><img src="https://raw.githubusercontent.com/HFC666/image/master/img/rt3_1.png" alt=""></p><span id="more"></span><h3 id="Sampling-from-a-grid-approximate"><a href="#Sampling-from-a-grid-approximate" class="headerlink" title="Sampling from a grid-approximate"></a>Sampling from a grid-approximate</h3><p>我们先用第二章的例子生成后验分布：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p_grid &lt;- seq(from=<span class="number">0</span>, to=<span class="number">1</span>, length.out=<span class="number">1000</span>)</span><br><span class="line">prior &lt;- <span class="built_in">rep</span>(<span class="number">1</span>, <span class="number">1000</span>)</span><br><span class="line">likelihood &lt;- dbinom(<span class="number">6</span>, size = <span class="number">9</span>, prob = p_grid)</span><br><span class="line">posterior &lt;- likelihood * prior</span><br><span class="line">posterior &lt;- posterior / <span class="built_in">sum</span>(posterior)</span><br></pre></td></tr></table></figure><p>下面我们对后验进行抽样，抽取$10000$个样本：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sample</span></span><br><span class="line">samples &lt;- sample(p_grid, prob = posterior, size = <span class="number">1e4</span>, replace = <span class="literal">TRUE</span>)</span><br><span class="line"><span class="comment"># plot(samples)</span></span><br><span class="line">dens(samples)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/HFC666/image/master/img/rt3_2.jpeg" alt=""></p><h3 id="Sampling-to-summarize"><a href="#Sampling-to-summarize" class="headerlink" title="Sampling to summarize"></a>Sampling to summarize</h3><p>对样本进行总结主要包含以下几个方面：</p><ol><li>定义边界的区间</li><li>定义概率质量区间的问题</li><li>点估计的问题</li></ol><h4 id="Intervals-of-defined-boundaries"><a href="#Intervals-of-defined-boundaries" class="headerlink" title="Intervals of defined boundaries"></a>Intervals of defined boundaries</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># add up posterior probability where p &lt; 0.5</span></span><br><span class="line"><span class="built_in">sum</span>(posterior[p_grid &lt; <span class="number">0.5</span>])</span><br><span class="line">&gt; <span class="number">0.1718746</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use samples</span></span><br><span class="line"><span class="built_in">sum</span>(samples &lt; <span class="number">0.5</span>) / <span class="number">1e4</span></span><br><span class="line">&gt; <span class="number">0.1731</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span>(samples &gt; <span class="number">0.5</span> &amp; samples &lt; <span class="number">0.75</span>) / <span class="number">1e4</span></span><br><span class="line">&gt; <span class="number">0.6037</span></span><br></pre></td></tr></table></figure><h4 id="Intervals-of-defined-mass"><a href="#Intervals-of-defined-mass" class="headerlink" title="Intervals of defined mass"></a>Intervals of defined mass</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">quantile(samples, <span class="number">0.8</span>)</span><br><span class="line">&gt;       <span class="number">80</span>% </span><br><span class="line">0.7597598 </span><br><span class="line"></span><br><span class="line">quantile(samples, c(0.1, 0.9))</span><br><span class="line">&gt;       10%       <span class="number">90</span>% </span><br><span class="line">0.4504505 0.8118118 </span><br></pre></td></tr></table></figure><p>我们也可以通过<code>PI</code>和<code>HDPI</code>（highest posterior density interval ）函数计算给定概率质量的区间：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">p_grid &lt;- seq( from=<span class="number">0</span> , to=<span class="number">1</span> , length.out=<span class="number">1000</span> )</span><br><span class="line">prior &lt;- <span class="built_in">rep</span>(<span class="number">1</span>,<span class="number">1000</span>)</span><br><span class="line">likelihood &lt;- dbinom( <span class="number">3</span> , size=<span class="number">3</span> , prob=p_grid ) </span><br><span class="line">posterior &lt;- likelihood * prior</span><br><span class="line">posterior &lt;- posterior / <span class="built_in">sum</span>(posterior)</span><br><span class="line">samples &lt;- sample( p_grid , size=<span class="number">1e4</span> , replace=<span class="literal">TRUE</span> , prob=posterior )</span><br><span class="line"><span class="comment"># center</span></span><br><span class="line">PI(samples, prob = <span class="number">0.5</span>)</span><br><span class="line">&gt;       <span class="number">25</span>%       75% </span><br><span class="line"><span class="number">0.7067067</span> <span class="number">0.9321822</span> </span><br><span class="line"></span><br><span class="line">HPDI(samples, prob = <span class="number">0.5</span>)</span><br><span class="line">&gt;   |<span class="number">0.5</span>      <span class="number">0.5</span>| </span><br><span class="line"><span class="number">0.8428428</span> <span class="number">0.9979980</span> </span><br></pre></td></tr></table></figure><p>一般情况下<code>PI</code>和<code>HDPI</code>的结果相差不大，但是当概率密度函数高度倾斜时其值会大不相同。</p><h4 id="Point-estimates"><a href="#Point-estimates" class="headerlink" title="Point estimates"></a>Point estimates</h4><p>最大后验估计：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p_grid[which.max(posterior)]</span><br><span class="line">&gt; <span class="number">1</span></span><br></pre></td></tr></table></figure><p>也可以根据样本来计算众数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chainmode(samples, adj=<span class="number">0.01</span>)</span><br><span class="line">&gt; <span class="number">0.9901787</span></span><br></pre></td></tr></table></figure><p>或是均值和中位数</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mean(samples)</span><br><span class="line">median(samples)</span><br><span class="line">&gt; <span class="number">0.8015405</span></span><br><span class="line">&gt; <span class="number">0.8448448</span></span><br></pre></td></tr></table></figure><p>那么描述后验估计用哪一个点呢？有时候我们采用损失函数还衡量点的好坏，但是损失函数的选择也会影响点的选择，如我们选择两个点之间距离的绝对值的差值作为损失函数，那么答案就是中位数。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loss &lt;- sapply(p_grid, <span class="keyword">function</span>(d) <span class="built_in">sum</span>(posterior*<span class="built_in">abs</span>(d-p_grid)))</span><br><span class="line">p_grid[which.min(loss)]</span><br><span class="line">&gt; <span class="number">0.8408408</span></span><br></pre></td></tr></table></figure><p>可以看到与中位数非常接近。</p><h3 id="Sampling-to-simulate-prediction"><a href="#Sampling-to-simulate-prediction" class="headerlink" title="Sampling to simulate prediction"></a>Sampling to simulate prediction</h3><h4 id="Dummy-data"><a href="#Dummy-data" class="headerlink" title="Dummy data"></a>Dummy data</h4><p>似然函数也可以用来产产生数据，例如我们之间的例子，我们的似然函数为：</p><script type="math/tex; mode=display">\Pr(w\mid n,p) = \frac{n!}{w!(n-w)!}p^w(1-p)^{n-w}</script><p>例如计算投掷两次，分别有$0,1,2$次是水的概率，$p=0.7$。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dbinom(<span class="number">0</span>:<span class="number">2</span>, size = <span class="number">2</span>, prob = <span class="number">0.7</span>)</span><br><span class="line">&gt; <span class="number">0.09</span> <span class="number">0.42</span> <span class="number">0.49</span></span><br></pre></td></tr></table></figure><p>产生数据：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rbinom(<span class="number">10</span>, size = <span class="number">2</span>, prob = <span class="number">0.7</span>)</span><br><span class="line">&gt; <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>让我们以$p=0.7$的概率投掷$9$次产生$100000$个数据：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dummy_w &lt;- rbinom(<span class="number">1e5</span>, size = <span class="number">9</span>, prob = <span class="number">0.7</span>)</span><br><span class="line">simplehist(dummy_w, xlab = <span class="string">&quot;dummy water count&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/HFC666/image/master/img/rt3_3.jpeg" alt=""></p><h4 id="Model-checking"><a href="#Model-checking" class="headerlink" title="Model checking"></a>Model checking</h4><p>现在我们的模型有两个不确定性，一个是$p$的不确定性，因为$p$存在一个后验分布，另一个是样本生成的不确定性，即使对于固定的$p$，样本的生成也是不确定的。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">w &lt;- rbinom(<span class="number">1e4</span>, size = <span class="number">9</span>, prob = samples)</span><br><span class="line">simplehist(w)</span><br></pre></td></tr></table></figure><p>相当于我们先从$p$的后验分布中采样$p$，之后根据采样得到的$p$生成数据，得到的就是$p$的<strong>后验预测分布</strong>。</p><p><img src="https://raw.githubusercontent.com/HFC666/image/master/img/rt3_4.jpeg" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Sampling-the-Imaginary&quot;&gt;&lt;a href=&quot;#Sampling-the-Imaginary&quot; class=&quot;headerlink&quot; title=&quot;Sampling the Imaginary&quot;&gt;&lt;/a&gt;Sampling the Imaginary&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/HFC666/image/master/img/rt3_1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="书籍阅读" scheme="https://www.hfcouc.work/categories/%E4%B9%A6%E7%B1%8D%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="概率编程" scheme="https://www.hfcouc.work/tags/%E6%A6%82%E7%8E%87%E7%BC%96%E7%A8%8B/"/>
    
    <category term="贝叶斯统计" scheme="https://www.hfcouc.work/tags/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BB%9F%E8%AE%A1/"/>
    
    <category term="Statistical Rethinking" scheme="https://www.hfcouc.work/tags/Statistical-Rethinking/"/>
    
  </entry>
  
  <entry>
    <title>Statistical Rethinking:Chapter2</title>
    <link href="https://www.hfcouc.work/2022/06/29/rt2/"/>
    <id>https://www.hfcouc.work/2022/06/29/rt2/</id>
    <published>2022-06-29T01:30:27.000Z</published>
    <updated>2022-06-29T01:33:09.911Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Small-Worlds-and-Large-Worlds"><a href="#Small-Worlds-and-Large-Worlds" class="headerlink" title="Small Worlds and Large Worlds"></a>Small Worlds and Large Worlds</h2><p><img src="https://raw.githubusercontent.com/HFC666/image/master/img/rt2_1.png" alt=""></p><p>当初麦哲伦进行环球航行的时候，错误地认为地球比实际要小，他认为地球的周长只有$30000$km而不是$40000$km。麦哲伦的大小世界提供了模型与现实的对比。小世界是模型自成一体的逻辑世界，在这个小世界里我们根据自己的认知对模型做出一系列假设并且能够验证模型的逻辑。假设小世界是对现实世界的准确描述，没有替代模型可以更好地利用数据中的信息并支持更好的决策。</p><p>大世界是现实世界，可能存在很多我们小世界中没有考虑的事件，模型是对现实世界的不完整表示。</p><span id="more"></span><h3 id="The-garden-of-forking-data"><a href="#The-garden-of-forking-data" class="headerlink" title="The garden of forking data"></a>The garden of forking data</h3><p>给定数据，能够用更多的方式产生数据的解释更可靠(概率更大)。</p><h4 id="Counting-possibilities"><a href="#Counting-possibilities" class="headerlink" title="Counting possibilities"></a>Counting possibilities</h4><p>考虑下面的例子，假设有个袋子里有$4$个球，球的颜色为蓝色和白色，我们有放回地取三个球，得到的结果为<strong>蓝白蓝</strong>。袋子里的球和对应于产生该结果的方式如下表所示：</p><p><img src="https://raw.githubusercontent.com/HFC666/image/master/img/rt2_2.jpg" alt=""></p><p>所以我们推测袋子里的球为第四种的可能性较大。</p><h4 id="Using-prior-information"><a href="#Using-prior-information" class="headerlink" title="Using prior information"></a>Using prior information</h4><p>我们也可以结合先验信息。假设我们又从袋子里抽出来一个球为蓝色，那么我们上面得到的结果就可以作为先验来进行推测，与现在的结果进行相乘，得到的结果如下图：</p><p><img src="https://raw.githubusercontent.com/HFC666/image/master/img/rt2_3.jpg" alt=""></p><blockquote><p>第一列每中假设为产生新数据的方式，第二列为之前的结果作为先验。</p></blockquote><h4 id="From-counts-to-probability"><a href="#From-counts-to-probability" class="headerlink" title="From counts to probability"></a>From counts to probability</h4><p>我们可以将之间的计算转为概率，还是之前的例子，变为：</p><p><img src="https://raw.githubusercontent.com/HFC666/image/master/img/rt2_4.jpg" alt=""></p><blockquote><p>$p$为蓝色的比例。</p></blockquote><p>计算方法为：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ways &lt;- <span class="built_in">c</span>(<span class="number">0</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>)</span><br><span class="line">ways/<span class="built_in">sum</span>(ways)</span><br><span class="line">&gt; <span class="number">0.00</span> <span class="number">0.15</span> <span class="number">0.40</span> <span class="number">0.45</span> <span class="number">0.00</span></span><br></pre></td></tr></table></figure><h3 id="Building-a-model"><a href="#Building-a-model" class="headerlink" title="Building a  model"></a>Building a  model</h3><p>假设我们要估计地球上海洋所占的比例，假设我们在地球上随机抽样得到的结果为<code>WLWWWLWLW</code>。我们利用上面提到的方法对其进行推断：</p><p><img src="https://raw.githubusercontent.com/HFC666/image/master/img/rt2_5.jpg" alt=""></p><h3 id="Components-of-the-model"><a href="#Components-of-the-model" class="headerlink" title="Components of the model"></a>Components of the model</h3><h4 id="Likelihood"><a href="#Likelihood" class="headerlink" title="Likelihood"></a>Likelihood</h4><p>首先是似然，似然指的是在给定参数情况下数据的合理性(发生的可能性)。</p><h4 id="Prior"><a href="#Prior" class="headerlink" title="Prior"></a>Prior</h4><p>对于我们想要贝叶斯估计的每个参数，我们需要为其提供先验。先验也为一个概率分布，可以是之前数据得到的参数的概率分布或是我们自己根据经验的概率分布。</p><h4 id="Posterior"><a href="#Posterior" class="headerlink" title="Posterior"></a>Posterior</h4><p>再有了先验和似然后我们就可以计算后验：</p><script type="math/tex; mode=display">\text { Posterior }=\frac{\text { Likelihood } \times \text { Prior }}{\text { Average Likelihood }}</script><h3 id="Making-the-model-go"><a href="#Making-the-model-go" class="headerlink" title="Making the model go"></a>Making the model go</h3><p>由于后验分布存在积分，我们有时无法直接对其进行计算，这时候就需要数值方法，我们主要介绍三种方法：</p><ol><li>网格近似</li><li>二次逼近</li><li>MCMC</li></ol><h4 id="Grid-approximation"><a href="#Grid-approximation" class="headerlink" title="Grid approximation"></a>Grid approximation</h4><p>最简单的调节技术之一是网格近似。虽然大多数参数是连续的，能够取无限数量的值，但事实证明，我们可以通过仅考虑参数值的有限网格来实现对连续后验分布的极好近似。</p><p>但是在大多数真实建模中，网格近似是不切实际的。原因是随着参数数量的增加，它的扩展性很差。所以在后面的章节中，网格近似将逐渐消失，取而代之的是其他更有效的技术。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># define grid</span></span><br><span class="line">p_grid &lt;- seq(from=<span class="number">0</span>, to=<span class="number">1</span>, length.out=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># define prior</span></span><br><span class="line">prior = <span class="built_in">rep</span>(<span class="number">1</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># compute likelihood at each value in grid</span></span><br><span class="line">likelihood &lt;- dbinom(<span class="number">6</span>, size = <span class="number">9</span>, prob = p_grid)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># compute product of likelihood and prior</span></span><br><span class="line">unstd.posterior &lt;- likelihood * prior</span><br><span class="line"></span><br><span class="line"><span class="comment"># standardize the posterior, so it sums to 1</span></span><br><span class="line">posterior &lt;- unstd.posterior / <span class="built_in">sum</span>(unstd.posterior)</span><br></pre></td></tr></table></figure><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot(p_grid, posterior, type = <span class="string">&quot;b&quot;</span>, xlab = <span class="string">&quot;probability of water&quot;</span>, ylab = <span class="string">&quot;posterior probability&quot;</span>)</span><br><span class="line">mtext(<span class="string">&quot;20 points&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/HFC666/image/master/img/rt2_6.jpeg" alt=""></p><h4 id="Quadratic-approximation"><a href="#Quadratic-approximation" class="headerlink" title="Quadratic approximation"></a>Quadratic approximation</h4><p>在一般的条件下，后验分布峰值附近的区域在形状上将接近高斯或正态分布。这意味着后验分布可以有用地近似为高斯分布。高斯分布很方便，因为它可以完全用两个数字来描述：中心的位置（均值）和分布（方差）。该方法分为两个步骤：</p><ol><li>找到后验分布的众数</li><li>一旦找到后验的峰值，就必须估计峰值附近的曲率。该曲率足以计算整个后验分布的二次近似</li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">library(rethinking)</span><br><span class="line">globe.qa &lt;- map(</span><br><span class="line">  alist(</span><br><span class="line">    w ~ dbinom(<span class="number">9</span>, p), <span class="comment">#likelihood</span></span><br><span class="line">    p ~ dunif(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">  ),</span><br><span class="line">  data = <span class="built_in">list</span>(w=<span class="number">6</span>)</span><br><span class="line">)</span><br><span class="line"><span class="comment"># display summary of quadratic approximation</span></span><br><span class="line">precis(globe.qa)</span><br><span class="line">&gt;  mean   sd <span class="number">5.5</span>% 94.5%</span><br><span class="line">p <span class="number">0.67</span> <span class="number">0.16</span> <span class="number">0.42</span>  <span class="number">0.92</span></span><br></pre></td></tr></table></figure><p>我们与真实的后验进行比较：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># analytical calculation</span></span><br><span class="line">w &lt;- 6</span><br><span class="line">n &lt;- 9</span><br><span class="line">curve(dbeta(x, w+<span class="number">1</span>, n-w+<span class="number">1</span>), from = <span class="number">0</span>, to=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># quadratic approximation</span></span><br><span class="line">curve(dnorm(x, <span class="number">0.67</span>, <span class="number">0.16</span>), lty=<span class="number">2</span>, add = <span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/HFC666/image/master/img/rt2_7.jpeg" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Small-Worlds-and-Large-Worlds&quot;&gt;&lt;a href=&quot;#Small-Worlds-and-Large-Worlds&quot; class=&quot;headerlink&quot; title=&quot;Small Worlds and Large Worlds&quot;&gt;&lt;/a&gt;Small Worlds and Large Worlds&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/HFC666/image/master/img/rt2_1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;当初麦哲伦进行环球航行的时候，错误地认为地球比实际要小，他认为地球的周长只有$30000$km而不是$40000$km。麦哲伦的大小世界提供了模型与现实的对比。小世界是模型自成一体的逻辑世界，在这个小世界里我们根据自己的认知对模型做出一系列假设并且能够验证模型的逻辑。假设小世界是对现实世界的准确描述，没有替代模型可以更好地利用数据中的信息并支持更好的决策。&lt;/p&gt;
&lt;p&gt;大世界是现实世界，可能存在很多我们小世界中没有考虑的事件，模型是对现实世界的不完整表示。&lt;/p&gt;</summary>
    
    
    
    <category term="书籍阅读" scheme="https://www.hfcouc.work/categories/%E4%B9%A6%E7%B1%8D%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="概率编程" scheme="https://www.hfcouc.work/tags/%E6%A6%82%E7%8E%87%E7%BC%96%E7%A8%8B/"/>
    
    <category term="贝叶斯统计" scheme="https://www.hfcouc.work/tags/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BB%9F%E8%AE%A1/"/>
    
    <category term="Statistical Rethinking" scheme="https://www.hfcouc.work/tags/Statistical-Rethinking/"/>
    
  </entry>
  
  <entry>
    <title>Statistical Rethinking:Chapter1</title>
    <link href="https://www.hfcouc.work/2022/06/28/rt1/"/>
    <id>https://www.hfcouc.work/2022/06/28/rt1/</id>
    <published>2022-06-28T09:47:59.000Z</published>
    <updated>2022-06-29T01:30:33.136Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="The-Golem-of-Prague"><a href="#The-Golem-of-Prague" class="headerlink" title="The Golem of Prague"></a>The Golem of Prague</h2><p><img src="https://raw.githubusercontent.com/HFC666/image/master/img/rt1_1.png" alt=""></p><p><code>golem</code>为魔像，为一个非常强大的机器人，但是它只会听从人的命令，没有自主思考的能力。因此人类必须给他设置非常具体的命令，否则可能会对人类造成伤害。</p><span id="more"></span><h3 id="Statistical-golems"><a href="#Statistical-golems" class="headerlink" title="Statistical golems"></a>Statistical golems</h3><p>统计家也制造魔像。</p><p><img src="https://raw.githubusercontent.com/HFC666/image/master/img/rt1_2.jpg" alt=""></p><blockquote><p>统计家制造的魔像，非常强大，但也同样需要人类的指导。缺乏灵活性，在需要创造性的区域无法应用。</p></blockquote><h3 id="Statistical-rethinking"><a href="#Statistical-rethinking" class="headerlink" title="Statistical rethinking"></a>Statistical rethinking</h3><p>很多人认为统计推断的目标是检验无效假设。但这是不正确的，我们有以下两个理由：</p><ol><li>假设不是模型。假设和不同种类的模型之间的关系是复杂的。许多模型对应同一个假设，许多假设对应一个模型。这使得严格的证伪变得不可能。</li><li>测量很重要。即使我们认为数据证伪了模型，另一位观察者也会争论我们的方法和措施。他们不相信数据。有时他们是对的。</li></ol><h4 id="Hypotheses-are-not-models"><a href="#Hypotheses-are-not-models" class="headerlink" title="Hypotheses are not models"></a>Hypotheses are not models</h4><p>当我们试图证伪一个假设时，我们必须使用某种模型，但是我们不能仅仅通过一个模型来证明假设是错误的。</p><p>我们看一个关于进化的例子，有人认为进化是中性的，而有人不这么认为，所有存在两个假设。同一个假设可能导致不同的过程的模型，而同一个过程模型会引出不同的统计模型，同一个统计模型也可能对应于不同的过程模型和假设，因此证伪非常复杂。</p><p><img src="https://raw.githubusercontent.com/HFC666/image/master/img/rt1_3.jpg" alt=""></p><h4 id="Measurement-matters"><a href="#Measurement-matters" class="headerlink" title="Measurement matters"></a>Measurement matters</h4><p>首先观测是存在误差的，而且有的测量非常复杂容易出现误差。</p><p>其次假设并不一定是离散的，现实生活中的很多假设都是连续的，例如$80\%$的天鹅都是白色的，对我们证伪来说非常困难。</p><h3 id="Three-tools-for-golem-engineering"><a href="#Three-tools-for-golem-engineering" class="headerlink" title="Three tools for golem engineering"></a>Three tools for golem engineering</h3><h4 id="Bayesian-data-analysis"><a href="#Bayesian-data-analysis" class="headerlink" title="Bayesian data analysis"></a>Bayesian data analysis</h4><p>贝叶斯统计用随机型来描述不确定性，更详细的将在第二章讲述。</p><h4 id="Multilevel-models"><a href="#Multilevel-models" class="headerlink" title="Multilevel models"></a>Multilevel models</h4><p>使用多级模型有四个典型且互补的原因：</p><ol><li>调整重复抽样的估计值。当不止一个观察来自同一个人、地点或时间时，传统的单级模型可能会误导我们。</li><li>调整抽样不平衡的估计值。当某些个体、地点或时间的采样次数多于其他人时，我们也可能会被单级模型误导。</li><li>研究变异。如果我们的研究问题包括数据中个人或其他群体之间的变化，那么多层次模型将有很大帮助，因为它们明确地模拟了变化。</li><li>避免平均。学者们经常对一些数据进行预平均，以构建用于回归分析的变量。这可能很危险，因为平均会消除变化。因此，它制造了虚假的信念。多级模型允许我们保留原始预平均值中的不确定性，同时仍使用平均值进行预测。</li></ol><h4 id="Model-comparison-and-information-criteria"><a href="#Model-comparison-and-information-criteria" class="headerlink" title="Model comparison and information criteria"></a>Model comparison and information criteria</h4><p>最著名的信息准则是 AIC，即 Akaike (ah-kah-ee-kay) 信息准则。AIC 及其同类被称为“信息”标准，因为它们从信息论中发展出对模型准确性的度量。我们可以用起来比较模型的好坏。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;The-Golem-of-Prague&quot;&gt;&lt;a href=&quot;#The-Golem-of-Prague&quot; class=&quot;headerlink&quot; title=&quot;The Golem of Prague&quot;&gt;&lt;/a&gt;The Golem of Prague&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/HFC666/image/master/img/rt1_1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;golem&lt;/code&gt;为魔像，为一个非常强大的机器人，但是它只会听从人的命令，没有自主思考的能力。因此人类必须给他设置非常具体的命令，否则可能会对人类造成伤害。&lt;/p&gt;</summary>
    
    
    
    <category term="书籍阅读" scheme="https://www.hfcouc.work/categories/%E4%B9%A6%E7%B1%8D%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="概率编程" scheme="https://www.hfcouc.work/tags/%E6%A6%82%E7%8E%87%E7%BC%96%E7%A8%8B/"/>
    
    <category term="贝叶斯统计" scheme="https://www.hfcouc.work/tags/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BB%9F%E8%AE%A1/"/>
    
    <category term="Statistical Rethinking" scheme="https://www.hfcouc.work/tags/Statistical-Rethinking/"/>
    
  </entry>
  
  <entry>
    <title>Turing:a language for flexible probabilistic inference</title>
    <link href="https://www.hfcouc.work/2022/06/28/Turing/"/>
    <id>https://www.hfcouc.work/2022/06/28/Turing/</id>
    <published>2022-06-28T02:32:40.000Z</published>
    <updated>2022-07-08T22:26:21.124Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Turing-a-language-for-flexible-probabilistic-inference"><a href="#Turing-a-language-for-flexible-probabilistic-inference" class="headerlink" title="Turing: a language for flexible probabilistic inference"></a>Turing: a language for flexible probabilistic inference</h2><blockquote><p>文章链接：<a href="http://proceedings.mlr.press/v84/ge18b.html?ref=https://githubhelp.com">http://proceedings.mlr.press/v84/ge18b.html?ref=https://githubhelp.com</a></p></blockquote><p><img src="https://raw.githubusercontent.com/HFC666/image/master/img/Tur1.png" alt=""></p><span id="more"></span><h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>在概率模型中，我们关注的一般是$p(\theta\mid y,\gamma)$，其中$\theta$为参数，$y$为观测数据，$\gamma$为一些确定了的超参数。</p><h4 id="Models-as-computer-programs"><a href="#Models-as-computer-programs" class="headerlink" title="Models as computer programs"></a>Models as computer programs</h4><p>最早的概率编程语言为BUGS，可以追溯到20世纪90年代。下面展示了概率程序的一般结构。</p><p>输入：数据$y$和超参数$\gamma$</p><p>步骤1：定义全局参数：</p><script type="math/tex; mode=display">\theta^{\text{global}}\sim p(\cdot\mid \gamma)</script><p>步骤2：对于每一个观测$y_n$，定义(局部)隐变量并计算似然：</p><script type="math/tex; mode=display">\begin{aligned}\theta_n^{\text{local}}&\sim p\left(\cdot\mid\theta_{1:n-1}^{\text{local}},\theta^{\text{global}},\gamma\right)\\y_n&\sim p\left(\cdot\mid \theta_{1:n}^{\text{local}},\theta^{\text{global}},\gamma\right)\end{aligned}</script><p>其中$n=1,2,\cdots,N$。</p><p>参数分为两类：$\theta_n^{\text{local}}$表示对于观测$y_n$的模型参数，如混合高斯模型中$y_n$属于哪个高斯分布的参数，而$\theta^{\text{global}}$表示全局变量。</p><h4 id="Inference-for-probabilistic-programs"><a href="#Inference-for-probabilistic-programs" class="headerlink" title="Inference for probabilistic programs"></a>Inference for probabilistic programs</h4><p>概率程序只有在与高效的推理引擎相结合时才能发挥其灵活性潜力。为了解释概率编程中推理如何工作，我们考虑以下具有$K$个状态的HMM例子：</p><script type="math/tex; mode=display">\begin{aligned}\pi_k&\sim \text{Dir}(\theta)\\\phi_k&\sim p(\gamma)\\z_t\mid z_{t-1}&\sim \text{Cat}(\cdot\mid \pi_{z_{t-1}})\\y_t\mid z_t&\sim h(\cdot\mid \phi_{z_t})\end{aligned}</script><p>其中$k = 1,2,\cdots,K$，$t = 1,\cdots,N$。</p><p>具有以下三个步骤的高效 Gibbs 采样器通常用于贝叶斯推理：</p><ul><li>Step 1: Sample $z_{1: T} \sim z_{1: T} \mid \phi_{1: K}, \pi_{1: K}, y_{1: T} ;$</li><li>Step 2: Sample $\phi_{k} \sim \phi_{k} \mid z_{1: T}, y_{1: T}, \gamma$;</li><li>Step 3: Sample $\pi_{k} \sim \pi_{k} \mid z_{1: T}, \theta(k=1, \ldots, K)$.</li></ul><h4 id="Computation-graph-based-inference"><a href="#Computation-graph-based-inference" class="headerlink" title="Computation graph based inference"></a>Computation graph based inference</h4><p>对概率程序进行建模的一大挑战是构建模型变量之间的计算图。对于一些编程语言，在推理之前概率图模型就已经生成，但是当程序中存在随机分支时就会出现问题，在这种情况下，我们不得不求助于其他推理方法。</p><h3 id="Composable-MCMC-inference"><a href="#Composable-MCMC-inference" class="headerlink" title="Composable MCMC inference"></a>Composable MCMC inference</h3><p>我们提出的可组合推理方法利用了HMC算法和粒子吉布斯(PG)算法。为了描述所提出的概率程序方法，我们利用潜在狄利克雷分配(LDA)的例子。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@model</span> lda(K ,M, N, w, d, beta, alpha) = <span class="keyword">begin</span></span><br><span class="line">    theta = <span class="built_in">Vector</span>&#123;<span class="built_in">Vector</span>&#123;<span class="built_in">Real</span>&#125;&#125;(M)</span><br><span class="line">    <span class="keyword">for</span> m = <span class="number">1</span>:M</span><br><span class="line">        theta[m] ~ Dirichlet(alpha)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    phi = <span class="built_in">Vector</span>&#123;<span class="built_in">Vector</span>&#123;<span class="built_in">Real</span>&#125;&#125;(K)</span><br><span class="line">    <span class="keyword">for</span> k = <span class="number">1</span>:K</span><br><span class="line">        phi[k] ~ Dirichlet(beta)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    z = tzeros(<span class="built_in">Int</span>, N)</span><br><span class="line">    <span class="keyword">for</span> n = <span class="number">1</span>:N</span><br><span class="line">        z[n] ~ Categorical(theta[d[n]])</span><br><span class="line">        w[n] ~ Categorical(phi[z[n]])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>其中变量$\phi,\theta,z$表示模型参数，变量$K,M,N,d,\beta,\alpha$表示超参数，$w$表示观测数据。</p><p>一旦定义了模型，提供数据和执行推理就很直观了。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = lda(K, V, M, N, w, d, beta, alpha)</span><br><span class="line">sample(model, engine)</span><br></pre></td></tr></table></figure><p><code>engine</code>是我们想要使用的MCMC引擎。例如，如果要应用例子吉布斯采样，我们可以：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spl = PG(n, m)</span><br><span class="line">sample(model, spl)</span><br></pre></td></tr></table></figure><p>这将会用含有$m$个粒子的PG进行$n$次迭代。</p><p>我们也可以对不同的参数采用不同的采样器：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spl2 = Gibbs(<span class="number">1000</span>, PG(<span class="number">10</span>,<span class="number">2</span>,:z), HMC(<span class="number">2</span>, <span class="number">0.1</span>, <span class="number">1</span>, <span class="number">5</span>, :phi,:theta))</span><br></pre></td></tr></table></figure><p>上述采样引擎<code>spl2</code>将参数分割为两部分，每个部分采用不同的采样方法，值得注意的是，分布的两个部分不需要是互斥的。</p><h4 id="A-family-of-MCMC-operators"><a href="#A-family-of-MCMC-operators" class="headerlink" title="A family of MCMC operators"></a>A family of MCMC operators</h4><p><img src="https://raw.githubusercontent.com/HFC666/image/master/img/tur2.jpg" alt=""></p><blockquote><p>Supported Monte Carlo algorithms in Turing</p></blockquote><h3 id="Implementation-and-Experiments"><a href="#Implementation-and-Experiments" class="headerlink" title="Implementation and Experiments"></a>Implementation and Experiments</h3><h4 id="The-Turing-library"><a href="#The-Turing-library" class="headerlink" title="The Turing library"></a>The Turing library</h4><p>Turing为Julia的一个包。因为Turing为一般的Julia程序，因此它可以利用Julia中丰富的数值和统计库。</p><h5 id="Efficient-particle-Gibbs-implementation"><a href="#Efficient-particle-Gibbs-implementation" class="headerlink" title="Efficient particle Gibbs implementation"></a>Efficient particle Gibbs implementation</h5><p>我们使用协程来实现粒子 Gibbs。协程可以看作是函数的泛化，具有可以在多个点暂停和恢复的特性。</p><h5 id="Automatic-differentiation"><a href="#Automatic-differentiation" class="headerlink" title="Automatic differentiation"></a>Automatic differentiation</h5><p>HMC在采样的过程需要梯度，当给定定义$\log p(\theta\mid z_{1:N},\gamma)$的计算程序时，这些梯度可以通过自动微分(AD)自动获得。为了简便和高效，我们率先使用了一种称为向量模式的前向微分技术。向量模式前向微分背后的主要概念是多维对偶数，其在标量函数上的行为定义为：</p><script type="math/tex; mode=display">f\left(\theta+\sum_{i=1}^D y_i\epsilon_i\right) = f(\theta) + f^{\prime}(\theta)\sum_{i=1}^Dy_i\epsilon_i</script><p>其中$\epsilon_i\epsilon_j=0,\text{for }i\neq j$。</p><p>对于小模型，向量前向AD非常高效。但是对于大模型逆向模式的AD较为高效，因此Turing两种模式都存在。</p><h5 id="Vectorized-random-variables"><a href="#Vectorized-random-variables" class="headerlink" title="Vectorized random variables"></a>Vectorized random variables</h5><p>Turing支持利用以下语法对独立同分布的变量进行矢量化采样：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rv = <span class="built_in">Vector</span>(<span class="number">10</span>)</span><br><span class="line">rv ~ [Normal(<span class="number">0</span>, <span class="number">1</span>)]</span><br></pre></td></tr></table></figure><h5 id="Constrained-random-variables"><a href="#Constrained-random-variables" class="headerlink" title="Constrained random variables"></a>Constrained random variables</h5><p>Turing支持约束的变量。主要由三种类型的约束：</p><ol><li>有界的单变量。</li><li>有简单约束的多维变量，如相加和为$1$。</li><li>矩阵约束：例如协方差矩阵为半正定矩阵。</li></ol><h5 id="MCMC-output-analysis"><a href="#MCMC-output-analysis" class="headerlink" title="MCMC output analysis"></a>MCMC output analysis</h5><p>在Turing中我们可以使用<code>describe</code>函数计算：</p><ol><li>均值</li><li>标准差</li><li>naive standard error</li><li>蒙特卡洛标准误差</li><li>有效样本数</li><li>分位数</li></ol><p>也可以使用<code>hpd</code>函数计算高后验概率区间，互相关<code>cor</code>，自相关<code>autocor</code>，状态空间变化率<code>changerate</code>和偏差信息准则<code>dic</code>等等。</p><h4 id="Finding-the-right-inference-engine"><a href="#Finding-the-right-inference-engine" class="headerlink" title="Finding the right inference engine"></a>Finding the right inference engine</h4><p>下面我们将比较<code>NUTS</code>和<code>Gibbs(PG,HMC)</code>在不同的概率模型上。</p><h5 id="Models-and-inference-engine-setup"><a href="#Models-and-inference-engine-setup" class="headerlink" title="Models and inference engine setup"></a>Models and inference engine setup</h5><p><strong>Stochastic Volatility Model</strong>：参数的集合为$\{\phi,\sigma,\mu,h_{1:N}\}$。所有这些参数对于目标分布来说都是可导的，因此NUTS算法是可用的：</p><script type="math/tex; mode=display">\begin{aligned}\mu &\sim \mathcal{C} \mathrm{a}(0,10)), \phi \sim \mathcal{U} \mathrm{n}(-1,1), \sigma \sim \mathcal{C} \mathrm{a}(0,5), \quad(\sigma>0) \\h_{1} & \sim \mathcal{N}\left(\mu, \sigma / \sqrt{1-\phi^{2}}\right), h_{n} \sim \mathcal{N}\left(\mu+\phi\left(h_{n-1}-\mu\right), \sigma\right) \\y_{n} & \sim \mathcal{N}\left(0, \exp \left(h_{n} / 2\right)\right) \quad(n=2,3, \ldots, N) .\end{aligned}</script><p>其中$\mathcal{C}\mathrm{a}$表示柯西分布。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spl1 = NUTS(<span class="number">1e4</span>, <span class="number">1e3</span>, <span class="number">0.65</span>)</span><br><span class="line">spl2 = Gibbs(<span class="number">1e4</span>, PG(<span class="number">5</span>, <span class="number">1</span>, :h), NUTS(<span class="number">1</span>, <span class="number">1e3</span>, <span class="number">0.65</span>, :mu, :phi, :sigma))</span><br></pre></td></tr></table></figure><p><strong>Gaussian Mixture Model</strong>：参数的集合为$\{z,\theta\}$，其中参数$\theta$是可导的，参数$z$不可以。为了运行NUTS算法，我们积分积掉$z$只对$\theta$采样：</p><script type="math/tex; mode=display">\begin{array}{r}\mu=\left(\mu_{1: K}\right), \quad \sigma=\left(\sigma_{1: K}\right), \quad \pi=\left(p_{1: K}\right) \\z \sim \operatorname{Cat}(\pi), \quad \theta \sim \mathcal{N}\left(\mu_{z}, \sigma_{z}\right)\end{array}</script><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spl3 = NUTS(<span class="number">5e4</span>, <span class="number">1000</span>, <span class="number">0.65</span>)</span><br><span class="line">spl4 = Gibbs(<span class="number">5e4</span>, PG(<span class="number">5</span>, <span class="number">1</span>, :z), NUTS(<span class="number">5e2</span>, <span class="number">1e3</span>, <span class="number">0.65</span>, :theta))</span><br></pre></td></tr></table></figure><h5 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h5><p><img src="https://raw.githubusercontent.com/HFC666/image/master/img/tur3.jpg" alt=""></p><blockquote><p>上图为在GMM模型上trace plot，下图为联合分布的概率的对数的图，可以看到两个算法都达到了收敛，但是NUTS算法在某些对方被”困住了”。在下图更明显。</p></blockquote><p><img src="https://raw.githubusercontent.com/HFC666/image/master/img/tur4.jpg" alt=""></p><blockquote><p>对具有$5$个混合的GMM采样的结果，可以更明显地看到NUTS算法被困住了，在图的上半部分只探索到了两个混合成分。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Turing-a-language-for-flexible-probabilistic-inference&quot;&gt;&lt;a href=&quot;#Turing-a-language-for-flexible-probabilistic-inference&quot; class=&quot;headerlink&quot; title=&quot;Turing: a language for flexible probabilistic inference&quot;&gt;&lt;/a&gt;Turing: a language for flexible probabilistic inference&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;文章链接：&lt;a href=&quot;http://proceedings.mlr.press/v84/ge18b.html?ref=https://githubhelp.com&quot;&gt;http://proceedings.mlr.press/v84/ge18b.html?ref=https://githubhelp.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/HFC666/image/master/img/Tur1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="文献阅读" scheme="https://www.hfcouc.work/categories/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/"/>
    
    
    <category term="概率编程" scheme="https://www.hfcouc.work/tags/%E6%A6%82%E7%8E%87%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Julia" scheme="https://www.hfcouc.work/tags/Julia/"/>
    
  </entry>
  
</feed>
